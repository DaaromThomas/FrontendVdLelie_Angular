{
  "version": 3,
  "sources": ["../../../../../../../packages/common/src/dom_adapter.ts", "../../../../../../../packages/common/src/dom_tokens.ts", "../../../../../../../packages/common/src/location/platform_location.ts", "../../../../../../../packages/common/src/location/util.ts", "../../../../../../../packages/common/src/location/location_strategy.ts", "../../../../../../../packages/common/src/location/hash_location_strategy.ts", "../../../../../../../packages/common/src/location/location.ts", "../../../../../../../packages/common/src/i18n/currencies.ts", "../../../../../../../packages/common/src/i18n/locale_data_api.ts", "../../../../../../../packages/common/src/i18n/format_date.ts", "../../../../../../../packages/common/src/i18n/format_number.ts", "../../../../../../../packages/common/src/i18n/localization.ts", "../../../../../../../packages/common/src/i18n/locale_data.ts", "../../../../../../../packages/common/src/cookie.ts", "../../../../../../../packages/common/src/directives/ng_class.ts", "../../../../../../../packages/common/src/directives/ng_component_outlet.ts", "../../../../../../../packages/common/src/directives/ng_for_of.ts", "../../../../../../../packages/common/src/directives/ng_if.ts", "../../../../../../../packages/common/src/directives/ng_switch_equality.ts", "../../../../../../../packages/common/src/directives/ng_switch.ts", "../../../../../../../packages/common/src/directives/ng_plural.ts", "../../../../../../../packages/common/src/directives/ng_style.ts", "../../../../../../../packages/common/src/directives/ng_template_outlet.ts", "../../../../../../../packages/common/src/directives/index.ts", "../../../../../../../packages/common/src/pipes/invalid_pipe_argument_error.ts", "../../../../../../../packages/common/src/pipes/async_pipe.ts", "../../../../../../../packages/common/src/pipes/case_conversion_pipes.ts", "../../../../../../../packages/common/src/pipes/date_pipe_config.ts", "../../../../../../../packages/common/src/pipes/date_pipe.ts", "../../../../../../../packages/common/src/pipes/i18n_plural_pipe.ts", "../../../../../../../packages/common/src/pipes/i18n_select_pipe.ts", "../../../../../../../packages/common/src/pipes/json_pipe.ts", "../../../../../../../packages/common/src/pipes/keyvalue_pipe.ts", "../../../../../../../packages/common/src/pipes/number_pipe.ts", "../../../../../../../packages/common/src/pipes/slice_pipe.ts", "../../../../../../../packages/common/src/pipes/index.ts", "../../../../../../../packages/common/src/common_module.ts", "../../../../../../../packages/common/src/platform_id.ts", "../../../../../../../packages/common/src/version.ts", "../../../../../../../packages/common/src/viewport_scroller.ts", "../../../../../../../packages/common/src/xhr.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/url.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/image_loaders/image_loader.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/image_loaders/cloudflare_loader.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/image_loaders/cloudinary_loader.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/image_loaders/imagekit_loader.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/image_loaders/imgix_loader.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/error_helper.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/asserts.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/lcp_image_observer.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/preconnect_link_checker.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/tokens.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/preload-link-creator.ts", "../../../../../../../packages/common/src/directives/ng_optimized_image/ng_optimized_image.ts", "../../../../../../../packages/common/src/common.ts", "../../../../../../../packages/common/public_api.ts", "../../../../../../../packages/common/index.ts", "../../../../../../../packages/common/common.ts", "../../../../../../../packages/common/http/src/backend.ts", "../../../../../../../packages/common/http/src/headers.ts", "../../../../../../../packages/common/http/src/params.ts", "../../../../../../../packages/common/http/src/context.ts", "../../../../../../../packages/common/http/src/request.ts", "../../../../../../../packages/common/http/src/response.ts", "../../../../../../../packages/common/http/src/client.ts", "../../../../../../../packages/common/http/src/fetch.ts", "../../../../../../../packages/common/http/src/interceptor.ts", "../../../../../../../packages/common/http/src/jsonp.ts", "../../../../../../../packages/common/http/src/xhr.ts", "../../../../../../../packages/common/http/src/xsrf.ts", "../../../../../../../packages/common/http/src/provider.ts", "../../../../../../../packages/common/http/src/module.ts", "../../../../../../../packages/common/http/src/transfer_cache.ts", "../../../../../../../packages/common/http/index.ts", "../../../../../../../packages/common/http/http.ts", "../../../../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts", "../../../../../../../packages/platform-browser/src/browser/browser_adapter.ts", "../../../../../../../packages/platform-browser/src/browser/testability.ts", "../../../../../../../packages/platform-browser/src/browser/xhr.ts", "../../../../../../../packages/platform-browser/src/dom/events/event_manager.ts", "../../../../../../../packages/platform-browser/src/dom/shared_styles_host.ts", "../../../../../../../packages/platform-browser/src/dom/dom_renderer.ts", "../../../../../../../packages/platform-browser/src/dom/events/dom_events.ts", "../../../../../../../packages/platform-browser/src/dom/events/key_events.ts", "../../../../../../../packages/platform-browser/src/browser.ts", "../../../../../../../packages/platform-browser/src/browser/meta.ts", "../../../../../../../packages/platform-browser/src/browser/title.ts", "../../../../../../../packages/platform-browser/src/dom/util.ts", "../../../../../../../packages/platform-browser/src/browser/tools/browser.ts", "../../../../../../../packages/platform-browser/src/browser/tools/common_tools.ts", "../../../../../../../packages/platform-browser/src/browser/tools/tools.ts", "../../../../../../../packages/platform-browser/src/dom/debug/by.ts", "../../../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts", "../../../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts", "../../../../../../../packages/platform-browser/src/hydration.ts", "../../../../../../../packages/platform-browser/src/version.ts", "../../../../../../../packages/platform-browser/src/platform-browser.ts", "../../../../../../../packages/platform-browser/public_api.ts", "../../../../../../../packages/platform-browser/index.ts", "../../../../../../../packages/platform-browser/platform-browser.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet _DOM: DomAdapter = null!;\n\nexport function getDOM(): DomAdapter {\n  return _DOM;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  // Needs Domino-friendly test utility\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract readonly supportsDOMEvents: boolean;\n\n  // Used by Meta\n  abstract remove(el: any): void;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createHtmlDocument(): Document;\n  abstract getDefaultDocument(): Document;\n\n  // Used by By.css\n  abstract isElementNode(node: any): boolean;\n\n  // Used by Testability\n  abstract isShadowRoot(node: any): boolean;\n\n  // Used by KeyEventsPlugin\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n\n  // Used by PlatformLocation and ServerEventManagerPlugin\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n\n  // Used by PlatformLocation\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n\n  // TODO: remove dependency in DefaultValueAccessor\n  abstract getUserAgent(): string;\n\n  // Used in the legacy @angular/http package which has some usage in g3.\n  abstract getCookie(name: string): string|null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context.\n * In a browser and SSR this is the DOM Document.\n * When using SSR, that document is created by [Domino](https://github.com/angular/domino).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be\n * platform-agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that Angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-server` provides\n * one suitable for use with server-side rendering.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM APIs like pushState, popState, etc.\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`\n * class, they are all platform-agnostic.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'platform', useFactory: () => inject(BrowserPlatformLocation)})\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract getState(): unknown;\n  /**\n   * Returns a function that, when executed, removes the `popstate` event handler.\n   */\n  abstract onPopState(fn: LocationChangeListener): VoidFunction;\n  /**\n   * Returns a function that, when executed, removes the `hashchange` event handler.\n   */\n  abstract onHashChange(fn: LocationChangeListener): VoidFunction;\n\n  abstract get href(): string;\n  abstract get protocol(): string;\n  abstract get hostname(): string;\n  abstract get port(): string;\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n\n  historyGo?(relativePosition: number): void {\n    throw new Error('Not implemented');\n  }\n}\n\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @publicApi\n */\nexport interface LocationChangeEvent {\n  type: string;\n  state: any;\n}\n\n/**\n * @publicApi\n */\nexport interface LocationChangeListener {\n  (event: LocationChangeEvent): any;\n}\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'platform',\n  useFactory: () => new BrowserPlatformLocation(),\n})\nexport class BrowserPlatformLocation extends PlatformLocation {\n  private _location: Location;\n  private _history: History;\n  private _doc = inject(DOCUMENT);\n\n  constructor() {\n    super();\n    this._location = window.location;\n    this._history = window.history;\n  }\n\n  override getBaseHrefFromDOM(): string {\n    return getDOM().getBaseHref(this._doc)!;\n  }\n\n  override onPopState(fn: LocationChangeListener): VoidFunction {\n    const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n    window.addEventListener('popstate', fn, false);\n    return () => window.removeEventListener('popstate', fn);\n  }\n\n  override onHashChange(fn: LocationChangeListener): VoidFunction {\n    const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n    window.addEventListener('hashchange', fn, false);\n    return () => window.removeEventListener('hashchange', fn);\n  }\n\n  override get href(): string {\n    return this._location.href;\n  }\n  override get protocol(): string {\n    return this._location.protocol;\n  }\n  override get hostname(): string {\n    return this._location.hostname;\n  }\n  override get port(): string {\n    return this._location.port;\n  }\n  override get pathname(): string {\n    return this._location.pathname;\n  }\n  override get search(): string {\n    return this._location.search;\n  }\n  override get hash(): string {\n    return this._location.hash;\n  }\n  override set pathname(newPath: string) {\n    this._location.pathname = newPath;\n  }\n\n  override pushState(state: any, title: string, url: string): void {\n    this._history.pushState(state, title, url);\n  }\n\n  override replaceState(state: any, title: string, url: string): void {\n    this._history.replaceState(state, title, url);\n  }\n\n  override forward(): void {\n    this._history.forward();\n  }\n\n  override back(): void {\n    this._history.back();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._history.go(relativePosition);\n  }\n\n  override getState(): unknown {\n    return this._history.state;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Joins two parts of a URL with a slash if needed.\n *\n * @param start  URL string\n * @param end    URL string\n *\n *\n * @returns The joined URL string.\n */\nexport function joinWithSlash(start: string, end: string): string {\n  if (start.length == 0) {\n    return end;\n  }\n  if (end.length == 0) {\n    return start;\n  }\n  let slashes = 0;\n  if (start.endsWith('/')) {\n    slashes++;\n  }\n  if (end.startsWith('/')) {\n    slashes++;\n  }\n  if (slashes == 2) {\n    return start + end.substring(1);\n  }\n  if (slashes == 1) {\n    return start + end;\n  }\n  return start + '/' + end;\n}\n\n/**\n * Removes a trailing slash from a URL string if needed.\n * Looks for the first occurrence of either `#`, `?`, or the end of the\n * line as `/` characters and removes the trailing slash if one exists.\n *\n * @param url URL string.\n *\n * @returns The URL string, modified if needed.\n */\nexport function stripTrailingSlash(url: string): string {\n  const match = url.match(/#|\\?|$/);\n  const pathEndIdx = match && match.index || url.length;\n  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n}\n\n/**\n * Normalizes URL parameters by prepending with `?` if needed.\n *\n * @param  params String of URL parameters.\n *\n * @returns The normalized URL parameters string.\n */\nexport function normalizeQueryParams(params: string): string {\n  return params && params[0] !== '?' ? '?' + params : params;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, inject, Injectable, InjectionToken, OnDestroy, Optional} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n/**\n * Enables the `Location` service to read route state from the browser's URL.\n * Angular provides two strategies:\n * `HashLocationStrategy` and `PathLocationStrategy`.\n *\n * Applications should use the `Router` or `Location` services to\n * interact with application route state.\n *\n * For instance, `HashLocationStrategy` produces URLs like\n * <code class=\"no-auto-link\">http://example.com#/foo</code>,\n * and `PathLocationStrategy` produces\n * <code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n *\n * See these two classes for more.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: () => inject(PathLocationStrategy)})\nexport abstract class LocationStrategy {\n  abstract path(includeHash?: boolean): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract getState(): unknown;\n  abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n  abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n  historyGo?(relativePosition: number): void {\n    throw new Error('Not implemented');\n  }\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract getBaseHref(): string;\n}\n\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * @usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport const APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you may provide a {@link APP_BASE_HREF}\n * or add a `<base href>` element to the document to override the default.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,\n * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.\n *\n * Similarly, if you add `<base href='/my/app/'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Note that when using `PathLocationStrategy`, neither the query nor\n * the fragment in the `<base href>` will be preserved, as outlined\n * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class PathLocationStrategy extends LocationStrategy implements OnDestroy {\n  private _baseHref: string;\n  private _removeListenerFns: (() => void)[] = [];\n\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) href?: string) {\n    super();\n\n    this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ??\n        inject(DOCUMENT).location?.origin ?? '';\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    while (this._removeListenerFns.length) {\n      this._removeListenerFns.pop()!();\n    }\n  }\n\n  override onPopState(fn: LocationChangeListener): void {\n    this._removeListenerFns.push(\n        this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));\n  }\n\n  override getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    return joinWithSlash(this._baseHref, internal);\n  }\n\n  override path(includeHash: boolean = false): string {\n    const pathname =\n        this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);\n    const hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n\n  override pushState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n\n  override replaceState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n\n  override forward(): void {\n    this._platformLocation.forward();\n  }\n\n  override back(): void {\n    this._platformLocation.back();\n  }\n\n  override getState(): unknown {\n    return this._platformLocation.getState();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._platformLocation.historyGo?.(relativePosition);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\n\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable()\nexport class HashLocationStrategy extends LocationStrategy implements OnDestroy {\n  private _baseHref: string = '';\n  private _removeListenerFns: (() => void)[] = [];\n\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    while (this._removeListenerFns.length) {\n      this._removeListenerFns.pop()!();\n    }\n  }\n\n  override onPopState(fn: LocationChangeListener): void {\n    this._removeListenerFns.push(\n        this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));\n  }\n\n  override getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  override path(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    const url = joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n\n  override pushState(state: any, title: string, path: string, queryParams: string) {\n    let url: string|null = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n\n  override replaceState(state: any, title: string, path: string, queryParams: string) {\n    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n\n  override forward(): void {\n    this._platformLocation.forward();\n  }\n\n  override back(): void {\n    this._platformLocation.back();\n  }\n\n  override getState(): unknown {\n    return this._platformLocation.getState();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._platformLocation.historyGo?.(relativePosition);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, OnDestroy, ɵɵinject} from '@angular/core';\nimport {SubscriptionLike} from 'rxjs';\n\nimport {LocationStrategy} from './location_strategy';\nimport {joinWithSlash, normalizeQueryParams, stripTrailingSlash} from './util';\n\n/** @publicApi */\nexport interface PopStateEvent {\n  pop?: boolean;\n  state?: any;\n  type?: string;\n  url?: string;\n}\n\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the `LocationStrategy` used, `Location` persists\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use the `Router.navigate()` service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * <code-example path='common/location/ts/path_location_component.ts'\n * region='LocationComponent'></code-example>\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  // See #23917\n  useFactory: createLocation,\n})\nexport class Location implements OnDestroy {\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _basePath: string;\n  /** @internal */\n  _locationStrategy: LocationStrategy;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription: SubscriptionLike|null = null;\n\n  constructor(locationStrategy: LocationStrategy) {\n    this._locationStrategy = locationStrategy;\n    const baseHref = this._locationStrategy.getBaseHref();\n    // Note: This class's interaction with base HREF does not fully follow the rules\n    // outlined in the spec https://www.freesoft.org/CIE/RFC/1808/18.htm.\n    // Instead of trying to fix individual bugs with more and more code, we should\n    // investigate using the URL constructor and providing the base as a second\n    // argument.\n    // https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#parameters\n    this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));\n    this._locationStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'state': ev.state,\n        'type': ev.type,\n      });\n    });\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this._urlChangeSubscription?.unsubscribe();\n    this._urlChangeListeners = [];\n  }\n\n  /**\n   * Normalizes the URL path for this location.\n   *\n   * @param includeHash True to include an anchor fragment in the path.\n   *\n   * @returns The normalized URL path.\n   */\n  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n  // removed.\n  path(includeHash: boolean = false): string {\n    return this.normalize(this._locationStrategy.path(includeHash));\n  }\n\n  /**\n   * Reports the current state of the location history.\n   * @returns The current value of the `history.state` object.\n   */\n  getState(): unknown {\n    return this._locationStrategy.getState();\n  }\n\n  /**\n   * Normalizes the given path and compares to the current normalized path.\n   *\n   * @param path The given URL path.\n   * @param query Query parameters.\n   *\n   * @returns True if the given URL path is equal to the current normalized path, false\n   * otherwise.\n   */\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + normalizeQueryParams(query));\n  }\n\n  /**\n   * Normalizes a URL path by stripping any trailing slashes.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns The normalized URL string.\n   */\n  normalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));\n  }\n\n  /**\n   * Normalizes an external URL path.\n   * If the given URL doesn't begin with a leading slash (`'/'`), adds one\n   * before normalizing. Adds a hash if `HashLocationStrategy` is\n   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns  A normalized platform-specific URL.\n   */\n  prepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._locationStrategy.prepareExternalUrl(url);\n  }\n\n  // TODO: rename this method to pushState\n  /**\n   * Changes the browser's URL to a normalized version of a given URL, and pushes a\n   * new item onto the platform's history.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   *\n   */\n  go(path: string, query: string = '', state: any = null): void {\n    this._locationStrategy.pushState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n        this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n  }\n\n  /**\n   * Changes the browser's URL to a normalized version of the given URL, and replaces\n   * the top item on the platform's history stack.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   */\n  replaceState(path: string, query: string = '', state: any = null): void {\n    this._locationStrategy.replaceState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n        this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n  }\n\n  /**\n   * Navigates forward in the platform's history.\n   */\n  forward(): void {\n    this._locationStrategy.forward();\n  }\n\n  /**\n   * Navigates back in the platform's history.\n   */\n  back(): void {\n    this._locationStrategy.back();\n  }\n\n  /**\n   * Navigate to a specific page from session history, identified by its relative position to the\n   * current page.\n   *\n   * @param relativePosition  Position of the target page in the history relative to the current\n   *     page.\n   * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`\n   * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go\n   * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs\n   * when `relativePosition` equals 0.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history\n   */\n  historyGo(relativePosition: number = 0): void {\n    this._locationStrategy.historyGo?.(relativePosition);\n  }\n\n  /**\n   * Registers a URL change listener. Use to catch updates performed by the Angular\n   * framework that are not detectible through \"popstate\" or \"hashchange\" events.\n   *\n   * @param fn The change handler function, which take a URL and a location history state.\n   * @returns A function that, when executed, unregisters a URL change listener.\n   */\n  onUrlChange(fn: (url: string, state: unknown) => void): VoidFunction {\n    this._urlChangeListeners.push(fn);\n\n    if (!this._urlChangeSubscription) {\n      this._urlChangeSubscription = this.subscribe(v => {\n        this._notifyUrlChangeListeners(v.url, v.state);\n      });\n    }\n\n    return () => {\n      const fnIndex = this._urlChangeListeners.indexOf(fn);\n      this._urlChangeListeners.splice(fnIndex, 1);\n\n      if (this._urlChangeListeners.length === 0) {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeSubscription = null;\n      }\n    };\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n\n  /**\n   * Subscribes to the platform's `popState` events.\n   *\n   * Note: `Location.go()` does not trigger the `popState` event in the browser. Use\n   * `Location.onUrlChange()` to subscribe to URL changes instead.\n   *\n   * @param value Event that is triggered when the state history changes.\n   * @param exception The exception to throw.\n   *\n   * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)\n   *\n   * @returns Subscribed events.\n   */\n  subscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): SubscriptionLike {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  /**\n   * Normalizes URL parameters by prepending with `?` if needed.\n   *\n   * @param  params String of URL parameters.\n   *\n   * @returns The normalized URL parameters string.\n   */\n  public static normalizeQueryParams: (params: string) => string = normalizeQueryParams;\n\n  /**\n   * Joins two parts of a URL with a slash if needed.\n   *\n   * @param start  URL string\n   * @param end    URL string\n   *\n   *\n   * @returns The joined URL string.\n   */\n  public static joinWithSlash: (start: string, end: string) => string = joinWithSlash;\n\n  /**\n   * Removes a trailing slash from a URL string if needed.\n   * Looks for the first occurrence of either `#`, `?`, or the end of the\n   * line as `/` characters and removes the trailing slash if one exists.\n   *\n   * @param url URL string.\n   *\n   * @returns The URL string, modified if needed.\n   */\n  public static stripTrailingSlash: (url: string) => string = stripTrailingSlash;\n}\n\nexport function createLocation() {\n  return new Location(ɵɵinject(LocationStrategy as any));\n}\n\nfunction _stripBasePath(basePath: string, url: string): string {\n  if (!basePath || !url.startsWith(basePath)) {\n    return url;\n  }\n  const strippedUrl = url.substring(basePath.length);\n  if (strippedUrl === '' || ['/', ';', '?', '#'].includes(strippedUrl[0])) {\n    return strippedUrl;\n  }\n  return url;\n}\n\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n\nfunction _stripOrigin(baseHref: string): string {\n  // DO NOT REFACTOR! Previously, this check looked like this:\n  // `/^(https?:)?\\/\\//.test(baseHref)`, but that resulted in\n  // syntactically incorrect code after Closure Compiler minification.\n  // This was likely caused by a bug in Closure Compiler, but\n  // for now, the check is rewritten to use `new RegExp` instead.\n  const isAbsoluteUrl = (new RegExp('^(https?:)?//')).test(baseHref);\n  if (isAbsoluteUrl) {\n    const [, pathname] = baseHref.split(/\\/\\/[^\\/]+/);\n    return pathname;\n  }\n  return baseHref;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nexport type CurrenciesSymbols = [string] | [string | undefined, string];\n\n/** @internal */\nexport const CURRENCIES_EN: {[code: string]: CurrenciesSymbols | [string | undefined, string | undefined, number]} = {\"ADP\":[undefined,undefined,0],\"AFN\":[undefined,\"؋\",0],\"ALL\":[undefined,undefined,0],\"AMD\":[undefined,\"֏\",2],\"AOA\":[undefined,\"Kz\"],\"ARS\":[undefined,\"$\"],\"AUD\":[\"A$\",\"$\"],\"AZN\":[undefined,\"₼\"],\"BAM\":[undefined,\"KM\"],\"BBD\":[undefined,\"$\"],\"BDT\":[undefined,\"৳\"],\"BHD\":[undefined,undefined,3],\"BIF\":[undefined,undefined,0],\"BMD\":[undefined,\"$\"],\"BND\":[undefined,\"$\"],\"BOB\":[undefined,\"Bs\"],\"BRL\":[\"R$\"],\"BSD\":[undefined,\"$\"],\"BWP\":[undefined,\"P\"],\"BYN\":[undefined,undefined,2],\"BYR\":[undefined,undefined,0],\"BZD\":[undefined,\"$\"],\"CAD\":[\"CA$\",\"$\",2],\"CHF\":[undefined,undefined,2],\"CLF\":[undefined,undefined,4],\"CLP\":[undefined,\"$\",0],\"CNY\":[\"CN¥\",\"¥\"],\"COP\":[undefined,\"$\",2],\"CRC\":[undefined,\"₡\",2],\"CUC\":[undefined,\"$\"],\"CUP\":[undefined,\"$\"],\"CZK\":[undefined,\"Kč\",2],\"DJF\":[undefined,undefined,0],\"DKK\":[undefined,\"kr\",2],\"DOP\":[undefined,\"$\"],\"EGP\":[undefined,\"E£\"],\"ESP\":[undefined,\"₧\",0],\"EUR\":[\"€\"],\"FJD\":[undefined,\"$\"],\"FKP\":[undefined,\"£\"],\"GBP\":[\"£\"],\"GEL\":[undefined,\"₾\"],\"GHS\":[undefined,\"GH₵\"],\"GIP\":[undefined,\"£\"],\"GNF\":[undefined,\"FG\",0],\"GTQ\":[undefined,\"Q\"],\"GYD\":[undefined,\"$\",2],\"HKD\":[\"HK$\",\"$\"],\"HNL\":[undefined,\"L\"],\"HRK\":[undefined,\"kn\"],\"HUF\":[undefined,\"Ft\",2],\"IDR\":[undefined,\"Rp\",2],\"ILS\":[\"₪\"],\"INR\":[\"₹\"],\"IQD\":[undefined,undefined,0],\"IRR\":[undefined,undefined,0],\"ISK\":[undefined,\"kr\",0],\"ITL\":[undefined,undefined,0],\"JMD\":[undefined,\"$\"],\"JOD\":[undefined,undefined,3],\"JPY\":[\"¥\",undefined,0],\"KHR\":[undefined,\"៛\"],\"KMF\":[undefined,\"CF\",0],\"KPW\":[undefined,\"₩\",0],\"KRW\":[\"₩\",undefined,0],\"KWD\":[undefined,undefined,3],\"KYD\":[undefined,\"$\"],\"KZT\":[undefined,\"₸\"],\"LAK\":[undefined,\"₭\",0],\"LBP\":[undefined,\"L£\",0],\"LKR\":[undefined,\"Rs\"],\"LRD\":[undefined,\"$\"],\"LTL\":[undefined,\"Lt\"],\"LUF\":[undefined,undefined,0],\"LVL\":[undefined,\"Ls\"],\"LYD\":[undefined,undefined,3],\"MGA\":[undefined,\"Ar\",0],\"MGF\":[undefined,undefined,0],\"MMK\":[undefined,\"K\",0],\"MNT\":[undefined,\"₮\",2],\"MRO\":[undefined,undefined,0],\"MUR\":[undefined,\"Rs\",2],\"MXN\":[\"MX$\",\"$\"],\"MYR\":[undefined,\"RM\"],\"NAD\":[undefined,\"$\"],\"NGN\":[undefined,\"₦\"],\"NIO\":[undefined,\"C$\"],\"NOK\":[undefined,\"kr\",2],\"NPR\":[undefined,\"Rs\"],\"NZD\":[\"NZ$\",\"$\"],\"OMR\":[undefined,undefined,3],\"PHP\":[\"₱\"],\"PKR\":[undefined,\"Rs\",2],\"PLN\":[undefined,\"zł\"],\"PYG\":[undefined,\"₲\",0],\"RON\":[undefined,\"lei\"],\"RSD\":[undefined,undefined,0],\"RUB\":[undefined,\"₽\"],\"RWF\":[undefined,\"RF\",0],\"SBD\":[undefined,\"$\"],\"SEK\":[undefined,\"kr\",2],\"SGD\":[undefined,\"$\"],\"SHP\":[undefined,\"£\"],\"SLE\":[undefined,undefined,2],\"SLL\":[undefined,undefined,0],\"SOS\":[undefined,undefined,0],\"SRD\":[undefined,\"$\"],\"SSP\":[undefined,\"£\"],\"STD\":[undefined,undefined,0],\"STN\":[undefined,\"Db\"],\"SYP\":[undefined,\"£\",0],\"THB\":[undefined,\"฿\"],\"TMM\":[undefined,undefined,0],\"TND\":[undefined,undefined,3],\"TOP\":[undefined,\"T$\"],\"TRL\":[undefined,undefined,0],\"TRY\":[undefined,\"₺\"],\"TTD\":[undefined,\"$\"],\"TWD\":[\"NT$\",\"$\",2],\"TZS\":[undefined,undefined,2],\"UAH\":[undefined,\"₴\"],\"UGX\":[undefined,undefined,0],\"USD\":[\"$\"],\"UYI\":[undefined,undefined,0],\"UYU\":[undefined,\"$\"],\"UYW\":[undefined,undefined,4],\"UZS\":[undefined,undefined,2],\"VEF\":[undefined,\"Bs\",2],\"VND\":[\"₫\",undefined,0],\"VUV\":[undefined,undefined,0],\"XAF\":[\"FCFA\",undefined,0],\"XCD\":[\"EC$\",\"$\"],\"XOF\":[\"F CFA\",undefined,0],\"XPF\":[\"CFPF\",undefined,0],\"XXX\":[\"¤\"],\"YER\":[undefined,undefined,0],\"ZAR\":[undefined,\"R\"],\"ZMK\":[undefined,undefined,0],\"ZMW\":[undefined,\"ZK\"],\"ZWD\":[undefined,undefined,0]};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵCurrencyIndex, ɵExtraLocaleDataIndex, ɵfindLocaleData, ɵgetLocaleCurrencyCode, ɵgetLocalePluralCase, ɵLocaleDataIndex} from '@angular/core';\n\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\n\n\n/**\n * Format styles that can be used to represent numbers.\n * @see {@link getLocaleNumberFormat}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific\n}\n\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see {@link NgPlural}\n * @see {@link NgPluralCase}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum FormStyle {\n  Format,\n  Standalone\n}\n\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n */\nexport enum TranslationWidth {\n  /** 1 character for `en-US`. For example: 'S' */\n  Narrow,\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  Abbreviated,\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  Wide,\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  Short\n}\n\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see {@link getLocaleDateFormat}\n * @see {@link getLocaleTimeFormat}\n * @see {@link getLocaleDateTimeFormat}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n * @publicApi\n */\nexport enum FormatWidth {\n  /**\n   * For `en-US`, 'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  Short,\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  Medium,\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  Long,\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  Full\n}\n\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see {@link getLocaleNumberSymbol}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum NumberSymbol {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example: 2,345`.`67\n   */\n  Decimal,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup\n}\n\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleId(locale: string): string {\n  return ɵfindLocaleData(locale)[ɵLocaleDataIndex.LocaleId];\n}\n\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const amPmData = <[string, string][][]>[\n    data[ɵLocaleDataIndex.DayPeriodsFormat], data[ɵLocaleDataIndex.DayPeriodsStandalone]\n  ];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const daysData =\n      <string[][][]>[data[ɵLocaleDataIndex.DaysFormat], data[ɵLocaleDataIndex.DaysStandalone]];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const monthsData =\n      <string[][][]>[data[ɵLocaleDataIndex.MonthsFormat], data[ɵLocaleDataIndex.MonthsStandalone]];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleEraNames(\n    locale: string, width: TranslationWidth): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const erasData = <[string, string][]>data[ɵLocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.WeekendRange];\n}\n\n/**\n * Retrieves a localized date-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n\n * @publicApi\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[ɵLocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize.\n * @returns The character for the localized symbol.\n * @see {@link NumberSymbol}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = ɵfindLocaleData(locale);\n  const res = data[ɵLocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see {@link NumberFormatStyle}\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n * @publicApi\n */\nexport function getLocaleCurrencyCode(locale: string): string|null {\n  return ɵgetLocaleCurrencyCode(locale);\n}\n\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Currencies];\n}\n\n/**\n * @alias core/ɵgetLocalePluralCase\n * @publicApi\n */\nexport const getLocalePluralCase: (locale: string) => ((value: number) => Plural) =\n    ɵgetLocalePluralCase;\n\nfunction checkFullData(data: any) {\n  if (!data[ɵLocaleDataIndex.ExtraData]) {\n    throw new Error(`Missing extra locale data for the locale \"${\n        data[ɵLocaleDataIndex\n                 .LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n-common-format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see {@link getLocaleExtraDayPeriods}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time|[Time, Time])[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const rules = data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string|[string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n-common-format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see {@link getLocaleExtraDayPeriodRules}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Retrieves the writing direction of a specified locale\n * @param locale A locale code for the locale format rules to use.\n * @publicApi\n * @returns 'rtl' or 'ltr'\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n */\nexport function getLocaleDirection(locale: string): 'ltr'|'rtl' {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Directionality];\n}\n\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * Represents a time value with hours and minutes.\n *\n * @publicApi\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n\n\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getCurrencySymbol(code: string, format: 'wide'|'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[ɵCurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[ɵCurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[ɵCurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormatWidth, FormStyle, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleId, getLocaleMonthNames, getLocaleNumberSymbol, getLocaleTimeFormat, NumberSymbol, Time, TranslationWidth} from './locale_data_api';\n\nexport const ISO8601_DATE_REGEX =\n    /^(\\d{4,})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nconst NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst DATE_FORMATS_SPLIT =\n    /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n\nenum ZoneWidth {\n  Short,\n  ShortGMT,\n  Long,\n  Extended\n}\n\nenum DateType {\n  FullYear,\n  Month,\n  Date,\n  Hours,\n  Minutes,\n  Seconds,\n  FractionalSeconds,\n  Day\n}\n\nenum TranslationType {\n  DayPeriods,\n  Days,\n  Months,\n  Eras\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param format The date-time components to include. See `DatePipe` for details.\n * @param locale A locale code for the locale format rules to use.\n * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),\n * or a standard UTC/GMT or continental US time zone abbreviation.\n * If not specified, uses host system settings.\n *\n * @returns The formatted date string.\n *\n * @see {@link DatePipe}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function formatDate(\n    value: string|number|Date, format: string, locale: string, timezone?: string): string {\n  let date = toDate(value);\n  const namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let parts: string[] = [];\n  let match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  let dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let text = '';\n  parts.forEach(value => {\n    const dateFormatter = getDateFormatter(value);\n    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) :\n        value === '\\'\\''  ? '\\'' :\n                            value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n  });\n\n  return text;\n}\n\n/**\n * Create a new Date object with the given date value, and the time set to midnight.\n *\n * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.\n * See: https://github.com/angular/angular/issues/40377\n *\n * Note that this function returns a Date object whose time is midnight in the current locale's\n * timezone. In the future we might want to change this to be midnight in UTC, but this would be a\n * considerable breaking change.\n */\nfunction createDate(year: number, month: number, date: number): Date {\n  // The `newDate` is set to midnight (UTC) on January 1st 1970.\n  // - In PST this will be December 31st 1969 at 4pm.\n  // - In GMT this will be January 1st 1970 at 1am.\n  // Note that they even have different years, dates and months!\n  const newDate = new Date(0);\n\n  // `setFullYear()` allows years like 0001 to be set correctly. This function does not\n  // change the internal time of the date.\n  // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).\n  // - In PST this will now be September 20, 2019 at 4pm\n  // - In GMT this will now be September 20, 2019 at 1am\n\n  newDate.setFullYear(year, month, date);\n  // We want the final date to be at local midnight, so we reset the time.\n  // - In PST this will now be September 20, 2019 at 12am\n  // - In GMT this will now be September 20, 2019 at 12am\n  newDate.setHours(0, 0, 0);\n\n  return newDate;\n}\n\nfunction getNamedFormat(locale: string, format: string): string {\n  const localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const shortTime = getNamedFormat(locale, 'shortTime');\n      const shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n      break;\n    case 'medium':\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n      break;\n    case 'long':\n      const longTime = getNamedFormat(locale, 'longTime');\n      const longDate = getNamedFormat(locale, 'longDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n      break;\n    case 'full':\n      const fullTime = getNamedFormat(locale, 'fullTime');\n      const fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n\nfunction padNumber(\n    num: number, digits: number, minusSign = '-', trim?: boolean, negWrap?: boolean): string {\n  let neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let strNum = String(num);\n  while (strNum.length < digits) {\n    strNum = '0' + strNum;\n  }\n  if (trim) {\n    strNum = strNum.slice(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n\nfunction formatFractionalSeconds(milliseconds: number, digits: number): string {\n  const strMs = padNumber(milliseconds, 3);\n  return strMs.substring(0, digits);\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(\n    name: DateType, size: number, offset: number = 0, trim = false,\n    negWrap = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    let part = getDatePart(name, date);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n\n    if (name === DateType.Hours) {\n      if (part === 0 && offset === -12) {\n        part = 12;\n      }\n    } else if (name === DateType.FractionalSeconds) {\n      return formatFractionalSeconds(part, size);\n    }\n\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    return padNumber(part, size, localeMinus, trim, negWrap);\n  };\n}\n\nfunction getDatePart(part: DateType, date: Date): number {\n  switch (part) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.FractionalSeconds:\n      return date.getMilliseconds();\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new Error(`Unknown DateType value \"${part}\".`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(\n    name: TranslationType, width: TranslationWidth, form: FormStyle = FormStyle.Format,\n    extended = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(\n    date: Date, locale: string, name: TranslationType, width: TranslationWidth, form: FormStyle,\n    extended: boolean) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const currentHours = date.getHours();\n      const currentMinutes = date.getMinutes();\n      if (extended) {\n        const rules = getLocaleExtraDayPeriodRules(locale);\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        const index = rules.findIndex(rule => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const [from, to] = rule;\n            const afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;\n            const beforeTo =\n                (currentHours < to.hours ||\n                 (currentHours === to.hours && currentMinutes < to.minutes));\n            // We must account for normal rules that span a period during the day (e.g. 6am-9am)\n            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.\n            // 10pm - 5am) where `from` is greater (later!) than `to`.\n            //\n            // In the first case the current time must be BOTH after `from` AND before `to`\n            // (e.g. 8am is after 6am AND before 10am).\n            //\n            // In the second case the current time must be EITHER after `from` OR before `to`\n            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is\n            // after 10pm).\n            if (from.hours < to.hours) {\n              if (afterFrom && beforeTo) {\n                return true;\n              }\n            } else if (afterFrom || beforeTo) {\n              return true;\n            }\n          } else {  // noon or midnight\n            if (rule.hours === currentHours && rule.minutes === currentMinutes) {\n              return true;\n            }\n          }\n          return false;\n        });\n        if (index !== -1) {\n          return dayPeriods[index];\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, <TranslationWidth>width)[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, <TranslationWidth>width)[date.getFullYear() <= 0 ? 0 : 1];\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected: never = name;\n      throw new Error(`unexpected translation type ${unexpected}`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function(date: Date, locale: string, offset: number) {\n    const zone = -1 * offset;\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n              padNumber(Math.abs(zone % 60), 2, minusSign);\n        }\n      default:\n        throw new Error(`Unknown zone width \"${width}\"`);\n    }\n  };\n}\n\nconst JANUARY = 0;\nconst THURSDAY = 4;\nfunction getFirstThursdayOfYear(year: number) {\n  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();\n  return createDate(\n      year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n\nfunction getThursdayThisWeek(datetime: Date) {\n  return createDate(\n      datetime.getFullYear(), datetime.getMonth(),\n      datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function(date: Date, locale: string) {\n    let result;\n    if (monthBased) {\n      const nbDaysBefore1stDayOfMonth =\n          new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const thisThurs = getThursdayThisWeek(date);\n      // Some days of a year are part of next year according to ISO 8601.\n      // Compute the firstThurs from the year of this week's Thursday\n      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());\n      const diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8);  // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\n/**\n * Returns a date formatter that provides the week-numbering year for the input date.\n */\nfunction weekNumberingYearGetter(size: number, trim = false): DateFormatter {\n  return function(date: Date, locale: string) {\n    const thisThurs = getThursdayThisWeek(date);\n    const weekNumberingYear = thisThurs.getFullYear();\n    return padNumber(\n        weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset: number) => string;\n\nconst DATE_FORMATS: {[format: string]: DateFormatter} = {};\n\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format: string): DateFormatter|null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'Y':\n      formatter = weekNumberingYearGetter(1);\n      break;\n    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD\n    // 2010 => 10)\n    case 'YY':\n      formatter = weekNumberingYearGetter(2, true);\n      break;\n    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD\n    // 2010 => 2010)\n    case 'YYY':\n      formatter = weekNumberingYearGetter(3);\n      break;\n    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'YYYY':\n      formatter = weekNumberingYearGetter(4);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'LLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'LLLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)\n    case 'c':\n    case 'cc':\n      formatter = dateGetter(DateType.Day, 1);\n      break;\n    case 'ccc':\n      formatter =\n          dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'cccc':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'ccccc':\n      formatter =\n          dateStrGetter(TranslationType.Days, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n    case 'cccccc':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n      break;\n    case 'BBBB':\n      formatter =\n          dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second\n    case 'S':\n      formatter = dateGetter(DateType.FractionalSeconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.FractionalSeconds, 2);\n      break;\n    case 'SSS':\n      formatter = dateGetter(DateType.FractionalSeconds, 3);\n      break;\n\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const reverseValue = reverse ? -1 : 1;\n  const dateTimezoneOffset = date.getTimezoneOffset();\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nexport function toDate(value: string|number|Date): Date {\n  if (isDate(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number' && !isNaN(value)) {\n    return new Date(value);\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n\n    if (/^(\\d{4}(-\\d{1,2}(-\\d{1,2})?)?)$/.test(value)) {\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n      before Date creation to avoid time offset and errors in the new Date.\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      is applied.\n      Note: ISO months are 0 for January, 1 for February, ... */\n      const [y, m = 1, d = 1] = value.split('-').map((val: string) => +val);\n      return createDate(y, m - 1, d);\n    }\n\n    const parsedNb = parseFloat(value);\n\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n    if (!isNaN(value as any - parsedNb)) {\n      return new Date(parsedNb);\n    }\n\n    let match: RegExpMatchArray|null;\n    if (match = value.match(ISO8601_DATE_REGEX)) {\n      return isoStringToDate(match);\n    }\n  }\n\n  const date = new Date(value as any);\n  if (!isDate(date)) {\n    throw new Error(`Unable to convert \"${value}\" into a date`);\n  }\n  return date;\n}\n\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const date = new Date(0);\n  let tzHour = 0;\n  let tzMin = 0;\n\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\n  if (match[9]) {\n    tzHour = Number(match[9] + match[10]);\n    tzMin = Number(match[9] + match[11]);\n  }\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n  const h = Number(match[4] || 0) - tzHour;\n  const m = Number(match[5] || 0) - tzMin;\n  const s = Number(match[6] || 0);\n  // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)\n  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`\n  // becomes `999ms`.\n  const ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n\nexport function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLocaleNumberFormat, getLocaleNumberSymbol, getNumberOfCurrencyDigits, NumberFormatStyle, NumberSymbol} from './locale_data_api';\n\nexport const NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nconst MAX_DIGITS = 22;\nconst DECIMAL_SEP = '.';\nconst ZERO_CHAR = '0';\nconst PATTERN_SEP = ';';\nconst GROUP_SEP = ',';\nconst DIGIT_CHAR = '#';\nconst CURRENCY_CHAR = '¤';\nconst PERCENT_CHAR = '%';\n\n/**\n * Transforms a number to a locale string based on a style and a format.\n */\nfunction formatNumberToLocaleString(\n    value: number, pattern: ParsedNumberFormat, locale: string, groupSymbol: NumberSymbol,\n    decimalSymbol: NumberSymbol, digitsInfo?: string, isPercent = false): string {\n  let formattedText = '';\n  let isZero = false;\n\n  if (!isFinite(value)) {\n    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n  } else {\n    let parsedNumber = parseNumber(value);\n\n    if (isPercent) {\n      parsedNumber = toPercent(parsedNumber);\n    }\n\n    let minInt = pattern.minInt;\n    let minFraction = pattern.minFrac;\n    let maxFraction = pattern.maxFrac;\n\n    if (digitsInfo) {\n      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n      if (parts === null) {\n        throw new Error(`${digitsInfo} is not a valid digit info`);\n      }\n      const minIntPart = parts[1];\n      const minFractionPart = parts[3];\n      const maxFractionPart = parts[5];\n      if (minIntPart != null) {\n        minInt = parseIntAutoRadix(minIntPart);\n      }\n      if (minFractionPart != null) {\n        minFraction = parseIntAutoRadix(minFractionPart);\n      }\n      if (maxFractionPart != null) {\n        maxFraction = parseIntAutoRadix(maxFractionPart);\n      } else if (minFractionPart != null && minFraction > maxFraction) {\n        maxFraction = minFraction;\n      }\n    }\n\n    roundNumber(parsedNumber, minFraction, maxFraction);\n\n    let digits = parsedNumber.digits;\n    let integerLen = parsedNumber.integerLen;\n    const exponent = parsedNumber.exponent;\n    let decimals = [];\n    isZero = digits.every(d => !d);\n\n    // pad zeros for small numbers\n    for (; integerLen < minInt; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // pad zeros for small numbers\n    for (; integerLen < 0; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n\n    // format the integer digits with grouping separators\n    const groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n\n    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n\n    // append the decimal digits\n    if (decimals.length) {\n      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n    }\n\n    if (exponent) {\n      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n    }\n  }\n\n  if (value < 0 && !isZero) {\n    formattedText = pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    formattedText = pattern.posPre + formattedText + pattern.posSuf;\n  }\n\n  return formattedText;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param currency A string containing the currency symbol or its name,\n * such as \"$\" or \"Canadian Dollar\". Used in output string, but does not affect the operation\n * of the function.\n * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)\n * currency code, such as `USD` for the US dollar and `EUR` for the euro.\n * Used to determine the number of digits in the decimal part.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted currency value.\n *\n * @see {@link formatNumber}\n * @see {@link DecimalPipe}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function formatCurrency(\n    value: number, locale: string, currency: string, currencyCode?: string,\n    digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n\n  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode!);\n  pattern.maxFrac = pattern.minFrac;\n\n  const res = formatNumberToLocaleString(\n      value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n  return res\n      .replace(CURRENCY_CHAR, currency)\n      // if we have 2 time the currency character, the second one is ignored\n      .replace(CURRENCY_CHAR, '')\n      // If there is a spacing between currency character and the value and\n      // the currency character is suppressed by passing an empty string, the\n      // spacing character would remain as part of the string. Then we\n      // should remove it.\n      .trim();\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted percentage value.\n *\n * @see {@link formatNumber}\n * @see {@link DecimalPipe}\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n * @publicApi\n *\n */\nexport function formatPercent(value: number, locale: string, digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  const res = formatNumberToLocaleString(\n      value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n  return res.replace(\n      new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as text, with group sizing, separator, and other\n * parameters based on the locale.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted text string.\n * @see [Internationalization (i18n) Guide](/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function formatNumber(value: number, locale: string, digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  return formatNumberToLocaleString(\n      value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\n\ninterface ParsedNumberFormat {\n  minInt: number;\n  // the minimum number of digits required in the fraction part of the number\n  minFrac: number;\n  // the maximum number of digits required in the fraction part of the number\n  maxFrac: number;\n  // the prefix for a positive number\n  posPre: string;\n  // the suffix for a positive number\n  posSuf: string;\n  // the prefix for a negative number (e.g. `-` or `(`))\n  negPre: string;\n  // the suffix for a negative number (e.g. `)`)\n  negSuf: string;\n  // number of digits in each group of separated digits\n  gSize: number;\n  // number of digits in the last group of digits before the decimal separator\n  lgSize: number;\n}\n\nfunction parseNumberFormat(format: string, minusSign = '-'): ParsedNumberFormat {\n  const p = {\n    minInt: 1,\n    minFrac: 0,\n    maxFrac: 0,\n    posPre: '',\n    posSuf: '',\n    negPre: '',\n    negSuf: '',\n    gSize: 0,\n    lgSize: 0\n  };\n\n  const patternParts = format.split(PATTERN_SEP);\n  const positive = patternParts[0];\n  const negative = patternParts[1];\n\n  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n      positive.split(DECIMAL_SEP) :\n      [\n        positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n        positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n      ],\n        integer = positiveParts[0], fraction = positiveParts[1] || '';\n\n  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));\n\n  for (let i = 0; i < fraction.length; i++) {\n    const ch = fraction.charAt(i);\n    if (ch === ZERO_CHAR) {\n      p.minFrac = p.maxFrac = i + 1;\n    } else if (ch === DIGIT_CHAR) {\n      p.maxFrac = i + 1;\n    } else {\n      p.posSuf += ch;\n    }\n  }\n\n  const groups = integer.split(GROUP_SEP);\n  p.gSize = groups[1] ? groups[1].length : 0;\n  p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n\n  if (negative) {\n    const trunkLen = positive.length - p.posPre.length - p.posSuf.length,\n          pos = negative.indexOf(DIGIT_CHAR);\n\n    p.negPre = negative.substring(0, pos).replace(/'/g, '');\n    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, '');\n  } else {\n    p.negPre = minusSign + p.posPre;\n    p.negSuf = p.posSuf;\n  }\n\n  return p;\n}\n\ninterface ParsedNumber {\n  // an array of digits containing leading zeros as necessary\n  digits: number[];\n  // the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`\n  exponent: number;\n  // the number of the digits in `d` that are to the left of the decimal point\n  integerLen: number;\n}\n\n// Transforms a parsed number into a percentage by multiplying it by 100\nfunction toPercent(parsedNumber: ParsedNumber): ParsedNumber {\n  // if the number is 0, don't do anything\n  if (parsedNumber.digits[0] === 0) {\n    return parsedNumber;\n  }\n\n  // Getting the current number of decimals\n  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n  if (parsedNumber.exponent) {\n    parsedNumber.exponent += 2;\n  } else {\n    if (fractionLen === 0) {\n      parsedNumber.digits.push(0, 0);\n    } else if (fractionLen === 1) {\n      parsedNumber.digits.push(0);\n    }\n    parsedNumber.integerLen += 2;\n  }\n\n  return parsedNumber;\n}\n\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n */\nfunction parseNumber(num: number): ParsedNumber {\n  let numStr = Math.abs(num) + '';\n  let exponent = 0, digits, integerLen;\n  let i, j, zeros;\n\n  // Decimal point?\n  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (integerLen < 0) integerLen = i;\n    integerLen += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (integerLen < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    integerLen = numStr.length;\n  }\n\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n  }\n\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    integerLen = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n\n    // Trailing zeros are insignificant so ignore them\n    integerLen -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = Number(numStr.charAt(i));\n    }\n  }\n\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (integerLen > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = integerLen - 1;\n    integerLen = 1;\n  }\n\n  return {digits, exponent, integerLen};\n}\n\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n */\nfunction roundNumber(parsedNumber: ParsedNumber, minFrac: number, maxFrac: number) {\n  if (minFrac > maxFrac) {\n    throw new Error(`The minimum number of digits after fraction (${\n        minFrac}) is higher than the maximum (${maxFrac}).`);\n  }\n\n  let digits = parsedNumber.digits;\n  let fractionLen = digits.length - parsedNumber.integerLen;\n  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n\n  // The index of the digit to where rounding is to occur\n  let roundAt = fractionSize + parsedNumber.integerLen;\n  let digit = digits[roundAt];\n\n  if (roundAt > 0) {\n    // Drop fractional digits beyond `roundAt`\n    digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n\n    // Set non-fractional digits beyond `roundAt` to 0\n    for (let j = roundAt; j < digits.length; j++) {\n      digits[j] = 0;\n    }\n  } else {\n    // We rounded to zero so reset the parsedNumber\n    fractionLen = Math.max(0, fractionLen);\n    parsedNumber.integerLen = 1;\n    digits.length = Math.max(1, roundAt = fractionSize + 1);\n    digits[0] = 0;\n    for (let i = 1; i < roundAt; i++) digits[i] = 0;\n  }\n\n  if (digit >= 5) {\n    if (roundAt - 1 < 0) {\n      for (let k = 0; k > roundAt; k--) {\n        digits.unshift(0);\n        parsedNumber.integerLen++;\n      }\n      digits.unshift(1);\n      parsedNumber.integerLen++;\n    } else {\n      digits[roundAt - 1]++;\n    }\n  }\n\n  // Pad out with zeros to get the required fraction length\n  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n\n  let dropTrailingZeros = fractionSize !== 0;\n  // Minimal length = nb of decimals required + current nb of integers\n  // Any number besides that is optional and can be removed if it's a trailing 0\n  const minLen = minFrac + parsedNumber.integerLen;\n  // Do any carrying, e.g. a digit was rounded up to 10\n  const carry = digits.reduceRight(function(carry, d, i, digits) {\n    d = d + carry;\n    digits[i] = d < 10 ? d : d - 10;  // d % 10\n    if (dropTrailingZeros) {\n      // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n      if (digits[i] === 0 && i >= minLen) {\n        digits.pop();\n      } else {\n        dropTrailingZeros = false;\n      }\n    }\n    return d >= 10 ? 1 : 0;  // Math.floor(d / 10);\n  }, 0);\n  if (carry) {\n    digits.unshift(carry);\n    parsedNumber.integerLen++;\n  }\n}\n\nexport function parseIntAutoRadix(text: string): number {\n  const result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\n\nimport {getLocalePluralCase, Plural} from './locale_data_api';\n\n/**\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: (locale: string) => new NgLocaleLocalization(locale),\n  deps: [LOCALE_ID],\n})\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string {\n  let key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\n@Injectable()\nexport class NgLocaleLocalization extends NgLocalization {\n  constructor(@Inject(LOCALE_ID) protected locale: string) {\n    super();\n  }\n\n  override getPluralCategory(value: any, locale?: string): string {\n    const plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵregisterLocaleData} from '@angular/core';\n\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\n *\n * @publicApi\n */\nexport function registerLocaleData(data: any, localeId?: string|any, extraData?: any): void {\n  return ɵregisterLocaleData(data, localeId, extraData);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, DoCheck, ElementRef, Input, IterableDiffers, KeyValueDiffers, Renderer2, ɵstringify as stringify} from '@angular/core';\n\ntype NgClassSupportedTypes = string[]|Set<string>|{[klass: string]: any}|null|undefined;\n\nconst WS_REGEXP = /\\s+/;\n\nconst EMPTY_ARRAY: string[] = [];\n\n/**\n * Represents internal object used to track state of each CSS class. There are 3 different (boolean)\n * flags that, combined together, indicate state of a given CSS class:\n * - enabled: indicates if a class should be present in the DOM (true) or not (false);\n * - changed: tracks if a class was toggled (added or removed) during the custom dirty-checking\n * process; changed classes must be synchronized with the DOM;\n * - touched: tracks if a class is present in the current object bound to the class / ngClass input;\n * classes that are not present any more can be removed from the internal data structures;\n */\ninterface CssClassState {\n  // PERF: could use a bit mask to represent state as all fields are boolean flags\n  enabled: boolean;\n  changed: boolean;\n  touched: boolean;\n}\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngClass]',\n  standalone: true,\n})\nexport class NgClass implements DoCheck {\n  private initialClasses = EMPTY_ARRAY;\n  private rawClass: NgClassSupportedTypes;\n\n  private stateMap = new Map<string, CssClassState>();\n\n  constructor(\n      // leaving references to differs in place since flex layout is extending NgClass...\n      private _iterableDiffers: IterableDiffers, private _keyValueDiffers: KeyValueDiffers,\n      private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n  @Input('class')\n  set klass(value: string) {\n    this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY;\n  }\n\n  @Input('ngClass')\n  set ngClass(value: string|string[]|Set<string>|{[klass: string]: any}|null|undefined) {\n    this.rawClass = typeof value === 'string' ? value.trim().split(WS_REGEXP) : value;\n  }\n\n  /*\n  The NgClass directive uses the custom change detection algorithm for its inputs. The custom\n  algorithm is necessary since inputs are represented as complex object or arrays that need to be\n  deeply-compared.\n\n  This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance\n  might negatively impact runtime performance of the entire change detection cycle. The design of\n  this algorithm is making sure that:\n  - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when\n  needed), even if references to bound objects change;\n  - there is no memory allocation if nothing changes (even relatively modest memory allocation\n  during the change detection cycle can result in GC pauses for some of the CD cycles).\n\n  The algorithm works by iterating over the set of bound classes, staring with [class] binding and\n  then going over [ngClass] binding. For each CSS class name:\n  - check if it was seen before (this information is tracked in the state map) and if its value\n  changed;\n  - mark it as \"touched\" - names that are not marked are not present in the latest set of binding\n  and we can remove such class name from the internal data structures;\n\n  After iteration over all the CSS class names we've got data structure with all the information\n  necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush\n  changes to the DOM and reset internal data structures so those are ready for the next change\n  detection cycle.\n   */\n  ngDoCheck(): void {\n    // classes from the [class] binding\n    for (const klass of this.initialClasses) {\n      this._updateState(klass, true);\n    }\n\n    // classes from the [ngClass] binding\n    const rawClass = this.rawClass;\n    if (Array.isArray(rawClass) || rawClass instanceof Set) {\n      for (const klass of rawClass) {\n        this._updateState(klass, true);\n      }\n    } else if (rawClass != null) {\n      for (const klass of Object.keys(rawClass)) {\n        this._updateState(klass, Boolean(rawClass[klass]));\n      }\n    }\n\n    this._applyStateDiff();\n  }\n\n  private _updateState(klass: string, nextEnabled: boolean) {\n    const state = this.stateMap.get(klass);\n    if (state !== undefined) {\n      if (state.enabled !== nextEnabled) {\n        state.changed = true;\n        state.enabled = nextEnabled;\n      }\n      state.touched = true;\n    } else {\n      this.stateMap.set(klass, {enabled: nextEnabled, changed: true, touched: true});\n    }\n  }\n\n  private _applyStateDiff() {\n    for (const stateEntry of this.stateMap) {\n      const klass = stateEntry[0];\n      const state = stateEntry[1];\n\n      if (state.changed) {\n        this._toggleClass(klass, state.enabled);\n        state.changed = false;\n      } else if (!state.touched) {\n        // A class that was previously active got removed from the new collection of classes -\n        // remove from the DOM as well.\n        if (state.enabled) {\n          this._toggleClass(klass, false);\n        }\n        this.stateMap.delete(klass);\n      }\n\n      state.touched = false;\n    }\n  }\n\n  private _toggleClass(klass: string, enabled: boolean): void {\n    if (ngDevMode) {\n      if (typeof klass !== 'string') {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`);\n      }\n    }\n    klass = klass.trim();\n    if (klass.length > 0) {\n      klass.split(WS_REGEXP).forEach(klass => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef, createNgModule, Directive, DoCheck, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges, Type, ViewContainerRef} from '@angular/core';\n\n/**\n * Instantiates a {@link Component} type and inserts its Host View into the current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will be destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInputs`: Optional component inputs object, which will be bind to the\n * component.\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if it exists.\n *\n * * `ngComponentOutletNgModule`: Optional NgModule class reference to allow loading another\n * module dynamically, then loading a component from that module.\n *\n * * `ngComponentOutletNgModuleFactory`: Deprecated config option that allows providing optional\n * NgModule factory to allow loading another module dynamically, then loading a component from that\n * module. Use `ngComponentOutletNgModule` instead.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * With inputs\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   inputs: inputsExpression;\">\n * </ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized NgModule reference\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModule: ngModuleClass;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * @publicApi\n * @ngModule CommonModule\n */\n@Directive({\n  selector: '[ngComponentOutlet]',\n  standalone: true,\n})\nexport class NgComponentOutlet implements OnChanges, DoCheck, OnDestroy {\n  @Input() ngComponentOutlet: Type<any>|null = null;\n\n  @Input() ngComponentOutletInputs?: Record<string, unknown>;\n  @Input() ngComponentOutletInjector?: Injector;\n  @Input() ngComponentOutletContent?: any[][];\n\n  @Input() ngComponentOutletNgModule?: Type<any>;\n  /**\n   * @deprecated This input is deprecated, use `ngComponentOutletNgModule` instead.\n   */\n  @Input() ngComponentOutletNgModuleFactory?: NgModuleFactory<any>;\n\n  private _componentRef: ComponentRef<any>|undefined;\n  private _moduleRef: NgModuleRef<any>|undefined;\n\n  /**\n   * A helper data structure that allows us to track inputs that were part of the\n   * ngComponentOutletInputs expression. Tracking inputs is necessary for proper removal of ones\n   * that are no longer referenced.\n   */\n  private _inputsUsed = new Map<string, boolean>();\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  private _needToReCreateNgModuleInstance(changes: SimpleChanges): boolean {\n    // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n    // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n    // were changed).\n    return changes['ngComponentOutletNgModule'] !== undefined ||\n        changes['ngComponentOutletNgModuleFactory'] !== undefined;\n  }\n\n  private _needToReCreateComponentInstance(changes: SimpleChanges): boolean {\n    // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n    // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n    // were changed).\n    return changes['ngComponentOutlet'] !== undefined ||\n        changes['ngComponentOutletContent'] !== undefined ||\n        changes['ngComponentOutletInjector'] !== undefined ||\n        this._needToReCreateNgModuleInstance(changes);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._needToReCreateComponentInstance(changes)) {\n      this._viewContainerRef.clear();\n      this._inputsUsed.clear();\n      this._componentRef = undefined;\n\n      if (this.ngComponentOutlet) {\n        const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n        if (this._needToReCreateNgModuleInstance(changes)) {\n          this._moduleRef?.destroy();\n\n          if (this.ngComponentOutletNgModule) {\n            this._moduleRef =\n                createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));\n          } else if (this.ngComponentOutletNgModuleFactory) {\n            this._moduleRef =\n                this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));\n          } else {\n            this._moduleRef = undefined;\n          }\n        }\n\n        this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {\n          injector,\n          ngModuleRef: this._moduleRef,\n          projectableNodes: this.ngComponentOutletContent,\n        });\n      }\n    }\n  }\n\n  /** @nodoc */\n  ngDoCheck() {\n    if (this._componentRef) {\n      if (this.ngComponentOutletInputs) {\n        for (const inputName of Object.keys(this.ngComponentOutletInputs)) {\n          this._inputsUsed.set(inputName, true);\n        }\n      }\n\n      this._applyInputStateDiff(this._componentRef);\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    this._moduleRef?.destroy();\n  }\n\n  private _applyInputStateDiff(componentRef: ComponentRef<unknown>) {\n    for (const [inputName, touched] of this._inputsUsed) {\n      if (!touched) {\n        // The input that was previously active no longer exists and needs to be set to undefined.\n        componentRef.setInput(inputName, undefined);\n        this._inputsUsed.delete(inputName);\n      } else {\n        // Since touched is true, it can be asserted that the inputs object is not empty.\n        componentRef.setInput(inputName, this.ngComponentOutletInputs![inputName]);\n        this._inputsUsed.set(inputName, false);\n      }\n    }\n  }\n}\n\n// Helper function that returns an Injector instance of a parent NgModule.\nfunction getParentInjector(injector: Injector): Injector {\n  const parentNgModule = injector.get(NgModuleRef);\n  return parentNgModule.injector;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, TemplateRef, TrackByFunction, ViewContainerRef, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\n\n/**\n * @publicApi\n */\nexport class NgForOfContext<T, U extends NgIterable<T> = NgIterable<T>> {\n  constructor(public $implicit: T, public ngForOf: U, public index: number, public count: number) {}\n\n  get first(): boolean {\n    return this.index === 0;\n  }\n\n  get last(): boolean {\n    return this.index === this.count - 1;\n  }\n\n  get even(): boolean {\n    return this.index % 2 === 0;\n  }\n\n  get odd(): boolean {\n    return !this.even;\n  }\n}\n\n/**\n * A [structural directive](guide/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/structural-directives#asterisk) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/structural-directives#one-per-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For further discussion, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * @usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```\n * <li *ngFor=\"let user of users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `count: number`: The length of the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/structural-directives)\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngFor][ngForOf]',\n  standalone: true,\n})\nexport class NgForOf<T, U extends NgIterable<T> = NgIterable<T>> implements DoCheck {\n  /**\n   * The value of the iterable expression, which can be used as a\n   * [template input variable](guide/structural-directives#shorthand).\n   */\n  @Input()\n  set ngForOf(ngForOf: U&NgIterable<T>|undefined|null) {\n    this._ngForOf = ngForOf;\n    this._ngForOfDirty = true;\n  }\n  /**\n   * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.\n   *\n   * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object\n   * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n   * as the key.\n   *\n   * `NgForOf` uses the computed key to associate items in an iterable with DOM elements\n   * it produces for these items.\n   *\n   * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an\n   * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a\n   * primary key), and this iterable could be updated with new object instances that still\n   * represent the same underlying entity (for example, when data is re-fetched from the server,\n   * and the iterable is recreated and re-rendered, but most of the data is still the same).\n   *\n   * @see {@link TrackByFunction}\n   */\n  @Input()\n  set ngForTrackBy(fn: TrackByFunction<T>) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(\n          `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n          `See https://angular.io/api/common/NgForOf#change-propagation for more information.`);\n    }\n    this._trackByFn = fn;\n  }\n\n  get ngForTrackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n\n  private _ngForOf: U|undefined|null = null;\n  private _ngForOfDirty: boolean = true;\n  private _differ: IterableDiffer<T>|null = null;\n  // TODO(issue/24571): remove '!'\n  // waiting for microsoft/typescript#43662 to allow the return type `TrackByFunction|undefined` for\n  // the getter\n  private _trackByFn!: TrackByFunction<T>;\n\n  constructor(\n      private _viewContainer: ViewContainerRef,\n      private _template: TemplateRef<NgForOfContext<T, U>>, private _differs: IterableDiffers) {}\n\n  /**\n   * A reference to the template that is stamped out for each item in the iterable.\n   * @see [template reference variable](guide/template-reference-variables)\n   */\n  @Input()\n  set ngForTemplate(value: TemplateRef<NgForOfContext<T, U>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n\n  /**\n   * Applies the changes when needed.\n   * @nodoc\n   */\n  ngDoCheck(): void {\n    if (this._ngForOfDirty) {\n      this._ngForOfDirty = false;\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = this._ngForOf;\n      if (!this._differ && value) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          try {\n            // CAUTION: this logic is duplicated for production mode below, as the try-catch\n            // is only present in development builds.\n            this._differ = this._differs.find(value).create(this.ngForTrackBy);\n          } catch {\n            let errorMessage = `Cannot find a differ supporting object '${value}' of type '` +\n                `${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;\n            if (typeof value === 'object') {\n              errorMessage += ' Did you mean to use the keyvalue pipe?';\n            }\n            throw new RuntimeError(RuntimeErrorCode.NG_FOR_MISSING_DIFFER, errorMessage);\n          }\n        } else {\n          // CAUTION: this logic is duplicated for development mode above, as the try-catch\n          // is only present in development builds.\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        }\n      }\n    }\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: IterableChanges<T>) {\n    const viewContainer = this._viewContainer;\n    changes.forEachOperation(\n        (item: IterableChangeRecord<T>, adjustedPreviousIndex: number|null,\n         currentIndex: number|null) => {\n          if (item.previousIndex == null) {\n            // NgForOf is never \"null\" or \"undefined\" here because the differ detected\n            // that a new item needs to be inserted from the iterable. This implies that\n            // there is an iterable value for \"_ngForOf\".\n            viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T, U>(item.item, this._ngForOf!, -1, -1),\n                currentIndex === null ? undefined : currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(\n                adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);\n          } else if (adjustedPreviousIndex !== null) {\n            const view = viewContainer.get(adjustedPreviousIndex)!;\n            viewContainer.move(view, currentIndex);\n            applyViewChange(view as EmbeddedViewRef<NgForOfContext<T, U>>, item);\n          }\n        });\n\n    for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T, U>>>viewContainer.get(i);\n      const context = viewRef.context;\n      context.index = i;\n      context.count = ilen;\n      context.ngForOf = this._ngForOf!;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T, U>>>viewContainer.get(record.currentIndex);\n      applyViewChange(viewRef, record);\n    });\n  }\n\n  /**\n   * Asserts the correct type of the context for the template that `NgForOf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgForOf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T, U extends NgIterable<T>>(dir: NgForOf<T, U>, ctx: any):\n      ctx is NgForOfContext<T, U> {\n    return true;\n  }\n}\n\n// Also export the `NgForOf` class as `NgFor` to improve the DX for\n// cases when the directive is used as standalone, so the class name\n// matches the CSS selector (*ngFor).\nexport {NgForOf as NgFor};\n\nfunction applyViewChange<T>(\n    view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<T>) {\n  view.context.$implicit = record.item;\n}\n\nfunction getTypeName(type: any): string {\n  return type['name'] || typeof type;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef, ɵstringify as stringify} from '@angular/core';\n\n\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#asterisk) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * @usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * safe-navigation-operator (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"heroes\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngIf]',\n  standalone: true,\n})\nexport class NgIf<T = unknown> {\n  private _context: NgIfContext<T> = new NgIfContext<T>();\n  private _thenTemplateRef: TemplateRef<NgIfContext<T>>|null = null;\n  private _elseTemplateRef: TemplateRef<NgIfContext<T>>|null = null;\n  private _thenViewRef: EmbeddedViewRef<NgIfContext<T>>|null = null;\n  private _elseViewRef: EmbeddedViewRef<NgIfContext<T>>|null = null;\n\n  constructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext<T>>) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  /**\n   * The Boolean expression to evaluate as the condition for showing a template.\n   */\n  @Input()\n  set ngIf(condition: T) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to true.\n   */\n  @Input()\n  set ngIfThen(templateRef: TemplateRef<NgIfContext<T>>|null) {\n    assertTemplate('ngIfThen', templateRef);\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to false.\n   */\n  @Input()\n  set ngIfElse(templateRef: TemplateRef<NgIfContext<T>>|null) {\n    assertTemplate('ngIfElse', templateRef);\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  public static ngIfUseIfTypeGuard: void;\n\n  /**\n   * Assert the correct type of the expression bound to the `ngIf` input within the template.\n   *\n   * The presence of this static field is a signal to the Ivy template type check compiler that\n   * when the `NgIf` structural directive renders its template, the type of the expression bound\n   * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\n   * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.\n   */\n  static ngTemplateGuard_ngIf: 'binding';\n\n  /**\n   * Asserts the correct type of the context for the template that `NgIf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgIf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T>(dir: NgIf<T>, ctx: any):\n      ctx is NgIfContext<Exclude<T, false|0|''|null|undefined>> {\n    return true;\n  }\n}\n\n/**\n * @publicApi\n */\nexport class NgIfContext<T = unknown> {\n  public $implicit: T = null!;\n  public ngIf: T = null!;\n}\n\nfunction assertTemplate(property: string, templateRef: TemplateRef<any>|null): void {\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n  if (!isTemplateRefOrNull) {\n    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * A constant indicating a type of comparison that NgSwitch uses to match cases. Extracted to a\n * separate file to facilitate G3 patches.\n */\nexport const NG_SWITCH_USE_STRICT_EQUALS = true;\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, Optional, TemplateRef, ViewContainerRef, ɵformatRuntimeError as formatRuntimeError, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {NG_SWITCH_USE_STRICT_EQUALS} from './ng_switch_equality';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see {@link NgSwitchCase}\n * @see {@link NgSwitchDefault}\n * @see [Structural Directives](guide/structural-directives)\n *\n */\n@Directive({\n  selector: '[ngSwitch]',\n  standalone: true,\n})\nexport class NgSwitch {\n  private _defaultViews: SwitchView[] = [];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number {\n    return this._caseCount++;\n  }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched =\n        NG_SWITCH_USE_STRICT_EQUALS ? value === this._ngSwitch : value == this._ngSwitch;\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && matched !== (value == this._ngSwitch)) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.EQUALITY_NG_SWITCH_DIFFERENCE,\n          'As of Angular v17 the NgSwitch directive uses strict equality comparison === instead of == to match different cases. ' +\n              `Previously the case value \"${\n                  stringifyValue(value)}\" matched switch expression value \"${\n                  stringifyValue(\n                      this._ngSwitch)}\", but this is no longer the case with the stricter equality check. ` +\n              'Your comparison results return different results using === vs. == and you should adjust your ngSwitch expression and / or values to conform with the strict equality requirements.'));\n    }\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (const defaultView of this._defaultViews) {\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * @publicApi\n * @see {@link NgSwitch}\n * @see {@link NgSwitchDefault}\n *\n */\n@Directive({\n  selector: '[ngSwitchCase]',\n  standalone: true,\n})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n  /**\n   * Stores the HTML template to be selected on match.\n   */\n  @Input() ngSwitchCase: any;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() private ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');\n    }\n\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  /**\n   * Performs case matching. For internal use only.\n   * @nodoc\n   */\n  ngDoCheck() {\n    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see {@link NgSwitch}\n * @see {@link NgSwitchCase}\n *\n */\n@Directive({\n  selector: '[ngSwitchDefault]',\n  standalone: true,\n})\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');\n    }\n\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n\nfunction throwNgSwitchProviderNotFoundError(attrName: string, directiveName: string): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.PARENT_NG_SWITCH_NOT_FOUND,\n      `An element with the \"${attrName}\" attribute ` +\n          `(matching the \"${\n              directiveName}\" directive) must be located inside an element with the \"ngSwitch\" attribute ` +\n          `(matching \"NgSwitch\" directive)`);\n}\n\nfunction stringifyValue(value: unknown): string {\n  return typeof value === 'string' ? `'${value}'` : String(value);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {getPluralCategory, NgLocalization} from '../i18n/localization';\n\nimport {SwitchView} from './ng_switch';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngPlural]',\n  standalone: true,\n})\nexport class NgPlural {\n  private _activeView?: SwitchView;\n  private _caseViews: {[k: string]: SwitchView} = {};\n\n  constructor(private _localization: NgLocalization) {}\n\n  @Input()\n  set ngPlural(value: number) {\n    this._updateView(value);\n  }\n\n  addCase(value: string, switchView: SwitchView): void {\n    this._caseViews[value] = switchView;\n  }\n\n  private _updateView(switchValue: number): void {\n    this._clearViews();\n\n    const cases = Object.keys(this._caseViews);\n    const key = getPluralCategory(switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n\n  private _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n\n  private _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngPluralCase]',\n  standalone: true,\n})\nexport class NgPluralCase {\n  constructor(\n      @Attribute('ngPluralCase') public value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef, @Host() ngPlural: NgPlural) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, RendererStyleFlags2} from '@angular/core';\n\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * @description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngStyle]',\n  standalone: true,\n})\nexport class NgStyle implements DoCheck {\n  private _ngStyle: {[key: string]: string}|null|undefined = null;\n  private _differ: KeyValueDiffer<string, string|number>|null = null;\n\n  constructor(\n      private _ngEl: ElementRef, private _differs: KeyValueDiffers, private _renderer: Renderer2) {}\n\n  @Input('ngStyle')\n  set ngStyle(values: {[klass: string]: any}|null|undefined) {\n    this._ngStyle = values;\n    if (!this._differ && values) {\n      this._differ = this._differs.find(values).create();\n    }\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngStyle!);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    const flags = name.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase as number;\n\n    if (value != null) {\n      this._renderer.setStyle(\n          this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);\n    } else {\n      this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);\n    }\n  }\n\n  private _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Injector, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngTemplateOutlet]',\n  standalone: true,\n})\nexport class NgTemplateOutlet<C = unknown> implements OnChanges {\n  private _viewRef: EmbeddedViewRef<C>|null = null;\n\n  /**\n   * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n   * object, the object's keys will be available for binding by the local template `let`\n   * declarations.\n   * Using the key `$implicit` in the context object will set its value as default.\n   */\n  @Input() public ngTemplateOutletContext: C|null = null;\n\n  /**\n   * A string defining the template reference and optionally the context object for the template.\n   */\n  @Input() public ngTemplateOutlet: TemplateRef<C>|null = null;\n\n  /** Injector to be used within the embedded view. */\n  @Input() public ngTemplateOutletInjector: Injector|null = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._shouldRecreateView(changes)) {\n      const viewContainerRef = this._viewContainerRef;\n\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n\n      // If there is no outlet, clear the destroyed view ref.\n      if (!this.ngTemplateOutlet) {\n        this._viewRef = null;\n        return;\n      }\n\n      // Create a context forward `Proxy` that will always bind to the user-specified context,\n      // without having to destroy and re-create views whenever the context changes.\n      const viewContext = this._createContextForwardProxy();\n      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {\n        injector: this.ngTemplateOutletInjector ?? undefined,\n      });\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if either is true:\n   * - the outlet changed.\n   * - the injector changed.\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    return !!changes['ngTemplateOutlet'] || !!changes['ngTemplateOutletInjector'];\n  }\n\n  /**\n   * For a given outlet instance, we create a proxy object that delegates\n   * to the user-specified context. This allows changing, or swapping out\n   * the context object completely without having to destroy/re-create the view.\n   */\n  private _createContextForwardProxy(): C {\n    return <C>new Proxy({}, {\n      set: (_target, prop, newValue) => {\n        if (!this.ngTemplateOutletContext) {\n          return false;\n        }\n        return Reflect.set(this.ngTemplateOutletContext, prop, newValue);\n      },\n      get: (_target, prop, receiver) => {\n        if (!this.ngTemplateOutletContext) {\n          return undefined;\n        }\n        return Reflect.get(this.ngTemplateOutletContext, prop, receiver);\n      },\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgFor, NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgFor,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet,\n};\n\n\n\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, ɵRuntimeError as RuntimeError, ɵstringify as stringify} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return new RuntimeError(\n      RuntimeErrorCode.INVALID_PIPE_ARGUMENT,\n      ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, untracked, ɵisPromise, ɵisSubscribable} from '@angular/core';\nimport {Observable, Subscribable, Unsubscribable} from 'rxjs';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Subscribable<any>|Promise<any>, updateLatestValue: any): Unsubscribable\n      |Promise<any>;\n  dispose(subscription: Unsubscribable|Promise<any>): void;\n}\n\nclass SubscribableStrategy implements SubscriptionStrategy {\n  createSubscription(async: Subscribable<any>, updateLatestValue: any): Unsubscribable {\n    // Subscription can be side-effectful, and we don't want any signal reads which happen in the\n    // side effect of the subscription to be tracked by a component's template when that\n    // subscription is triggered via the async pipe. So we wrap the subscription in `untracked` to\n    // decouple from the current reactive context.\n    //\n    // `untracked` also prevents signal _writes_ which happen in the subscription side effect from\n    // being treated as signal writes during the template evaluation (which throws errors).\n    return untracked(() => async.subscribe({\n      next: updateLatestValue,\n      error: (e: any) => {\n        throw e;\n      }\n    }));\n  }\n\n  dispose(subscription: Unsubscribable): void {\n    // See the comment in `createSubscription` above on the use of `untracked`.\n    untracked(() => subscription.unsubscribe());\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => {\n      throw e;\n    });\n  }\n\n  dispose(subscription: Promise<any>): void {}\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _subscribableStrategy = new SubscribableStrategy();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks. When the reference of the expression changes, the `async` pipe\n * automatically unsubscribes from the old `Observable` or `Promise` and subscribes to the new one.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'async',\n  pure: false,\n  standalone: true,\n})\nexport class AsyncPipe implements OnDestroy, PipeTransform {\n  private _ref: ChangeDetectorRef|null;\n  private _latestValue: any = null;\n\n  private _subscription: Unsubscribable|Promise<any>|null = null;\n  private _obj: Subscribable<any>|Promise<any>|EventEmitter<any>|null = null;\n  private _strategy: SubscriptionStrategy|null = null;\n\n  constructor(ref: ChangeDetectorRef) {\n    // Assign `ref` into `this._ref` manually instead of declaring `_ref` in the constructor\n    // parameter list, as the type of `this._ref` includes `null` unlike the type of `ref`.\n    this._ref = ref;\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n    // Clear the `ChangeDetectorRef` and its association with the view data, to mitigate\n    // potential memory leaks in Observables that could otherwise cause the view data to\n    // be retained.\n    // https://github.com/angular/angular/issues/17624\n    this._ref = null;\n  }\n\n  // NOTE(@benlesh): Because Observable has deprecated a few call patterns for `subscribe`,\n  // TypeScript has a hard time matching Observable to Subscribable, for more information\n  // see https://github.com/microsoft/TypeScript/issues/43643\n\n  transform<T>(obj: Observable<T>|Subscribable<T>|Promise<T>): T|null;\n  transform<T>(obj: null|undefined): null;\n  transform<T>(obj: Observable<T>|Subscribable<T>|Promise<T>|null|undefined): T|null;\n  transform<T>(obj: Observable<T>|Subscribable<T>|Promise<T>|null|undefined): T|null {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj);\n    }\n\n    return this._latestValue;\n  }\n\n  private _subscribe(obj: Subscribable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n\n  private _selectStrategy(obj: Subscribable<any>|Promise<any>|\n                          EventEmitter<any>): SubscriptionStrategy {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisSubscribable(obj)) {\n      return _subscribableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n\n  private _dispose(): void {\n    // Note: `dispose` is only called if a subscription has been initialized before, indicating\n    // that `this._strategy` is also available.\n    this._strategy!.dispose(this._subscription!);\n    this._latestValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      // Note: `this._ref` is only cleared in `ngOnDestroy` so is known to be available when a\n      // value is being updated.\n      this._ref!.markForCheck();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * Transforms text to all lower case.\n *\n * @see {@link UpperCasePipe}\n * @see {@link TitleCasePipe}\n * @usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({\n  name: 'lowercase',\n  standalone: true,\n})\nexport class LowerCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to lower case.\n   */\n  transform(value: string): string;\n  transform(value: null|undefined): null;\n  transform(value: string|null|undefined): string|null;\n  transform(value: string|null|undefined): string|null {\n    if (value == null) return null;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\n}\n\n//\n// Regex below matches any Unicode word and number compatible with ES5. In ES2018 the same result\n// can be achieved by using /[0-9\\p{L}]\\S*/gu and also known as Unicode Property Escapes\n// (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+%2F%5B0-9%5Cp%7BL%7D%5D%5CS*%2Fgu%3B%0A%0A&unicodePropertyEscape=1\n//\n\nconst unicodeWordMatch =\n    /(?:[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])\\S*/g;\n\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see {@link LowerCasePipe}\n * @see {@link UpperCasePipe}\n *\n * @usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({\n  name: 'titlecase',\n  standalone: true,\n})\nexport class TitleCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to title case.\n   */\n  transform(value: string): string;\n  transform(value: null|undefined): null;\n  transform(value: string|null|undefined): string|null;\n  transform(value: string|null|undefined): string|null {\n    if (value == null) return null;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.replace(\n        unicodeWordMatch, (txt => txt[0].toUpperCase() + txt.slice(1).toLowerCase()));\n  }\n}\n\n/**\n * Transforms text to all upper case.\n * @see {@link LowerCasePipe}\n * @see {@link TitleCasePipe}\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({\n  name: 'uppercase',\n  standalone: true,\n})\nexport class UpperCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to upper case.\n   */\n  transform(value: string): string;\n  transform(value: null|undefined): null;\n  transform(value: string|null|undefined): string|null;\n  transform(value: string|null|undefined): string|null {\n    if (value == null) return null;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An interface that describes the date pipe configuration, which can be provided using the\n * `DATE_PIPE_DEFAULT_OPTIONS` token.\n *\n * @see {@link DATE_PIPE_DEFAULT_OPTIONS}\n *\n * @publicApi\n */\nexport interface DatePipeConfig {\n  dateFormat?: string;\n  timezone?: string;\n}\n\n/**\n * The default date format of Angular date pipe, which corresponds to the following format:\n * `'MMM d,y'` (e.g. `Jun 15, 2015`)\n */\nexport const DEFAULT_DATE_FORMAT = 'mediumDate';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, InjectionToken, LOCALE_ID, Optional, Pipe, PipeTransform} from '@angular/core';\n\nimport {formatDate} from '../i18n/format_date';\n\nimport {DatePipeConfig, DEFAULT_DATE_FORMAT} from './date_pipe_config';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * Optionally-provided default timezone to use for all instances of `DatePipe` (such as `'+0430'`).\n * If the value isn't provided, the `DatePipe` will use the end-user's local system timezone.\n *\n * @deprecated use DATE_PIPE_DEFAULT_OPTIONS token to configure DatePipe\n */\nexport const DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken<string>('DATE_PIPE_DEFAULT_TIMEZONE');\n\n/**\n * DI token that allows to provide default configuration for the `DatePipe` instances in an\n * application. The value is an object which can include the following fields:\n * - `dateFormat`: configures the default date format. If not provided, the `DatePipe`\n * will use the 'mediumDate' as a value.\n * - `timezone`: configures the default timezone. If not provided, the `DatePipe` will\n * use the end-user's local system timezone.\n *\n * @see {@link DatePipeConfig}\n *\n * @usageNotes\n *\n * Various date pipe default values can be overwritten by providing this token with\n * the value that has this interface.\n *\n * For example:\n *\n * Override the default date format by providing a value using the token:\n * ```typescript\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {dateFormat: 'shortDate'}}\n * ]\n * ```\n *\n * Override the default timezone by providing a value using the token:\n * ```typescript\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {timezone: '-1200'}}\n * ]\n * ```\n */\nexport const DATE_PIPE_DEFAULT_OPTIONS =\n    new InjectionToken<DatePipeConfig>('DATE_PIPE_DEFAULT_OPTIONS');\n\n// clang-format off\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * `DatePipe` is executed only when it detects a pure change to the input value.\n * A pure change is either a change to a primitive input value\n * (such as `String`, `Number`, `Boolean`, or `Symbol`),\n * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).\n *\n * Note that mutating a `Date` object does not cause the pipe to be rendered again.\n * To ensure that the pipe is executed, you must create a new `Date` object.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n-common-format-data-locale) for more information.\n *\n * The time zone of the formatted value can be specified either by passing it in as the second\n * parameter of the pipe, or by setting the default through the `DATE_PIPE_DEFAULT_OPTIONS`\n * injection token. The value that is passed in as the second parameter takes precedence over\n * the one defined using the injection token.\n *\n * @see {@link formatDate}\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |\n * |---------------|-------------------------------------|-------------------------------------------------|\n * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |\n * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |\n * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |\n * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |\n * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |\n * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |\n * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |\n * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |\n * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |\n * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |\n * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |\n * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type          | Format      | Description                                                   | Example Value                                              |\n *  |-------------------- |-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                 | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                     | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                     | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year                | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                     | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                     | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                     | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                     | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                     | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                     | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month               | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                     | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                     | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                     | MMMM        | Wide                                                          | September                                                  |\n *  |                     | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone    | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                     | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                     | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                     | LLLL        | Wide                                                          | September                                                  |\n *  |                     | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                     | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month       | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month        | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                     | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |\n *  | Week day            | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                     | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                     | EEEEE       | Narrow                                                        | T                                                          |\n *  |                     | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Week day standalone | c, cc       | Numeric: 1 digit                                              | 2                                                          |\n *  |                     | ccc         | Abbreviated                                                   | Tue                                                        |\n *  |                     | cccc        | Wide                                                          | Tuesday                                                    |\n *  |                     | ccccc       | Narrow                                                        | T                                                          |\n *  |                     | cccccc      | Short                                                         | Tu                                                         |\n *  | Period              | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                     | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                     | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*             | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                     | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                     | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone*  | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                     | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                     | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12           | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                     | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23           | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                     | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute              | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                     | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second              | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                     | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds  | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                     | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                     | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone                | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                     | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                     | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                     | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                     | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                     | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                     | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * {{ dateObj | date:\"MMM dd, yyyy 'at' hh:mm a\" }}  // output is 'Jun 15, 2015 at 09:43 PM'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * @publicApi\n */\n// clang-format on\n@Pipe({\n  name: 'date',\n  pure: true,\n  standalone: true,\n})\nexport class DatePipe implements PipeTransform {\n  constructor(\n      @Inject(LOCALE_ID) private locale: string,\n      @Inject(DATE_PIPE_DEFAULT_TIMEZONE) @Optional() private defaultTimezone?: string|null,\n      @Inject(DATE_PIPE_DEFAULT_OPTIONS) @Optional() private defaultOptions?: DatePipeConfig|null,\n  ) {}\n\n  /**\n   * @param value The date expression: a `Date` object,  a number\n   * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n   * @param format The date/time components to include, using predefined options or a\n   * custom format string.  When not provided, the `DatePipe` looks for the value using the\n   * `DATE_PIPE_DEFAULT_OPTIONS` injection token (and reads the `dateFormat` property).\n   * If the token is not configured, the `mediumDate` is used as a value.\n   * @param timezone A timezone offset (such as `'+0430'`), or a standard UTC/GMT, or continental US\n   * timezone abbreviation. When not provided, the `DatePipe` looks for the value using the\n   * `DATE_PIPE_DEFAULT_OPTIONS` injection token (and reads the `timezone` property). If the token\n   * is not configured, the end-user's local system timezone is used as a value.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n-common-locale-id).\n   *\n   * @see {@link DATE_PIPE_DEFAULT_OPTIONS}\n   *\n   * @returns A date string in the desired format.\n   */\n  transform(value: Date|string|number, format?: string, timezone?: string, locale?: string): string\n      |null;\n  transform(value: null|undefined, format?: string, timezone?: string, locale?: string): null;\n  transform(\n      value: Date|string|number|null|undefined, format?: string, timezone?: string,\n      locale?: string): string|null;\n  transform(\n      value: Date|string|number|null|undefined, format?: string, timezone?: string,\n      locale?: string): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    try {\n      const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;\n      const _timezone =\n          timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? undefined;\n      return formatDate(value, _format, locale || this.locale, _timezone);\n    } catch (error) {\n      throw invalidPipeArgumentError(DatePipe, (error as Error).message);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {getPluralCategory, NgLocalization} from '../i18n/localization';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst _INTERPOLATION_REGEXP: RegExp = /#/g;\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'i18nPlural',\n  pure: true,\n  standalone: true,\n})\nexport class I18nPluralPipe implements PipeTransform {\n  constructor(private _localization: NgLocalization) {}\n\n  /**\n   * @param value the number to be formatted\n   * @param pluralMap an object that mimics the ICU format, see\n   * https://unicode-org.github.io/icu/userguide/format_parse/messages/.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n   * default).\n   */\n  transform(value: number|null|undefined, pluralMap: {[count: string]: string}, locale?: string):\n      string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'i18nSelect',\n  pure: true,\n  standalone: true,\n})\nexport class I18nSelectPipe implements PipeTransform {\n  /**\n   * @param value a string to be internationalized.\n   * @param mapping an object that indicates the text that should be displayed\n   * for different values of the provided `value`.\n   */\n  transform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * @usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'json',\n  pure: false,\n  standalone: true,\n})\nexport class JsonPipe implements PipeTransform {\n  /**\n   * @param value A value of any type to convert into a JSON-format string.\n   */\n  transform(value: any): string {\n    return JSON.stringify(value, null, 2);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n  standalone: true,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DEFAULT_CURRENCY_CODE, Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\n\nimport {formatCurrency, formatNumber, formatPercent} from '../i18n/format_number';\nimport {getCurrencySymbol} from '../i18n/locale_data_api';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a value according to digit options and locale rules.\n * Locale determines group sizing and separator,\n * decimal point character, and other locale-specific configurations.\n *\n * @see {@link formatNumber}\n *\n * @usageNotes\n *\n * ### digitsInfo\n *\n * The value's decimal representation is specified by the `digitsInfo`\n * parameter, written in the following format:<br>\n *\n * ```\n * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n * ```\n *\n *  - `minIntegerDigits`:\n * The minimum number of integer digits before the decimal point.\n * Default is 1.\n *\n * - `minFractionDigits`:\n * The minimum number of digits after the decimal point.\n * Default is 0.\n *\n *  - `maxFractionDigits`:\n * The maximum number of digits after the decimal point.\n * Default is 3.\n *\n * If the formatted value is truncated it will be rounded using the \"to-nearest\" method:\n *\n * ```\n * {{3.6 | number: '1.0-0'}}\n * <!--will output '4'-->\n *\n * {{-3.6 | number:'1.0-0'}}\n * <!--will output '-4'-->\n * ```\n *\n * ### locale\n *\n * `locale` will format a value according to locale rules.\n * Locale determines group sizing and separator,\n * decimal point character, and other locale-specific configurations.\n *\n * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n *\n * See [Setting your app locale](guide/i18n-common-locale-id).\n *\n * ### Example\n *\n * The following code shows how the pipe transforms values\n * according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n * @publicApi\n */\n@Pipe({\n  name: 'number',\n  standalone: true,\n})\nexport class DecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: number|string, digitsInfo?: string, locale?: string): string|null;\n  transform(value: null|undefined, digitsInfo?: string, locale?: string): null;\n  transform(value: number|string|null|undefined, digitsInfo?: string, locale?: string): string|null;\n  /**\n   * @param value The value to be formatted.\n   * @param digitsInfo Sets digit and decimal representation.\n   * [See more](#digitsinfo).\n   * @param locale Specifies what locale format rules to use.\n   * [See more](#locale).\n   */\n  transform(value: number|string|null|undefined, digitsInfo?: string, locale?: string): string\n      |null {\n    if (!isValue(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatNumber(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(DecimalPipe, (error as Error).message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see {@link formatPercent}\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n * @publicApi\n */\n@Pipe({\n  name: 'percent',\n  standalone: true,\n})\nexport class PercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: number|string, digitsInfo?: string, locale?: string): string|null;\n  transform(value: null|undefined, digitsInfo?: string, locale?: string): null;\n  transform(value: number|string|null|undefined, digitsInfo?: string, locale?: string): string|null;\n  /**\n   *\n   * @param value The number to be formatted as a percentage.\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `0`.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n-common-locale-id).\n   */\n  transform(value: number|string|null|undefined, digitsInfo?: string, locale?: string): string\n      |null {\n    if (!isValue(value)) return null;\n    locale = locale || this._locale;\n    try {\n      const num = strToNumber(value);\n      return formatPercent(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(PercentPipe, (error as Error).message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n *\n * @see {@link getCurrencySymbol}\n * @see {@link formatCurrency}\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n * @publicApi\n */\n@Pipe({\n  name: 'currency',\n  standalone: true,\n})\nexport class CurrencyPipe implements PipeTransform {\n  constructor(\n      @Inject(LOCALE_ID) private _locale: string,\n      @Inject(DEFAULT_CURRENCY_CODE) private _defaultCurrencyCode: string = 'USD') {}\n\n  transform(\n      value: number|string, currencyCode?: string,\n      display?: 'code'|'symbol'|'symbol-narrow'|string|boolean, digitsInfo?: string,\n      locale?: string): string|null;\n  transform(\n      value: null|undefined, currencyCode?: string,\n      display?: 'code'|'symbol'|'symbol-narrow'|string|boolean, digitsInfo?: string,\n      locale?: string): null;\n  transform(\n      value: number|string|null|undefined, currencyCode?: string,\n      display?: 'code'|'symbol'|'symbol-narrow'|string|boolean, digitsInfo?: string,\n      locale?: string): string|null;\n  /**\n   *\n   * @param value The number to be formatted as currency.\n   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n   * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be\n   * configured using the `DEFAULT_CURRENCY_CODE` injection token.\n   * @param display The format for the currency indicator. One of the following:\n   *   - `code`: Show the code (such as `USD`).\n   *   - `symbol`(default): Show the symbol (such as `$`).\n   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n   * currency.\n   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n   * locale has no narrow symbol, uses the standard symbol for the locale.\n   *   - String: Use the given string value instead of a code or a symbol.\n   * For example, an empty string will suppress the currency & symbol.\n   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n   *\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `2`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `2`.\n   * If not provided, the number will be formatted with the proper amount of digits,\n   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n-common-locale-id).\n   */\n  transform(\n      value: number|string|null|undefined, currencyCode: string = this._defaultCurrencyCode,\n      display: 'code'|'symbol'|'symbol-narrow'|string|boolean = 'symbol', digitsInfo?: string,\n      locale?: string): string|null {\n    if (!isValue(value)) return null;\n\n    locale = locale || this._locale;\n\n    if (typeof display === 'boolean') {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && <any>console && <any>console.warn) {\n        console.warn(\n            `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let currency: string = currencyCode || this._defaultCurrencyCode;\n    if (display !== 'code') {\n      if (display === 'symbol' || display === 'symbol-narrow') {\n        currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n      } else {\n        currency = display;\n      }\n    }\n\n    try {\n      const num = strToNumber(value);\n      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, (error as Error).message);\n    }\n  }\n}\n\nfunction isValue(value: number|string|null|undefined): value is number|string {\n  return !(value == null || value === '' || value !== value);\n}\n\n/**\n * Transforms a string into a number (if needed).\n */\nfunction strToNumber(value: number|string): number {\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n  if (typeof value !== 'number') {\n    throw new Error(`${value} is not a number`);\n  }\n  return value;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * @usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'slice',\n  pure: false,\n  standalone: true,\n})\nexport class SlicePipe implements PipeTransform {\n  /**\n   * @param value a list or a string to be sliced.\n   * @param start the starting index of the subset to return:\n   *   - **a positive integer**: return the item at `start` index and all items after\n   *     in the list or string expression.\n   *   - **a negative integer**: return the item at `start` index from the end and all items after\n   *     in the list or string expression.\n   *   - **if positive and greater than the size of the expression**: return an empty list or\n   * string.\n   *   - **if negative and greater than the size of the expression**: return entire list or string.\n   * @param end the ending index of the subset to return:\n   *   - **omitted**: return all items until the end.\n   *   - **if positive**: return all items before `end` index of the list or string.\n   *   - **if negative**: return all items before `end` index from the end of the list or string.\n   */\n  transform<T>(value: ReadonlyArray<T>, start: number, end?: number): Array<T>;\n  transform(value: null|undefined, start: number, end?: number): null;\n  transform<T>(value: ReadonlyArray<T>|null|undefined, start: number, end?: number): Array<T>|null;\n  transform(value: string, start: number, end?: number): string;\n  transform(value: string|null|undefined, start: number, end?: number): string|null;\n  transform<T>(value: ReadonlyArray<T>|string|null|undefined, start: number, end?: number):\n      Array<T>|string|null {\n    if (value == null) return null;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n\n  private supports(obj: any): boolean {\n    return typeof obj === 'string' || Array.isArray(obj);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DATE_PIPE_DEFAULT_OPTIONS, DATE_PIPE_DEFAULT_TIMEZONE, DatePipe} from './date_pipe';\nimport {DatePipeConfig} from './date_pipe_config';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {KeyValue, KeyValuePipe} from './keyvalue_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DATE_PIPE_DEFAULT_OPTIONS,\n  DATE_PIPE_DEFAULT_TIMEZONE,\n  DatePipe,\n  DatePipeConfig,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  KeyValue,\n  KeyValuePipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe,\n};\n\n\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  KeyValuePipe,\n];\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {COMMON_PIPES} from './pipes/index';\n\n\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\n@NgModule({\n  imports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n})\nexport class CommonModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\nexport const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n * @deprecated This function serves no purpose since the removal of the Webworker platform. It will\n *     always return `false`.\n */\nexport function isPlatformWorkerApp(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_APP_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n * @deprecated This function serves no purpose since the removal of the Webworker platform. It will\n *     always return `false`.\n */\nexport function isPlatformWorkerUi(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_UI_ID;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('17.0.3');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable, ɵɵinject} from '@angular/core';\n\nimport {DOCUMENT} from './dom_tokens';\n\n\n\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * @publicApi\n */\nexport abstract class ViewportScroller {\n  // De-sugared tree-shakable injection\n  // See #23917\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n    token: ViewportScroller,\n    providedIn: 'root',\n    factory: () => new BrowserViewportScroller(ɵɵinject(DOCUMENT), window)\n  });\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  abstract setOffset(offset: [number, number]|(() => [number, number])): void;\n\n  /**\n   * Retrieves the current scroll position.\n   * @returns A position in screen coordinates (a tuple with x and y values).\n   */\n  abstract getScrollPosition(): [number, number];\n\n  /**\n   * Scrolls to a specified position.\n   * @param position A position in screen coordinates (a tuple with x and y values).\n   */\n  abstract scrollToPosition(position: [number, number]): void;\n\n  /**\n   * Scrolls to an anchor element.\n   * @param anchor The ID of the anchor element.\n   */\n  abstract scrollToAnchor(anchor: string): void;\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   * See also [window.history.scrollRestoration\n   * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration).\n   */\n  abstract setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;\n}\n\n/**\n * Manages the scroll position for a browser window.\n */\nexport class BrowserViewportScroller implements ViewportScroller {\n  private offset: () => [number, number] = () => [0, 0];\n\n  constructor(private document: Document, private window: Window) {}\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {\n    if (Array.isArray(offset)) {\n      this.offset = () => offset;\n    } else {\n      this.offset = offset;\n    }\n  }\n\n  /**\n   * Retrieves the current scroll position.\n   * @returns The position in screen coordinates.\n   */\n  getScrollPosition(): [number, number] {\n    if (this.supportsScrolling()) {\n      return [this.window.pageXOffset, this.window.pageYOffset];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  /**\n   * Sets the scroll position.\n   * @param position The new position in screen coordinates.\n   */\n  scrollToPosition(position: [number, number]): void {\n    if (this.supportsScrolling()) {\n      this.window.scrollTo(position[0], position[1]);\n    }\n  }\n\n  /**\n   * Scrolls to an element and attempts to focus the element.\n   *\n   * Note that the function name here is misleading in that the target string may be an ID for a\n   * non-anchor element.\n   *\n   * @param target The ID of an element or name of the anchor.\n   *\n   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document\n   * @see https://html.spec.whatwg.org/#scroll-to-fragid\n   */\n  scrollToAnchor(target: string): void {\n    if (!this.supportsScrolling()) {\n      return;\n    }\n\n    const elSelected = findAnchorFromDocument(this.document, target);\n\n    if (elSelected) {\n      this.scrollToElement(elSelected);\n      // After scrolling to the element, the spec dictates that we follow the focus steps for the\n      // target. Rather than following the robust steps, simply attempt focus.\n      //\n      // @see https://html.spec.whatwg.org/#get-the-focusable-area\n      // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus\n      // @see https://html.spec.whatwg.org/#focusable-area\n      elSelected.focus();\n    }\n  }\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {\n    if (this.supportsScrolling()) {\n      this.window.history.scrollRestoration = scrollRestoration;\n    }\n  }\n\n  /**\n   * Scrolls to an element using the native offset and the specified offset set on this scroller.\n   *\n   * The offset can be used when we know that there is a floating header and scrolling naively to an\n   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.\n   */\n  private scrollToElement(el: HTMLElement): void {\n    const rect = el.getBoundingClientRect();\n    const left = rect.left + this.window.pageXOffset;\n    const top = rect.top + this.window.pageYOffset;\n    const offset = this.offset();\n    this.window.scrollTo(left - offset[0], top - offset[1]);\n  }\n\n  private supportsScrolling(): boolean {\n    try {\n      return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;\n    } catch {\n      return false;\n    }\n  }\n}\n\nfunction findAnchorFromDocument(document: Document, target: string): HTMLElement|null {\n  const documentResult = document.getElementById(target) || document.getElementsByName(target)[0];\n\n  if (documentResult) {\n    return documentResult;\n  }\n\n  // `getElementById` and `getElementsByName` won't pierce through the shadow DOM so we\n  // have to traverse the DOM manually and do the lookup through the shadow roots.\n  if (typeof document.createTreeWalker === 'function' && document.body &&\n      typeof document.body.attachShadow === 'function') {\n    const treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT);\n    let currentNode = treeWalker.currentNode as HTMLElement | null;\n\n    while (currentNode) {\n      const shadowRoot = currentNode.shadowRoot;\n\n      if (shadowRoot) {\n        // Note that `ShadowRoot` doesn't support `getElementsByName`\n        // so we have to fall back to `querySelector`.\n        const result =\n            shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name=\"${target}\"]`);\n        if (result) {\n          return result;\n        }\n      }\n\n      currentNode = treeWalker.nextNode() as HTMLElement | null;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Provides an empty implementation of the viewport scroller.\n */\nexport class NullViewportScroller implements ViewportScroller {\n  /**\n   * Empty implementation\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {}\n\n  /**\n   * Empty implementation\n   */\n  getScrollPosition(): [number, number] {\n    return [0, 0];\n  }\n\n  /**\n   * Empty implementation\n   */\n  scrollToPosition(position: [number, number]): void {}\n\n  /**\n   * Empty implementation\n   */\n  scrollToAnchor(anchor: string): void {}\n\n  /**\n   * Empty implementation\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nexport abstract class XhrFactory {\n  abstract build(): XMLHttpRequest;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Converts a string that represents a URL into a URL class instance.\nexport function getUrl(src: string, win: Window): URL {\n  // Don't use a base URL is the URL is absolute.\n  return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win.location.href);\n}\n\n// Checks whether a URL is absolute (i.e. starts with `http://` or `https://`).\nexport function isAbsoluteUrl(src: string): boolean {\n  return /^https?:\\/\\//.test(src);\n}\n\n// Given a URL, extract the hostname part.\n// If a URL is a relative one - the URL is returned as is.\nexport function extractHostname(url: string): string {\n  return isAbsoluteUrl(url) ? (new URL(url)).hostname : url;\n}\n\nexport function isValidPath(path: unknown): boolean {\n  const isString = typeof path === 'string';\n\n  if (!isString || path.trim() === '') {\n    return false;\n  }\n\n  // Calling new URL() will throw if the path string is malformed\n  try {\n    const url = new URL(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function normalizePath(path: string): string {\n  return path.endsWith('/') ? path.slice(0, -1) : path;\n}\n\nexport function normalizeSrc(src: string): string {\n  return src.startsWith('/') ? src.slice(1) : src;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, Provider, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../../errors';\nimport {isAbsoluteUrl, isValidPath, normalizePath, normalizeSrc} from '../url';\n\n/**\n * Config options recognized by the image loader function.\n *\n * @see {@link ImageLoader}\n * @see {@link NgOptimizedImage}\n * @publicApi\n */\nexport interface ImageLoaderConfig {\n  /**\n   * Image file name to be added to the image request URL.\n   */\n  src: string;\n  /**\n   * Width of the requested image (to be used when generating srcset).\n   */\n  width?: number;\n  /**\n   * Additional user-provided parameters for use by the ImageLoader.\n   */\n  loaderParams?: {[key: string]: any;};\n}\n\n/**\n * Represents an image loader function. Image loader functions are used by the\n * NgOptimizedImage directive to produce full image URL based on the image name and its width.\n *\n * @publicApi\n */\nexport type ImageLoader = (config: ImageLoaderConfig) => string;\n\n/**\n * Noop image loader that does no transformation to the original src and just returns it as is.\n * This loader is used as a default one if more specific logic is not provided in an app config.\n *\n * @see {@link ImageLoader}\n * @see {@link NgOptimizedImage}\n */\nexport const noopImageLoader = (config: ImageLoaderConfig) => config.src;\n\n/**\n * Metadata about the image loader.\n */\nexport type ImageLoaderInfo = {\n  name: string,\n  testUrl: (url: string) => boolean\n};\n\n/**\n * Injection token that configures the image loader function.\n *\n * @see {@link ImageLoader}\n * @see {@link NgOptimizedImage}\n * @publicApi\n */\nexport const IMAGE_LOADER = new InjectionToken<ImageLoader>('ImageLoader', {\n  providedIn: 'root',\n  factory: () => noopImageLoader,\n});\n\n/**\n * Internal helper function that makes it easier to introduce custom image loaders for the\n * `NgOptimizedImage` directive. It is enough to specify a URL builder function to obtain full DI\n * configuration for a given loader: a DI token corresponding to the actual loader function, plus DI\n * tokens managing preconnect check functionality.\n * @param buildUrlFn a function returning a full URL based on loader's configuration\n * @param exampleUrls example of full URLs for a given loader (used in error messages)\n * @returns a set of DI providers corresponding to the configured image loader\n */\nexport function createImageLoader(\n    buildUrlFn: (path: string, config: ImageLoaderConfig) => string, exampleUrls?: string[]) {\n  return function provideImageLoader(path: string) {\n    if (!isValidPath(path)) {\n      throwInvalidPathError(path, exampleUrls || []);\n    }\n\n    // The trailing / is stripped (if provided) to make URL construction (concatenation) easier in\n    // the individual loader functions.\n    path = normalizePath(path);\n\n    const loaderFn = (config: ImageLoaderConfig) => {\n      if (isAbsoluteUrl(config.src)) {\n        // Image loader functions expect an image file name (e.g. `my-image.png`)\n        // or a relative path + a file name (e.g. `/a/b/c/my-image.png`) as an input,\n        // so the final absolute URL can be constructed.\n        // When an absolute URL is provided instead - the loader can not\n        // build a final URL, thus the error is thrown to indicate that.\n        throwUnexpectedAbsoluteUrlError(path, config.src);\n      }\n\n      return buildUrlFn(path, {...config, src: normalizeSrc(config.src)});\n    };\n\n    const providers: Provider[] = [{provide: IMAGE_LOADER, useValue: loaderFn}];\n    return providers;\n  };\n}\n\nfunction throwInvalidPathError(path: unknown, exampleUrls: string[]): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.INVALID_LOADER_ARGUMENTS,\n      ngDevMode &&\n          `Image loader has detected an invalid path (\\`${path}\\`). ` +\n              `To fix this, supply a path using one of the following formats: ${\n                  exampleUrls.join(' or ')}`);\n}\n\nfunction throwUnexpectedAbsoluteUrlError(path: string, url: string): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.INVALID_LOADER_ARGUMENTS,\n      ngDevMode &&\n          `Image loader has detected a \\`<img>\\` tag with an invalid \\`ngSrc\\` attribute: ${\n              url}. ` +\n              `This image loader expects \\`ngSrc\\` to be a relative URL - ` +\n              `however the provided value is an absolute URL. ` +\n              `To fix this, provide \\`ngSrc\\` as a path relative to the base URL ` +\n              `configured for this loader (\\`${path}\\`).`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createImageLoader, ImageLoaderConfig} from './image_loader';\n\n/**\n * Function that generates an ImageLoader for [Cloudflare Image\n * Resizing](https://developers.cloudflare.com/images/image-resizing/) and turns it into an Angular\n * provider. Note: Cloudflare has multiple image products - this provider is specifically for\n * Cloudflare Image Resizing; it will not work with Cloudflare Images or Cloudflare Polish.\n *\n * @param path Your domain name, e.g. https://mysite.com\n * @returns Provider that provides an ImageLoader function\n *\n * @publicApi\n */\nexport const provideCloudflareLoader = createImageLoader(\n    createCloudflareUrl,\n    ngDevMode ? ['https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>'] : undefined);\n\nfunction createCloudflareUrl(path: string, config: ImageLoaderConfig) {\n  let params = `format=auto`;\n  if (config.width) {\n    params += `,width=${config.width}`;\n  }\n  // Cloudflare image URLs format:\n  // https://developers.cloudflare.com/images/image-resizing/url-format/\n  return `${path}/cdn-cgi/image/${params}/${config.src}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createImageLoader, ImageLoaderConfig, ImageLoaderInfo} from './image_loader';\n\n/**\n * Name and URL tester for Cloudinary.\n */\nexport const cloudinaryLoaderInfo: ImageLoaderInfo = {\n  name: 'Cloudinary',\n  testUrl: isCloudinaryUrl\n};\n\nconst CLOUDINARY_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.cloudinary\\.com\\/.+/;\n/**\n * Tests whether a URL is from Cloudinary CDN.\n */\nfunction isCloudinaryUrl(url: string): boolean {\n  return CLOUDINARY_LOADER_REGEX.test(url);\n}\n\n/**\n * Function that generates an ImageLoader for Cloudinary and turns it into an Angular provider.\n *\n * @param path Base URL of your Cloudinary images\n * This URL should match one of the following formats:\n * https://res.cloudinary.com/mysite\n * https://mysite.cloudinary.com\n * https://subdomain.mysite.com\n * @returns Set of providers to configure the Cloudinary loader.\n *\n * @publicApi\n */\nexport const provideCloudinaryLoader = createImageLoader(\n    createCloudinaryUrl,\n    ngDevMode ?\n        [\n          'https://res.cloudinary.com/mysite', 'https://mysite.cloudinary.com',\n          'https://subdomain.mysite.com'\n        ] :\n        undefined);\n\nfunction createCloudinaryUrl(path: string, config: ImageLoaderConfig) {\n  // Cloudinary image URLformat:\n  // https://cloudinary.com/documentation/image_transformations#transformation_url_structure\n  // Example of a Cloudinary image URL:\n  // https://res.cloudinary.com/mysite/image/upload/c_scale,f_auto,q_auto,w_600/marketing/tile-topics-m.png\n  let params = `f_auto,q_auto`;  // sets image format and quality to \"auto\"\n  if (config.width) {\n    params += `,w_${config.width}`;\n  }\n  return `${path}/image/upload/${params}/${config.src}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createImageLoader, ImageLoaderConfig, ImageLoaderInfo} from './image_loader';\n\n/**\n * Name and URL tester for ImageKit.\n */\nexport const imageKitLoaderInfo: ImageLoaderInfo = {\n  name: 'ImageKit',\n  testUrl: isImageKitUrl,\n};\n\nconst IMAGE_KIT_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.imagekit\\.io\\/.+/;\n/**\n * Tests whether a URL is from ImageKit CDN.\n */\nfunction isImageKitUrl(url: string): boolean {\n  return IMAGE_KIT_LOADER_REGEX.test(url);\n}\n\n/**\n * Function that generates an ImageLoader for ImageKit and turns it into an Angular provider.\n *\n * @param path Base URL of your ImageKit images\n * This URL should match one of the following formats:\n * https://ik.imagekit.io/myaccount\n * https://subdomain.mysite.com\n * @returns Set of providers to configure the ImageKit loader.\n *\n * @publicApi\n */\nexport const provideImageKitLoader = createImageLoader(\n    createImagekitUrl,\n    ngDevMode ? ['https://ik.imagekit.io/mysite', 'https://subdomain.mysite.com'] : undefined);\n\nexport function createImagekitUrl(path: string, config: ImageLoaderConfig): string {\n  // Example of an ImageKit image URL:\n  // https://ik.imagekit.io/demo/tr:w-300,h-300/medium_cafe_B1iTdD0C.jpg\n  const {src, width} = config;\n  let urlSegments: string[];\n\n  if (width) {\n    const params = `tr:w-${width}`;\n    urlSegments = [path, params, src];\n  } else {\n    urlSegments = [path, src];\n  }\n\n  return urlSegments.join('/');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createImageLoader, ImageLoaderConfig, ImageLoaderInfo} from './image_loader';\n\n/**\n * Name and URL tester for Imgix.\n */\nexport const imgixLoaderInfo: ImageLoaderInfo = {\n  name: 'Imgix',\n  testUrl: isImgixUrl\n};\n\nconst IMGIX_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.imgix\\.net\\/.+/;\n/**\n * Tests whether a URL is from Imgix CDN.\n */\nfunction isImgixUrl(url: string): boolean {\n  return IMGIX_LOADER_REGEX.test(url);\n}\n\n/**\n * Function that generates an ImageLoader for Imgix and turns it into an Angular provider.\n *\n * @param path path to the desired Imgix origin,\n * e.g. https://somepath.imgix.net or https://images.mysite.com\n * @returns Set of providers to configure the Imgix loader.\n *\n * @publicApi\n */\nexport const provideImgixLoader =\n    createImageLoader(createImgixUrl, ngDevMode ? ['https://somepath.imgix.net/'] : undefined);\n\nfunction createImgixUrl(path: string, config: ImageLoaderConfig) {\n  const url = new URL(`${path}/${config.src}`);\n  // This setting ensures the smallest allowable format is set.\n  url.searchParams.set('auto', 'format');\n  if (config.width) {\n    url.searchParams.set('w', config.width.toString());\n  }\n  return url.href;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Assembles directive details string, useful for error messages.\nexport function imgDirectiveDetails(ngSrc: string, includeNgSrc = true) {\n  const ngSrcInfo =\n      includeNgSrc ? `(activated on an <img> element with the \\`ngSrc=\"${ngSrc}\"\\`) ` : '';\n  return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * Asserts that the application is in development mode. Throws an error if the application is in\n * production mode. This assert can be used to make sure that there is no dev-mode code invoked in\n * the prod mode accidentally.\n */\nexport function assertDevMode(checkName: string) {\n  if (!ngDevMode) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_DEV_MODE_CHECK_IN_PROD_MODE,\n        `Unexpected invocation of the ${checkName} in the prod mode. ` +\n            `Please make sure that the prod mode is enabled for production builds.`);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable, OnDestroy, ɵformatRuntimeError as formatRuntimeError} from '@angular/core';\n\nimport {DOCUMENT} from '../../dom_tokens';\nimport {RuntimeErrorCode} from '../../errors';\n\nimport {assertDevMode} from './asserts';\nimport {imgDirectiveDetails} from './error_helper';\nimport {getUrl} from './url';\n\ninterface ObservedImageState {\n  priority: boolean;\n  modified: boolean;\n  alreadyWarnedPriority: boolean;\n  alreadyWarnedModified: boolean;\n}\n\n/**\n * Observer that detects whether an image with `NgOptimizedImage`\n * is treated as a Largest Contentful Paint (LCP) element. If so,\n * asserts that the image has the `priority` attribute.\n *\n * Note: this is a dev-mode only class and it does not appear in prod bundles,\n * thus there is no `ngDevMode` use in the code.\n *\n * Based on https://web.dev/lcp/#measure-lcp-in-javascript.\n */\n@Injectable({providedIn: 'root'})\nexport class LCPImageObserver implements OnDestroy {\n  // Map of full image URLs -> original `ngSrc` values.\n  private images = new Map<string, ObservedImageState>();\n\n  private window: Window|null = null;\n  private observer: PerformanceObserver|null = null;\n\n  constructor() {\n    assertDevMode('LCP checker');\n    const win = inject(DOCUMENT).defaultView;\n    if (typeof win !== 'undefined' && typeof PerformanceObserver !== 'undefined') {\n      this.window = win;\n      this.observer = this.initPerformanceObserver();\n    }\n  }\n\n  /**\n   * Inits PerformanceObserver and subscribes to LCP events.\n   * Based on https://web.dev/lcp/#measure-lcp-in-javascript\n   */\n  private initPerformanceObserver(): PerformanceObserver {\n    const observer = new PerformanceObserver((entryList) => {\n      const entries = entryList.getEntries();\n      if (entries.length === 0) return;\n      // We use the latest entry produced by the `PerformanceObserver` as the best\n      // signal on which element is actually an LCP one. As an example, the first image to load on\n      // a page, by virtue of being the only thing on the page so far, is often a LCP candidate\n      // and gets reported by PerformanceObserver, but isn't necessarily the LCP element.\n      const lcpElement = entries[entries.length - 1];\n\n      // Cast to `any` due to missing `element` on the `LargestContentfulPaint` type of entry.\n      // See https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint\n      const imgSrc = (lcpElement as any).element?.src ?? '';\n\n      // Exclude `data:` and `blob:` URLs, since they are not supported by the directive.\n      if (imgSrc.startsWith('data:') || imgSrc.startsWith('blob:')) return;\n\n      const img = this.images.get(imgSrc);\n      if (!img) return;\n      if (!img.priority && !img.alreadyWarnedPriority) {\n        img.alreadyWarnedPriority = true;\n        logMissingPriorityError(imgSrc);\n      }\n      if (img.modified && !img.alreadyWarnedModified) {\n        img.alreadyWarnedModified = true;\n        logModifiedWarning(imgSrc);\n      }\n    });\n    observer.observe({type: 'largest-contentful-paint', buffered: true});\n    return observer;\n  }\n\n  registerImage(rewrittenSrc: string, originalNgSrc: string, isPriority: boolean) {\n    if (!this.observer) return;\n    const newObservedImageState: ObservedImageState = {\n      priority: isPriority,\n      modified: false,\n      alreadyWarnedModified: false,\n      alreadyWarnedPriority: false\n    };\n    this.images.set(getUrl(rewrittenSrc, this.window!).href, newObservedImageState);\n  }\n\n  unregisterImage(rewrittenSrc: string) {\n    if (!this.observer) return;\n    this.images.delete(getUrl(rewrittenSrc, this.window!).href);\n  }\n\n  updateImage(originalSrc: string, newSrc: string) {\n    const originalUrl = getUrl(originalSrc, this.window!).href;\n    const img = this.images.get(originalUrl);\n    if (img) {\n      img.modified = true;\n      this.images.set(getUrl(newSrc, this.window!).href, img);\n      this.images.delete(originalUrl);\n    }\n  }\n\n  ngOnDestroy() {\n    if (!this.observer) return;\n    this.observer.disconnect();\n    this.images.clear();\n  }\n}\n\nfunction logMissingPriorityError(ngSrc: string) {\n  const directiveDetails = imgDirectiveDetails(ngSrc);\n  console.error(formatRuntimeError(\n      RuntimeErrorCode.LCP_IMG_MISSING_PRIORITY,\n      `${directiveDetails} this image is the Largest Contentful Paint (LCP) ` +\n          `element but was not marked \"priority\". This image should be marked ` +\n          `\"priority\" in order to prioritize its loading. ` +\n          `To fix this, add the \"priority\" attribute.`));\n}\n\nfunction logModifiedWarning(ngSrc: string) {\n  const directiveDetails = imgDirectiveDetails(ngSrc);\n  console.warn(formatRuntimeError(\n      RuntimeErrorCode.LCP_IMG_NGSRC_MODIFIED,\n      `${directiveDetails} this image is the Largest Contentful Paint (LCP) ` +\n          `element and has had its \"ngSrc\" attribute modified. This can cause ` +\n          `slower loading performance. It is recommended not to modify the \"ngSrc\" ` +\n          `property on any image which could be the LCP element.`));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable, InjectionToken, ɵformatRuntimeError as formatRuntimeError, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {DOCUMENT} from '../../dom_tokens';\nimport {RuntimeErrorCode} from '../../errors';\n\nimport {assertDevMode} from './asserts';\nimport {imgDirectiveDetails} from './error_helper';\nimport {extractHostname, getUrl} from './url';\n\n// Set of origins that are always excluded from the preconnect checks.\nconst INTERNAL_PRECONNECT_CHECK_BLOCKLIST = new Set(['localhost', '127.0.0.1', '0.0.0.0']);\n\n/**\n * Injection token to configure which origins should be excluded\n * from the preconnect checks. It can either be a single string or an array of strings\n * to represent a group of origins, for example:\n *\n * ```typescript\n *  {provide: PRECONNECT_CHECK_BLOCKLIST, useValue: 'https://your-domain.com'}\n * ```\n *\n * or:\n *\n * ```typescript\n *  {provide: PRECONNECT_CHECK_BLOCKLIST,\n *   useValue: ['https://your-domain-1.com', 'https://your-domain-2.com']}\n * ```\n *\n * @publicApi\n */\nexport const PRECONNECT_CHECK_BLOCKLIST =\n    new InjectionToken<Array<string|string[]>>('PRECONNECT_CHECK_BLOCKLIST');\n\n/**\n * Contains the logic to detect whether an image, marked with the \"priority\" attribute\n * has a corresponding `<link rel=\"preconnect\">` tag in the `document.head`.\n *\n * Note: this is a dev-mode only class, which should not appear in prod bundles,\n * thus there is no `ngDevMode` use in the code.\n */\n@Injectable({providedIn: 'root'})\nexport class PreconnectLinkChecker {\n  private document = inject(DOCUMENT);\n\n  /**\n   * Set of <link rel=\"preconnect\"> tags found on this page.\n   * The `null` value indicates that there was no DOM query operation performed.\n   */\n  private preconnectLinks: Set<string>|null = null;\n\n  /*\n   * Keep track of all already seen origin URLs to avoid repeating the same check.\n   */\n  private alreadySeen = new Set<string>();\n\n  private window: Window|null = null;\n\n  private blocklist = new Set<string>(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);\n\n  constructor() {\n    assertDevMode('preconnect link checker');\n    const win = this.document.defaultView;\n    if (typeof win !== 'undefined') {\n      this.window = win;\n    }\n    const blocklist = inject(PRECONNECT_CHECK_BLOCKLIST, {optional: true});\n    if (blocklist) {\n      this.populateBlocklist(blocklist);\n    }\n  }\n\n  private populateBlocklist(origins: Array<string|string[]>|string) {\n    if (Array.isArray(origins)) {\n      deepForEach(origins, origin => {\n        this.blocklist.add(extractHostname(origin));\n      });\n    } else {\n      this.blocklist.add(extractHostname(origins));\n    }\n  }\n\n  /**\n   * Checks that a preconnect resource hint exists in the head for the\n   * given src.\n   *\n   * @param rewrittenSrc src formatted with loader\n   * @param originalNgSrc ngSrc value\n   */\n  assertPreconnect(rewrittenSrc: string, originalNgSrc: string): void {\n    if (!this.window) return;\n\n    const imgUrl = getUrl(rewrittenSrc, this.window);\n    if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin)) return;\n\n    // Register this origin as seen, so we don't check it again later.\n    this.alreadySeen.add(imgUrl.origin);\n\n    if (!this.preconnectLinks) {\n      // Note: we query for preconnect links only *once* and cache the results\n      // for the entire lifespan of an application, since it's unlikely that the\n      // list would change frequently. This allows to make sure there are no\n      // performance implications of making extra DOM lookups for each image.\n      this.preconnectLinks = this.queryPreconnectLinks();\n    }\n\n    if (!this.preconnectLinks.has(imgUrl.origin)) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.PRIORITY_IMG_MISSING_PRECONNECT_TAG,\n          `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this ` +\n              `image. Preconnecting to the origin(s) that serve priority images ensures that these ` +\n              `images are delivered as soon as possible. To fix this, please add the following ` +\n              `element into the <head> of the document:\\n` +\n              `  <link rel=\"preconnect\" href=\"${imgUrl.origin}\">`));\n    }\n  }\n\n  private queryPreconnectLinks(): Set<string> {\n    const preconnectUrls = new Set<string>();\n    const selector = 'link[rel=preconnect]';\n    const links: HTMLLinkElement[] = Array.from(this.document.querySelectorAll(selector));\n    for (let link of links) {\n      const url = getUrl(link.href, this.window!);\n      preconnectUrls.add(url.origin);\n    }\n    return preconnectUrls;\n  }\n\n  ngOnDestroy() {\n    this.preconnectLinks?.clear();\n    this.alreadySeen.clear();\n  }\n}\n\n/**\n * Invokes a callback for each element in the array. Also invokes a callback\n * recursively for each nested array.\n */\nfunction deepForEach<T>(input: (T|any[])[], fn: (value: T) => void): void {\n  for (let value of input) {\n    Array.isArray(value) ? deepForEach(value, fn) : fn(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * In SSR scenarios, a preload `<link>` element is generated for priority images.\n * Having a large number of preload tags may negatively affect the performance,\n * so we warn developers (by throwing an error) if the number of preloaded images\n * is above a certain threshold. This const specifies this threshold.\n */\nexport const DEFAULT_PRELOADED_IMAGES_LIMIT = 5;\n\n/**\n * Helps to keep track of priority images that already have a corresponding\n * preload tag (to avoid generating multiple preload tags with the same URL).\n *\n * This Set tracks the original src passed into the `ngSrc` input not the src after it has been\n * run through the specified `IMAGE_LOADER`.\n */\nexport const PRELOADED_IMAGES = new InjectionToken<Set<string>>(\n    'NG_OPTIMIZED_PRELOADED_IMAGES', {providedIn: 'root', factory: () => new Set<string>()});\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable, Renderer2, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {DOCUMENT} from '../../dom_tokens';\nimport {RuntimeErrorCode} from '../../errors';\n\nimport {DEFAULT_PRELOADED_IMAGES_LIMIT, PRELOADED_IMAGES} from './tokens';\n\n/**\n * @description Contains the logic needed to track and add preload link tags to the `<head>` tag. It\n * will also track what images have already had preload link tags added so as to not duplicate link\n * tags.\n *\n * In dev mode this service will validate that the number of preloaded images does not exceed the\n * configured default preloaded images limit: {@link DEFAULT_PRELOADED_IMAGES_LIMIT}.\n */\n@Injectable({providedIn: 'root'})\nexport class PreloadLinkCreator {\n  private readonly preloadedImages = inject(PRELOADED_IMAGES);\n  private readonly document = inject(DOCUMENT);\n\n  /**\n   * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the\n   * server while using Angular Universal and SSR to kick off image loads for high priority images.\n   *\n   * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)\n   * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`\n   * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from\n   * the CDN.\n   *\n   * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}\n   *\n   * @param renderer The `Renderer2` passed in from the directive\n   * @param src The original src of the image that is set on the `ngSrc` input.\n   * @param srcset The parsed and formatted srcset created from the `ngSrcset` input\n   * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag\n   */\n  createPreloadLinkTag(renderer: Renderer2, src: string, srcset?: string, sizes?: string): void {\n    if (ngDevMode) {\n      if (this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {\n        throw new RuntimeError(\n            RuntimeErrorCode.TOO_MANY_PRELOADED_IMAGES,\n            ngDevMode &&\n                `The \\`NgOptimizedImage\\` directive has detected that more than ` +\n                    `${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. ` +\n                    `This might negatively affect an overall performance of the page. ` +\n                    `To fix this, remove the \"priority\" attribute from images with less priority.`);\n      }\n    }\n\n    if (this.preloadedImages.has(src)) {\n      return;\n    }\n\n    this.preloadedImages.add(src);\n\n    const preload = renderer.createElement('link');\n    renderer.setAttribute(preload, 'as', 'image');\n    renderer.setAttribute(preload, 'href', src);\n    renderer.setAttribute(preload, 'rel', 'preload');\n    renderer.setAttribute(preload, 'fetchpriority', 'high');\n\n    if (sizes) {\n      renderer.setAttribute(preload, 'imageSizes', sizes);\n    }\n\n    if (srcset) {\n      renderer.setAttribute(preload, 'imageSrcset', srcset);\n    }\n\n    renderer.appendChild(this.document.head, preload);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {booleanAttribute, Directive, ElementRef, inject, Injector, Input, NgZone, numberAttribute, OnChanges, OnDestroy, OnInit, PLATFORM_ID, Renderer2, SimpleChanges, ɵformatRuntimeError as formatRuntimeError, ɵIMAGE_CONFIG as IMAGE_CONFIG, ɵIMAGE_CONFIG_DEFAULTS as IMAGE_CONFIG_DEFAULTS, ɵImageConfig as ImageConfig, ɵperformanceMarkFeature as performanceMarkFeature, ɵRuntimeError as RuntimeError, ɵSafeValue as SafeValue, ɵunwrapSafeValue as unwrapSafeValue} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\nimport {isPlatformServer} from '../../platform_id';\n\nimport {imgDirectiveDetails} from './error_helper';\nimport {cloudinaryLoaderInfo} from './image_loaders/cloudinary_loader';\nimport {IMAGE_LOADER, ImageLoader, ImageLoaderConfig, noopImageLoader} from './image_loaders/image_loader';\nimport {imageKitLoaderInfo} from './image_loaders/imagekit_loader';\nimport {imgixLoaderInfo} from './image_loaders/imgix_loader';\nimport {LCPImageObserver} from './lcp_image_observer';\nimport {PreconnectLinkChecker} from './preconnect_link_checker';\nimport {PreloadLinkCreator} from './preload-link-creator';\n\n/**\n * When a Base64-encoded image is passed as an input to the `NgOptimizedImage` directive,\n * an error is thrown. The image content (as a string) might be very long, thus making\n * it hard to read an error message if the entire string is included. This const defines\n * the number of characters that should be included into the error message. The rest\n * of the content is truncated.\n */\nconst BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;\n\n/**\n * RegExpr to determine whether a src in a srcset is using width descriptors.\n * Should match something like: \"100w, 200w\".\n */\nconst VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\\s*\\d+w\\s*(,|$)){1,})$/;\n\n/**\n * RegExpr to determine whether a src in a srcset is using density descriptors.\n * Should match something like: \"1x, 2x, 50x\". Also supports decimals like \"1.5x, 1.50x\".\n */\nconst VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\\s*\\d+(\\.\\d+)?x\\s*(,|$)){1,})$/;\n\n/**\n * Srcset values with a density descriptor higher than this value will actively\n * throw an error. Such densities are not permitted as they cause image sizes\n * to be unreasonably large and slow down LCP.\n */\nexport const ABSOLUTE_SRCSET_DENSITY_CAP = 3;\n\n/**\n * Used only in error message text to communicate best practices, as we will\n * only throw based on the slightly more conservative ABSOLUTE_SRCSET_DENSITY_CAP.\n */\nexport const RECOMMENDED_SRCSET_DENSITY_CAP = 2;\n\n/**\n * Used in generating automatic density-based srcsets\n */\nconst DENSITY_SRCSET_MULTIPLIERS = [1, 2];\n\n/**\n * Used to determine which breakpoints to use on full-width images\n */\nconst VIEWPORT_BREAKPOINT_CUTOFF = 640;\n/**\n * Used to determine whether two aspect ratios are similar in value.\n */\nconst ASPECT_RATIO_TOLERANCE = .1;\n\n/**\n * Used to determine whether the image has been requested at an overly\n * large size compared to the actual rendered image size (after taking\n * into account a typical device pixel ratio). In pixels.\n */\nconst OVERSIZED_IMAGE_TOLERANCE = 1000;\n\n/**\n * Used to limit automatic srcset generation of very large sources for\n * fixed-size images. In pixels.\n */\nconst FIXED_SRCSET_WIDTH_LIMIT = 1920;\nconst FIXED_SRCSET_HEIGHT_LIMIT = 1080;\n\n\n/** Info about built-in loaders we can test for. */\nexport const BUILT_IN_LOADERS = [imgixLoaderInfo, imageKitLoaderInfo, cloudinaryLoaderInfo];\n\n/**\n * Directive that improves image loading performance by enforcing best practices.\n *\n * `NgOptimizedImage` ensures that the loading of the Largest Contentful Paint (LCP) image is\n * prioritized by:\n * - Automatically setting the `fetchpriority` attribute on the `<img>` tag\n * - Lazy loading non-priority images by default\n * - Automatically generating a preconnect link tag in the document head\n *\n * In addition, the directive:\n * - Generates appropriate asset URLs if a corresponding `ImageLoader` function is provided\n * - Automatically generates a srcset\n * - Requires that `width` and `height` are set\n * - Warns if `width` or `height` have been set incorrectly\n * - Warns if the image will be visually distorted when rendered\n *\n * @usageNotes\n * The `NgOptimizedImage` directive is marked as [standalone](guide/standalone-components) and can\n * be imported directly.\n *\n * Follow the steps below to enable and use the directive:\n * 1. Import it into the necessary NgModule or a standalone Component.\n * 2. Optionally provide an `ImageLoader` if you use an image hosting service.\n * 3. Update the necessary `<img>` tags in templates and replace `src` attributes with `ngSrc`.\n * Using a `ngSrc` allows the directive to control when the `src` gets set, which triggers an image\n * download.\n *\n * Step 1: import the `NgOptimizedImage` directive.\n *\n * ```typescript\n * import { NgOptimizedImage } from '@angular/common';\n *\n * // Include it into the necessary NgModule\n * @NgModule({\n *   imports: [NgOptimizedImage],\n * })\n * class AppModule {}\n *\n * // ... or a standalone Component\n * @Component({\n *   standalone: true\n *   imports: [NgOptimizedImage],\n * })\n * class MyStandaloneComponent {}\n * ```\n *\n * Step 2: configure a loader.\n *\n * To use the **default loader**: no additional code changes are necessary. The URL returned by the\n * generic loader will always match the value of \"src\". In other words, this loader applies no\n * transformations to the resource URL and the value of the `ngSrc` attribute will be used as is.\n *\n * To use an existing loader for a **third-party image service**: add the provider factory for your\n * chosen service to the `providers` array. In the example below, the Imgix loader is used:\n *\n * ```typescript\n * import {provideImgixLoader} from '@angular/common';\n *\n * // Call the function and add the result to the `providers` array:\n * providers: [\n *   provideImgixLoader(\"https://my.base.url/\"),\n * ],\n * ```\n *\n * The `NgOptimizedImage` directive provides the following functions:\n * - `provideCloudflareLoader`\n * - `provideCloudinaryLoader`\n * - `provideImageKitLoader`\n * - `provideImgixLoader`\n *\n * If you use a different image provider, you can create a custom loader function as described\n * below.\n *\n * To use a **custom loader**: provide your loader function as a value for the `IMAGE_LOADER` DI\n * token.\n *\n * ```typescript\n * import {IMAGE_LOADER, ImageLoaderConfig} from '@angular/common';\n *\n * // Configure the loader using the `IMAGE_LOADER` token.\n * providers: [\n *   {\n *      provide: IMAGE_LOADER,\n *      useValue: (config: ImageLoaderConfig) => {\n *        return `https://example.com/${config.src}-${config.width}.jpg}`;\n *      }\n *   },\n * ],\n * ```\n *\n * Step 3: update `<img>` tags in templates to use `ngSrc` instead of `src`.\n *\n * ```\n * <img ngSrc=\"logo.png\" width=\"200\" height=\"100\">\n * ```\n *\n * @publicApi\n */\n@Directive({\n  standalone: true,\n  selector: 'img[ngSrc]',\n  host: {\n    '[style.position]': 'fill ? \"absolute\" : null',\n    '[style.width]': 'fill ? \"100%\" : null',\n    '[style.height]': 'fill ? \"100%\" : null',\n    '[style.inset]': 'fill ? \"0px\" : null'\n  }\n})\nexport class NgOptimizedImage implements OnInit, OnChanges, OnDestroy {\n  private imageLoader = inject(IMAGE_LOADER);\n  private config: ImageConfig = processConfig(inject(IMAGE_CONFIG));\n  private renderer = inject(Renderer2);\n  private imgElement: HTMLImageElement = inject(ElementRef).nativeElement;\n  private injector = inject(Injector);\n  private readonly isServer = isPlatformServer(inject(PLATFORM_ID));\n  private readonly preloadLinkCreator = inject(PreloadLinkCreator);\n\n  // a LCP image observer - should be injected only in the dev mode\n  private lcpObserver = ngDevMode ? this.injector.get(LCPImageObserver) : null;\n\n  /**\n   * Calculate the rewritten `src` once and store it.\n   * This is needed to avoid repetitive calculations and make sure the directive cleanup in the\n   * `ngOnDestroy` does not rely on the `IMAGE_LOADER` logic (which in turn can rely on some other\n   * instance that might be already destroyed).\n   */\n  private _renderedSrc: string|null = null;\n\n  /**\n   * Name of the source image.\n   * Image name will be processed by the image loader and the final URL will be applied as the `src`\n   * property of the image.\n   */\n  @Input({required: true, transform: unwrapSafeUrl}) ngSrc!: string;\n\n  /**\n   * A comma separated list of width or density descriptors.\n   * The image name will be taken from `ngSrc` and combined with the list of width or density\n   * descriptors to generate the final `srcset` property of the image.\n   *\n   * Example:\n   * ```\n   * <img ngSrc=\"hello.jpg\" ngSrcset=\"100w, 200w\" />  =>\n   * <img src=\"path/hello.jpg\" srcset=\"path/hello.jpg?w=100 100w, path/hello.jpg?w=200 200w\" />\n   * ```\n   */\n  @Input() ngSrcset!: string;\n\n  /**\n   * The base `sizes` attribute passed through to the `<img>` element.\n   * Providing sizes causes the image to create an automatic responsive srcset.\n   */\n  @Input() sizes?: string;\n\n  /**\n   * For responsive images: the intrinsic width of the image in pixels.\n   * For fixed size images: the desired rendered width of the image in pixels.\n   */\n  @Input({transform: numberAttribute}) width: number|undefined;\n\n  /**\n   * For responsive images: the intrinsic height of the image in pixels.\n   * For fixed size images: the desired rendered height of the image in pixels.* The intrinsic\n   * height of the image in pixels.\n   */\n  @Input({transform: numberAttribute}) height: number|undefined;\n\n  /**\n   * The desired loading behavior (lazy, eager, or auto). Defaults to `lazy`,\n   * which is recommended for most images.\n   *\n   * Warning: Setting images as loading=\"eager\" or loading=\"auto\" marks them\n   * as non-priority images and can hurt loading performance. For images which\n   * may be the LCP element, use the `priority` attribute instead of `loading`.\n   */\n  @Input() loading?: 'lazy'|'eager'|'auto';\n\n  /**\n   * Indicates whether this image should have a high priority.\n   */\n  @Input({transform: booleanAttribute}) priority = false;\n\n  /**\n   * Data to pass through to custom loaders.\n   */\n  @Input() loaderParams?: {[key: string]: any};\n\n  /**\n   * Disables automatic srcset generation for this image.\n   */\n  @Input({transform: booleanAttribute}) disableOptimizedSrcset = false;\n\n  /**\n   * Sets the image to \"fill mode\", which eliminates the height/width requirement and adds\n   * styles such that the image fills its containing element.\n   */\n  @Input({transform: booleanAttribute}) fill = false;\n\n  /**\n   * Value of the `src` attribute if set on the host `<img>` element.\n   * This input is exclusively read to assert that `src` is not set in conflict\n   * with `ngSrc` and that images don't start to load until a lazy loading strategy is set.\n   * @internal\n   */\n  @Input() src?: string;\n\n  /**\n   * Value of the `srcset` attribute if set on the host `<img>` element.\n   * This input is exclusively read to assert that `srcset` is not set in conflict\n   * with `ngSrcset` and that images don't start to load until a lazy loading strategy is set.\n   * @internal\n   */\n  @Input() srcset?: string;\n\n  /** @nodoc */\n  ngOnInit() {\n    performanceMarkFeature('NgOptimizedImage');\n\n    if (ngDevMode) {\n      const ngZone = this.injector.get(NgZone);\n      assertNonEmptyInput(this, 'ngSrc', this.ngSrc);\n      assertValidNgSrcset(this, this.ngSrcset);\n      assertNoConflictingSrc(this);\n      if (this.ngSrcset) {\n        assertNoConflictingSrcset(this);\n      }\n      assertNotBase64Image(this);\n      assertNotBlobUrl(this);\n      if (this.fill) {\n        assertEmptyWidthAndHeight(this);\n        // This leaves the Angular zone to avoid triggering unnecessary change detection cycles when\n        // `load` tasks are invoked on images.\n        ngZone.runOutsideAngular(\n            () => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));\n      } else {\n        assertNonEmptyWidthAndHeight(this);\n        if (this.height !== undefined) {\n          assertGreaterThanZero(this, this.height, 'height');\n        }\n        if (this.width !== undefined) {\n          assertGreaterThanZero(this, this.width, 'width');\n        }\n        // Only check for distorted images when not in fill mode, where\n        // images may be intentionally stretched, cropped or letterboxed.\n        ngZone.runOutsideAngular(\n            () => assertNoImageDistortion(this, this.imgElement, this.renderer));\n      }\n      assertValidLoadingInput(this);\n      if (!this.ngSrcset) {\n        assertNoComplexSizes(this);\n      }\n      assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);\n      assertNoNgSrcsetWithoutLoader(this, this.imageLoader);\n      assertNoLoaderParamsWithoutLoader(this, this.imageLoader);\n\n      if (this.lcpObserver !== null) {\n        const ngZone = this.injector.get(NgZone);\n        ngZone.runOutsideAngular(() => {\n          this.lcpObserver!.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);\n        });\n      }\n\n      if (this.priority) {\n        const checker = this.injector.get(PreconnectLinkChecker);\n        checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);\n      }\n    }\n    this.setHostAttributes();\n  }\n\n  private setHostAttributes() {\n    // Must set width/height explicitly in case they are bound (in which case they will\n    // only be reflected and not found by the browser)\n    if (this.fill) {\n      if (!this.sizes) {\n        this.sizes = '100vw';\n      }\n    } else {\n      this.setHostAttribute('width', this.width!.toString());\n      this.setHostAttribute('height', this.height!.toString());\n    }\n\n    this.setHostAttribute('loading', this.getLoadingBehavior());\n    this.setHostAttribute('fetchpriority', this.getFetchPriority());\n\n    // The `data-ng-img` attribute flags an image as using the directive, to allow\n    // for analysis of the directive's performance.\n    this.setHostAttribute('ng-img', 'true');\n\n    // The `src` and `srcset` attributes should be set last since other attributes\n    // could affect the image's loading behavior.\n    const rewrittenSrcset = this.updateSrcAndSrcset();\n\n    if (this.sizes) {\n      this.setHostAttribute('sizes', this.sizes);\n    }\n    if (this.isServer && this.priority) {\n      this.preloadLinkCreator.createPreloadLinkTag(\n          this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);\n    }\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    if (ngDevMode) {\n      assertNoPostInitInputChange(this, changes, [\n        'ngSrcset',\n        'width',\n        'height',\n        'priority',\n        'fill',\n        'loading',\n        'sizes',\n        'loaderParams',\n        'disableOptimizedSrcset',\n      ]);\n    }\n    if (changes['ngSrc'] && !changes['ngSrc'].isFirstChange()) {\n      const oldSrc = this._renderedSrc;\n      this.updateSrcAndSrcset(true);\n      const newSrc = this._renderedSrc;\n      if (this.lcpObserver !== null && oldSrc && newSrc && oldSrc !== newSrc) {\n        const ngZone = this.injector.get(NgZone);\n        ngZone.runOutsideAngular(() => {\n          this.lcpObserver?.updateImage(oldSrc, newSrc);\n        });\n      }\n    }\n  }\n\n  private callImageLoader(configWithoutCustomParams: Omit<ImageLoaderConfig, 'loaderParams'>):\n      string {\n    let augmentedConfig: ImageLoaderConfig = configWithoutCustomParams;\n    if (this.loaderParams) {\n      augmentedConfig.loaderParams = this.loaderParams;\n    }\n    return this.imageLoader(augmentedConfig);\n  }\n\n  private getLoadingBehavior(): string {\n    if (!this.priority && this.loading !== undefined) {\n      return this.loading;\n    }\n    return this.priority ? 'eager' : 'lazy';\n  }\n\n  private getFetchPriority(): string {\n    return this.priority ? 'high' : 'auto';\n  }\n\n  private getRewrittenSrc(): string {\n    // ImageLoaderConfig supports setting a width property. However, we're not setting width here\n    // because if the developer uses rendered width instead of intrinsic width in the HTML width\n    // attribute, the image requested may be too small for 2x+ screens.\n    if (!this._renderedSrc) {\n      const imgConfig = {src: this.ngSrc};\n      // Cache calculated image src to reuse it later in the code.\n      this._renderedSrc = this.callImageLoader(imgConfig);\n    }\n    return this._renderedSrc;\n  }\n\n  private getRewrittenSrcset(): string {\n    const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);\n    const finalSrcs = this.ngSrcset.split(',').filter(src => src !== '').map(srcStr => {\n      srcStr = srcStr.trim();\n      const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width!;\n      return `${this.callImageLoader({src: this.ngSrc, width})} ${srcStr}`;\n    });\n    return finalSrcs.join(', ');\n  }\n\n  private getAutomaticSrcset(): string {\n    if (this.sizes) {\n      return this.getResponsiveSrcset();\n    } else {\n      return this.getFixedSrcset();\n    }\n  }\n\n  private getResponsiveSrcset(): string {\n    const {breakpoints} = this.config;\n\n    let filteredBreakpoints = breakpoints!;\n    if (this.sizes?.trim() === '100vw') {\n      // Since this is a full-screen-width image, our srcset only needs to include\n      // breakpoints with full viewport widths.\n      filteredBreakpoints = breakpoints!.filter(bp => bp >= VIEWPORT_BREAKPOINT_CUTOFF);\n    }\n\n    const finalSrcs = filteredBreakpoints.map(\n        bp => `${this.callImageLoader({src: this.ngSrc, width: bp})} ${bp}w`);\n    return finalSrcs.join(', ');\n  }\n\n  private updateSrcAndSrcset(forceSrcRecalc = false): string|undefined {\n    if (forceSrcRecalc) {\n      // Reset cached value, so that the followup `getRewrittenSrc()` call\n      // will recalculate it and update the cache.\n      this._renderedSrc = null;\n    }\n\n    const rewrittenSrc = this.getRewrittenSrc();\n    this.setHostAttribute('src', rewrittenSrc);\n\n    let rewrittenSrcset: string|undefined = undefined;\n    if (this.ngSrcset) {\n      rewrittenSrcset = this.getRewrittenSrcset();\n    } else if (this.shouldGenerateAutomaticSrcset()) {\n      rewrittenSrcset = this.getAutomaticSrcset();\n    }\n\n    if (rewrittenSrcset) {\n      this.setHostAttribute('srcset', rewrittenSrcset);\n    }\n    return rewrittenSrcset;\n  }\n\n  private getFixedSrcset(): string {\n    const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map(multiplier => `${this.callImageLoader({\n                                                       src: this.ngSrc,\n                                                       width: this.width! * multiplier\n                                                     })} ${multiplier}x`);\n    return finalSrcs.join(', ');\n  }\n\n  private shouldGenerateAutomaticSrcset(): boolean {\n    let oversizedImage = false;\n    if (!this.sizes) {\n      oversizedImage =\n          this.width! > FIXED_SRCSET_WIDTH_LIMIT || this.height! > FIXED_SRCSET_HEIGHT_LIMIT;\n    }\n    return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader &&\n        !oversizedImage;\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    if (ngDevMode) {\n      if (!this.priority && this._renderedSrc !== null && this.lcpObserver !== null) {\n        this.lcpObserver.unregisterImage(this._renderedSrc);\n      }\n    }\n  }\n\n  private setHostAttribute(name: string, value: string): void {\n    this.renderer.setAttribute(this.imgElement, name, value);\n  }\n}\n\n/***** Helpers *****/\n\n/**\n * Sorts provided config breakpoints and uses defaults.\n */\nfunction processConfig(config: ImageConfig): ImageConfig {\n  let sortedBreakpoints: {breakpoints?: number[]} = {};\n  if (config.breakpoints) {\n    sortedBreakpoints.breakpoints = config.breakpoints.sort((a, b) => a - b);\n  }\n  return Object.assign({}, IMAGE_CONFIG_DEFAULTS, config, sortedBreakpoints);\n}\n\n/***** Assert functions *****/\n\n/**\n * Verifies that there is no `src` set on a host element.\n */\nfunction assertNoConflictingSrc(dir: NgOptimizedImage) {\n  if (dir.src) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_SRC_ATTR,\n        `${imgDirectiveDetails(dir.ngSrc)} both \\`src\\` and \\`ngSrc\\` have been set. ` +\n            `Supplying both of these attributes breaks lazy loading. ` +\n            `The NgOptimizedImage directive sets \\`src\\` itself based on the value of \\`ngSrc\\`. ` +\n            `To fix this, please remove the \\`src\\` attribute.`);\n  }\n}\n\n/**\n * Verifies that there is no `srcset` set on a host element.\n */\nfunction assertNoConflictingSrcset(dir: NgOptimizedImage) {\n  if (dir.srcset) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_SRCSET_ATTR,\n        `${imgDirectiveDetails(dir.ngSrc)} both \\`srcset\\` and \\`ngSrcset\\` have been set. ` +\n            `Supplying both of these attributes breaks lazy loading. ` +\n            `The NgOptimizedImage directive sets \\`srcset\\` itself based on the value of ` +\n            `\\`ngSrcset\\`. To fix this, please remove the \\`srcset\\` attribute.`);\n  }\n}\n\n/**\n * Verifies that the `ngSrc` is not a Base64-encoded image.\n */\nfunction assertNotBase64Image(dir: NgOptimizedImage) {\n  let ngSrc = dir.ngSrc.trim();\n  if (ngSrc.startsWith('data:')) {\n    if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {\n      ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + '...';\n    }\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc, false)} \\`ngSrc\\` is a Base64-encoded string ` +\n            `(${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. ` +\n            `To fix this, disable the NgOptimizedImage directive for this element ` +\n            `by removing \\`ngSrc\\` and using a standard \\`src\\` attribute instead.`);\n  }\n}\n\n/**\n * Verifies that the 'sizes' only includes responsive values.\n */\nfunction assertNoComplexSizes(dir: NgOptimizedImage) {\n  let sizes = dir.sizes;\n  if (sizes?.match(/((\\)|,)\\s|^)\\d+px/)) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc, false)} \\`sizes\\` was set to a string including ` +\n            `pixel values. For automatic \\`srcset\\` generation, \\`sizes\\` must only include responsive ` +\n            `values, such as \\`sizes=\"50vw\"\\` or \\`sizes=\"(min-width: 768px) 50vw, 100vw\"\\`. ` +\n            `To fix this, modify the \\`sizes\\` attribute, or provide your own \\`ngSrcset\\` value directly.`);\n  }\n}\n\n/**\n * Verifies that the `ngSrc` is not a Blob URL.\n */\nfunction assertNotBlobUrl(dir: NgOptimizedImage) {\n  const ngSrc = dir.ngSrc.trim();\n  if (ngSrc.startsWith('blob:')) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc)} \\`ngSrc\\` was set to a blob URL (${ngSrc}). ` +\n            `Blob URLs are not supported by the NgOptimizedImage directive. ` +\n            `To fix this, disable the NgOptimizedImage directive for this element ` +\n            `by removing \\`ngSrc\\` and using a regular \\`src\\` attribute instead.`);\n  }\n}\n\n/**\n * Verifies that the input is set to a non-empty string.\n */\nfunction assertNonEmptyInput(dir: NgOptimizedImage, name: string, value: unknown) {\n  const isString = typeof value === 'string';\n  const isEmptyString = isString && value.trim() === '';\n  if (!isString || isEmptyString) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc)} \\`${name}\\` has an invalid value ` +\n            `(\\`${value}\\`). To fix this, change the value to a non-empty string.`);\n  }\n}\n\n/**\n * Verifies that the `ngSrcset` is in a valid format, e.g. \"100w, 200w\" or \"1x, 2x\".\n */\nexport function assertValidNgSrcset(dir: NgOptimizedImage, value: unknown) {\n  if (value == null) return;\n  assertNonEmptyInput(dir, 'ngSrcset', value);\n  const stringVal = value as string;\n  const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);\n  const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);\n\n  if (isValidDensityDescriptor) {\n    assertUnderDensityCap(dir, stringVal);\n  }\n\n  const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;\n  if (!isValidSrcset) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc)} \\`ngSrcset\\` has an invalid value (\\`${value}\\`). ` +\n            `To fix this, supply \\`ngSrcset\\` using a comma-separated list of one or more width ` +\n            `descriptors (e.g. \"100w, 200w\") or density descriptors (e.g. \"1x, 2x\").`);\n  }\n}\n\nfunction assertUnderDensityCap(dir: NgOptimizedImage, value: string) {\n  const underDensityCap =\n      value.split(',').every(num => num === '' || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);\n  if (!underDensityCap) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${\n            imgDirectiveDetails(\n                dir.ngSrc)} the \\`ngSrcset\\` contains an unsupported image density:` +\n            `\\`${value}\\`. NgOptimizedImage generally recommends a max image density of ` +\n            `${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ` +\n            `${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities ` +\n            `greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for ` +\n            `most use cases. Images that will be pinch-zoomed are typically the primary use case for ` +\n            `${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);\n  }\n}\n\n/**\n * Creates a `RuntimeError` instance to represent a situation when an input is set after\n * the directive has initialized.\n */\nfunction postInitInputChangeError(dir: NgOptimizedImage, inputName: string): {} {\n  let reason!: string;\n  if (inputName === 'width' || inputName === 'height') {\n    reason = `Changing \\`${inputName}\\` may result in different attribute value ` +\n        `applied to the underlying image element and cause layout shifts on a page.`;\n  } else {\n    reason = `Changing the \\`${inputName}\\` would have no effect on the underlying ` +\n        `image element, because the resource loading has already occurred.`;\n  }\n  return new RuntimeError(\n      RuntimeErrorCode.UNEXPECTED_INPUT_CHANGE,\n      `${imgDirectiveDetails(dir.ngSrc)} \\`${inputName}\\` was updated after initialization. ` +\n          `The NgOptimizedImage directive will not react to this input change. ${reason} ` +\n          `To fix this, either switch \\`${inputName}\\` to a static value ` +\n          `or wrap the image element in an *ngIf that is gated on the necessary value.`);\n}\n\n/**\n * Verify that none of the listed inputs has changed.\n */\nfunction assertNoPostInitInputChange(\n    dir: NgOptimizedImage, changes: SimpleChanges, inputs: string[]) {\n  inputs.forEach(input => {\n    const isUpdated = changes.hasOwnProperty(input);\n    if (isUpdated && !changes[input].isFirstChange()) {\n      if (input === 'ngSrc') {\n        // When the `ngSrc` input changes, we detect that only in the\n        // `ngOnChanges` hook, thus the `ngSrc` is already set. We use\n        // `ngSrc` in the error message, so we use a previous value, but\n        // not the updated one in it.\n        dir = {ngSrc: changes[input].previousValue} as NgOptimizedImage;\n      }\n      throw postInitInputChangeError(dir, input);\n    }\n  });\n}\n\n/**\n * Verifies that a specified input is a number greater than 0.\n */\nfunction assertGreaterThanZero(dir: NgOptimizedImage, inputValue: unknown, inputName: string) {\n  const validNumber = typeof inputValue === 'number' && inputValue > 0;\n  const validString =\n      typeof inputValue === 'string' && /^\\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;\n  if (!validNumber && !validString) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc)} \\`${inputName}\\` has an invalid value. ` +\n            `To fix this, provide \\`${inputName}\\` as a number greater than 0.`);\n  }\n}\n\n/**\n * Verifies that the rendered image is not visually distorted. Effectively this is checking:\n * - Whether the \"width\" and \"height\" attributes reflect the actual dimensions of the image.\n * - Whether image styling is \"correct\" (see below for a longer explanation).\n */\nfunction assertNoImageDistortion(\n    dir: NgOptimizedImage, img: HTMLImageElement, renderer: Renderer2) {\n  const removeListenerFn = renderer.listen(img, 'load', () => {\n    removeListenerFn();\n    const computedStyle = window.getComputedStyle(img);\n    let renderedWidth = parseFloat(computedStyle.getPropertyValue('width'));\n    let renderedHeight = parseFloat(computedStyle.getPropertyValue('height'));\n    const boxSizing = computedStyle.getPropertyValue('box-sizing');\n\n    if (boxSizing === 'border-box') {\n      const paddingTop = computedStyle.getPropertyValue('padding-top');\n      const paddingRight = computedStyle.getPropertyValue('padding-right');\n      const paddingBottom = computedStyle.getPropertyValue('padding-bottom');\n      const paddingLeft = computedStyle.getPropertyValue('padding-left');\n      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);\n      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);\n    }\n\n    const renderedAspectRatio = renderedWidth / renderedHeight;\n    const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;\n\n    const intrinsicWidth = img.naturalWidth;\n    const intrinsicHeight = img.naturalHeight;\n    const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;\n\n    const suppliedWidth = dir.width!;\n    const suppliedHeight = dir.height!;\n    const suppliedAspectRatio = suppliedWidth / suppliedHeight;\n\n    // Tolerance is used to account for the impact of subpixel rendering.\n    // Due to subpixel rendering, the rendered, intrinsic, and supplied\n    // aspect ratios of a correctly configured image may not exactly match.\n    // For example, a `width=4030 height=3020` image might have a rendered\n    // size of \"1062w, 796.48h\". (An aspect ratio of 1.334... vs. 1.333...)\n    const inaccurateDimensions =\n        Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;\n    const stylingDistortion = nonZeroRenderedDimensions &&\n        Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;\n\n    if (inaccurateDimensions) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.INVALID_INPUT,\n          `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match ` +\n              `the aspect ratio indicated by the width and height attributes. ` +\n              `\\nIntrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h ` +\n              `(aspect-ratio: ${\n                  round(intrinsicAspectRatio)}). \\nSupplied width and height attributes: ` +\n              `${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${\n                  round(suppliedAspectRatio)}). ` +\n              `\\nTo fix this, update the width and height attributes.`));\n    } else if (stylingDistortion) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.INVALID_INPUT,\n          `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image ` +\n              `does not match the image's intrinsic aspect ratio. ` +\n              `\\nIntrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h ` +\n              `(aspect-ratio: ${round(intrinsicAspectRatio)}). \\nRendered image size: ` +\n              `${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ` +\n              `${round(renderedAspectRatio)}). \\nThis issue can occur if \"width\" and \"height\" ` +\n              `attributes are added to an image without updating the corresponding ` +\n              `image styling. To fix this, adjust image styling. In most cases, ` +\n              `adding \"height: auto\" or \"width: auto\" to the image styling will fix ` +\n              `this issue.`));\n    } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {\n      // If `ngSrcset` hasn't been set, sanity check the intrinsic size.\n      const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;\n      const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;\n      const oversizedWidth = (intrinsicWidth - recommendedWidth) >= OVERSIZED_IMAGE_TOLERANCE;\n      const oversizedHeight = (intrinsicHeight - recommendedHeight) >= OVERSIZED_IMAGE_TOLERANCE;\n      if (oversizedWidth || oversizedHeight) {\n        console.warn(formatRuntimeError(\n            RuntimeErrorCode.OVERSIZED_IMAGE,\n            `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly ` +\n                `larger than necessary. ` +\n                `\\nRendered image size: ${renderedWidth}w x ${renderedHeight}h. ` +\n                `\\nIntrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. ` +\n                `\\nRecommended intrinsic image size: ${recommendedWidth}w x ${\n                    recommendedHeight}h. ` +\n                `\\nNote: Recommended intrinsic image size is calculated assuming a maximum DPR of ` +\n                `${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image ` +\n                `or consider using the \"ngSrcset\" and \"sizes\" attributes.`));\n      }\n    }\n  });\n}\n\n/**\n * Verifies that a specified input is set.\n */\nfunction assertNonEmptyWidthAndHeight(dir: NgOptimizedImage) {\n  let missingAttributes = [];\n  if (dir.width === undefined) missingAttributes.push('width');\n  if (dir.height === undefined) missingAttributes.push('height');\n  if (missingAttributes.length > 0) {\n    throw new RuntimeError(\n        RuntimeErrorCode.REQUIRED_INPUT_MISSING,\n        `${imgDirectiveDetails(dir.ngSrc)} these required attributes ` +\n            `are missing: ${missingAttributes.map(attr => `\"${attr}\"`).join(', ')}. ` +\n            `Including \"width\" and \"height\" attributes will prevent image-related layout shifts. ` +\n            `To fix this, include \"width\" and \"height\" attributes on the image tag or turn on ` +\n            `\"fill\" mode with the \\`fill\\` attribute.`);\n  }\n}\n\n/**\n * Verifies that width and height are not set. Used in fill mode, where those attributes don't make\n * sense.\n */\nfunction assertEmptyWidthAndHeight(dir: NgOptimizedImage) {\n  if (dir.width || dir.height) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${\n            imgDirectiveDetails(\n                dir.ngSrc)} the attributes \\`height\\` and/or \\`width\\` are present ` +\n            `along with the \\`fill\\` attribute. Because \\`fill\\` mode causes an image to fill its containing ` +\n            `element, the size attributes have no effect and should be removed.`);\n  }\n}\n\n/**\n * Verifies that the rendered image has a nonzero height. If the image is in fill mode, provides\n * guidance that this can be caused by the containing element's CSS position property.\n */\nfunction assertNonZeroRenderedHeight(\n    dir: NgOptimizedImage, img: HTMLImageElement, renderer: Renderer2) {\n  const removeListenerFn = renderer.listen(img, 'load', () => {\n    removeListenerFn();\n    const renderedHeight = img.clientHeight;\n    if (dir.fill && renderedHeight === 0) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.INVALID_INPUT,\n          `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. ` +\n              `This is likely because the containing element does not have the CSS 'position' ` +\n              `property set to one of the following: \"relative\", \"fixed\", or \"absolute\". ` +\n              `To fix this problem, make sure the container element has the CSS 'position' ` +\n              `property defined and the height of the element is not zero.`));\n    }\n  });\n}\n\n/**\n * Verifies that the `loading` attribute is set to a valid input &\n * is not used on priority images.\n */\nfunction assertValidLoadingInput(dir: NgOptimizedImage) {\n  if (dir.loading && dir.priority) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc)} the \\`loading\\` attribute ` +\n            `was used on an image that was marked \"priority\". ` +\n            `Setting \\`loading\\` on priority images is not allowed ` +\n            `because these images will always be eagerly loaded. ` +\n            `To fix this, remove the “loading” attribute from the priority image.`);\n  }\n  const validInputs = ['auto', 'eager', 'lazy'];\n  if (typeof dir.loading === 'string' && !validInputs.includes(dir.loading)) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INPUT,\n        `${imgDirectiveDetails(dir.ngSrc)} the \\`loading\\` attribute ` +\n            `has an invalid value (\\`${dir.loading}\\`). ` +\n            `To fix this, provide a valid value (\"lazy\", \"eager\", or \"auto\").`);\n  }\n}\n\n/**\n * Warns if NOT using a loader (falling back to the generic loader) and\n * the image appears to be hosted on one of the image CDNs for which\n * we do have a built-in image loader. Suggests switching to the\n * built-in loader.\n *\n * @param ngSrc Value of the ngSrc attribute\n * @param imageLoader ImageLoader provided\n */\nfunction assertNotMissingBuiltInLoader(ngSrc: string, imageLoader: ImageLoader) {\n  if (imageLoader === noopImageLoader) {\n    let builtInLoaderName = '';\n    for (const loader of BUILT_IN_LOADERS) {\n      if (loader.testUrl(ngSrc)) {\n        builtInLoaderName = loader.name;\n        break;\n      }\n    }\n    if (builtInLoaderName) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.MISSING_BUILTIN_LOADER,\n          `NgOptimizedImage: It looks like your images may be hosted on the ` +\n              `${builtInLoaderName} CDN, but your app is not using Angular's ` +\n              `built-in loader for that CDN. We recommend switching to use ` +\n              `the built-in by calling \\`provide${builtInLoaderName}Loader()\\` ` +\n              `in your \\`providers\\` and passing it your instance's base URL. ` +\n              `If you don't want to use the built-in loader, define a custom ` +\n              `loader function using IMAGE_LOADER to silence this warning.`));\n    }\n  }\n}\n\n/**\n * Warns if ngSrcset is present and no loader is configured (i.e. the default one is being used).\n */\nfunction assertNoNgSrcsetWithoutLoader(dir: NgOptimizedImage, imageLoader: ImageLoader) {\n  if (dir.ngSrcset && imageLoader === noopImageLoader) {\n    console.warn(formatRuntimeError(\n        RuntimeErrorCode.MISSING_NECESSARY_LOADER,\n        `${imgDirectiveDetails(dir.ngSrc)} the \\`ngSrcset\\` attribute is present but ` +\n            `no image loader is configured (i.e. the default one is being used), ` +\n            `which would result in the same image being used for all configured sizes. ` +\n            `To fix this, provide a loader or remove the \\`ngSrcset\\` attribute from the image.`));\n  }\n}\n\n/**\n * Warns if loaderParams is present and no loader is configured (i.e. the default one is being\n * used).\n */\nfunction assertNoLoaderParamsWithoutLoader(dir: NgOptimizedImage, imageLoader: ImageLoader) {\n  if (dir.loaderParams && imageLoader === noopImageLoader) {\n    console.warn(formatRuntimeError(\n        RuntimeErrorCode.MISSING_NECESSARY_LOADER,\n        `${imgDirectiveDetails(dir.ngSrc)} the \\`loaderParams\\` attribute is present but ` +\n            `no image loader is configured (i.e. the default one is being used), ` +\n            `which means that the loaderParams data will not be consumed and will not affect the URL. ` +\n            `To fix this, provide a custom loader or remove the \\`loaderParams\\` attribute from the image.`));\n  }\n}\n\n\nfunction round(input: number): number|string {\n  return Number.isInteger(input) ? input : input.toFixed(2);\n}\n\n// Transform function to handle SafeValue input for ngSrc. This doesn't do any sanitization,\n// as that is not needed for img.src and img.srcset. This transform is purely for compatibility.\nfunction unwrapSafeUrl(value: string|SafeValue): string {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return unwrapSafeValue(value);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nexport * from './private_export';\nexport * from './location/index';\nexport {formatDate} from './i18n/format_date';\nexport {formatCurrency, formatNumber, formatPercent} from './i18n/format_number';\nexport {NgLocaleLocalization, NgLocalization} from './i18n/localization';\nexport {registerLocaleData} from './i18n/locale_data';\nexport {Plural, NumberFormatStyle, FormStyle, Time, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyCode, getLocaleCurrencyName, getLocaleCurrencySymbol, getLocaleDirection} from './i18n/locale_data_api';\nexport {parseCookieValue as ɵparseCookieValue} from './cookie';\nexport {CommonModule} from './common_module';\nexport {NgClass, NgFor, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet} from './directives/index';\nexport {DOCUMENT} from './dom_tokens';\nexport {AsyncPipe, DatePipe, DatePipeConfig, DATE_PIPE_DEFAULT_TIMEZONE, DATE_PIPE_DEFAULT_OPTIONS, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, KeyValue} from './pipes/index';\nexport {PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ɵPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ɵPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi} from './platform_id';\nexport {VERSION} from './version';\nexport {ViewportScroller, NullViewportScroller as ɵNullViewportScroller} from './viewport_scroller';\nexport {XhrFactory} from './xhr';\nexport {IMAGE_CONFIG, ImageConfig, IMAGE_LOADER, ImageLoader, ImageLoaderConfig, NgOptimizedImage, PRECONNECT_CHECK_BLOCKLIST, provideCloudflareLoader, provideCloudinaryLoader, provideImageKitLoader, provideImgixLoader} from './directives/ng_optimized_image';\nexport {normalizeQueryParams as ɵnormalizeQueryParams} from './location/util';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/common';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | number | (string | number)[]}|Headers) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map<string, string[]>();\n      headers.forEach((values: string, name: string) => {\n        this.setHeaderEntries(name, values);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  private setHeaderEntries(name: string, values: any) {\n    const headerValues =\n        (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers: Record<string, unknown>|Headers):\n    asserts headers is Record<string, string|string[]|number|number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n          `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n      STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value: string|number|boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string|number|boolean;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>}):\n      HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as (string | number | boolean), op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n  transferCache?: {includeHeaders?: string[]}|boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  /**\n   * The HttpTransferCache option for the request\n   */\n  readonly transferCache?: {includeHeaders?: string[]}|boolean;\n\n  constructor(method: 'GET'|'HEAD', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    /**\n     * This property accepts either a boolean to enable/disable transferring cache for eligible\n     * requests performed using `HttpClient`, or an object, which allows to configure cache\n     * parameters, such as which headers should be included (no headers are included by default).\n     *\n     * Setting this property will override the options passed to `provideClientHydration()` for this\n     * particular request\n     */\n    transferCache?: {includeHeaders?: string[]}|boolean\n  });\n  constructor(method: 'DELETE'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    /**\n     * This property accepts either a boolean to enable/disable transferring cache for eligible\n     * requests performed using `HttpClient`, or an object, which allows to configure cache\n     * parameters, such as which headers should be included (no headers are included by default).\n     *\n     * Setting this property will override the options passed to `provideClientHydration()` for this\n     * particular request\n     */\n    transferCache?: {includeHeaders?: string[]}|boolean\n  });\n  constructor(method: 'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    /**\n     * This property accepts either a boolean to enable/disable transferring cache for eligible\n     * requests performed using `HttpClient`, or an object, which allows to configure cache\n     * parameters, such as which headers should be included (no headers are included by default).\n     *\n     * Setting this property will override the options passed to `provideClientHydration()` for this\n     * particular request\n     */\n    transferCache?: {includeHeaders?: string[]}|boolean\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n        transferCache?: {includeHeaders?: string[]}|boolean\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n        transferCache?: {includeHeaders?: string[]}|boolean\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|URLSearchParams|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * Note: The `FetchBackend` doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      context?: HttpContext,\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|\n            {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n      transferCache?: {includeHeaders?: string[]}|boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n          observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | (string | number | boolean)[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpResponse, HttpStatusCode} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl(response: Response): string|null {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\n@Injectable()\nexport class FetchBackend implements HttpBackend {\n  // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n  private readonly fetchImpl =\n      inject(FetchFactory, {optional: true})?.fetch ?? fetch.bind(globalThis);\n  private readonly ngZone = inject(NgZone);\n\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable(observer => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer)\n          .then(noop, error => observer.error(new HttpErrorResponse({error})));\n      return () => aborter.abort();\n    });\n  }\n\n  private async doRequest(\n      request: HttpRequest<any>, signal: AbortSignal,\n      observer: Observer<HttpEvent<any>>): Promise<void> {\n    const init = this.createRequestInit(request);\n    let response;\n\n    try {\n      const fetchPromise = this.fetchImpl(request.urlWithParams, {signal, ...init});\n\n      // Make sure Zone.js doesn't trigger false-positive unhandled promise\n      // error in case the Promise is rejected synchronously. See function\n      // description for additional information.\n      silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n\n      // Send the `Sent` event before awaiting the response.\n      observer.next({type: HttpEventType.Sent});\n\n      response = await fetchPromise;\n    } catch (error: any) {\n      observer.error(new HttpErrorResponse({\n        error,\n        status: error.status ?? 0,\n        statusText: error.statusText,\n        url: request.urlWithParams,\n        headers: error.headers,\n      }));\n      return;\n    }\n\n    const headers = new HttpHeaders(response.headers);\n    const statusText = response.statusText;\n    const url = getResponseUrl(response) ?? request.urlWithParams;\n\n    let status = response.status;\n    let body: string|ArrayBuffer|Blob|object|null = null;\n\n    if (request.reportProgress) {\n      observer.next(new HttpHeaderResponse({headers, status, statusText, url}));\n    }\n\n    if (response.body) {\n      // Read Progress\n      const contentLength = response.headers.get('content-length');\n      const chunks: Uint8Array[] = [];\n      const reader = response.body.getReader();\n      let receivedLength = 0;\n\n      let decoder: TextDecoder;\n      let partialText: string|undefined;\n\n      // We have to check whether the Zone is defined in the global scope because this may be called\n      // when the zone is nooped.\n      const reqZone = typeof Zone !== 'undefined' && Zone.current;\n\n      // Perform response processing outside of Angular zone to\n      // ensure no excessive change detection runs are executed\n      // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n      await this.ngZone.runOutsideAngular(async () => {\n        while (true) {\n          const {done, value} = await reader.read();\n\n          if (done) {\n            break;\n          }\n\n          chunks.push(value);\n          receivedLength += value.length;\n\n          if (request.reportProgress) {\n            partialText = request.responseType === 'text' ?\n                (partialText ?? '') + (decoder ??= new TextDecoder).decode(value, {stream: true}) :\n                undefined;\n\n            const reportProgress = () => observer.next({\n              type: HttpEventType.DownloadProgress,\n              total: contentLength ? +contentLength : undefined,\n              loaded: receivedLength,\n              partialText,\n            } as HttpDownloadProgressEvent);\n            reqZone ? reqZone.run(reportProgress) : reportProgress();\n          }\n        }\n      });\n\n      // Combine all chunks.\n      const chunksAll = this.concatChunks(chunks, receivedLength);\n      try {\n        const contentType = response.headers.get('Content-Type') ?? '';\n        body = this.parseBody(request, chunksAll, contentType);\n      } catch (error) {\n        // Body loading or parsing failed\n        observer.error(new HttpErrorResponse({\n          error,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: getResponseUrl(response) ?? request.urlWithParams,\n        }));\n        return;\n      }\n    }\n\n    // Same behavior as the XhrBackend\n    if (status === 0) {\n      status = body ? HttpStatusCode.Ok : 0;\n    }\n\n    // ok determines whether the response will be transmitted on the event or\n    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n    // but a successful status code can still result in an error if the user\n    // asked for JSON data and the body cannot be parsed as such.\n    const ok = status >= 200 && status < 300;\n\n    if (ok) {\n      observer.next(new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url,\n      }));\n\n      // The full body has been received and delivered, no further events\n      // are possible. This request is complete.\n      observer.complete();\n    } else {\n      observer.error(new HttpErrorResponse({\n        error: body,\n        headers,\n        status,\n        statusText,\n        url,\n      }));\n    }\n  }\n\n  private parseBody(request: HttpRequest<any>, binContent: Uint8Array, contentType: string): string\n      |ArrayBuffer|Blob|object|null {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX, '');\n        return text === '' ? null : JSON.parse(text) as object;\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent], {type: contentType});\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  private createRequestInit(req: HttpRequest<any>): RequestInit {\n    // We could share some of this logic with the XhrBackend\n\n    const headers: Record<string, string> = {};\n    const credentials: RequestCredentials|undefined = req.withCredentials ? 'include' : undefined;\n\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n\n    // Add an Accept header if one isn't present already.\n    headers['Accept'] ??= 'application/json, text/plain, */*';\n\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!headers['Content-Type']) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers['Content-Type'] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n    };\n  }\n\n  private concatChunks(chunks: Uint8Array[], totalLength: number): Uint8Array {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n}\n\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nexport abstract class FetchFactory {\n  abstract fetch: typeof fetch;\n}\n\nfunction noop(): void {}\n\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise: Promise<unknown>) {\n  promise.then(noop, noop);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {EnvironmentInjector, inject, Injectable, InjectionToken, PLATFORM_ID, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵInitialRenderPendingTasks as InitialRenderPendingTasks} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {FetchBackend} from './fetch';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n * @see {@link HttpInterceptorFn}\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s are executed in an [injection context](/guide/dependency-injection-context).\n * They have access to `inject()` via the `EnvironmentInjector` from which they were configured.\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n * @see {@link withInterceptors}\n *\n * @usageNotes\n * Here is a noop interceptor that passes the request through without modifying it:\n * ```typescript\n * export const noopInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *   return next(modifiedReq);\n * };\n * ```\n *\n * If you want to alter a request, clone it first and modify the clone before passing it to the\n * `next()` handler function.\n *\n * Here is a basic interceptor that adds a bearer token to the headers\n * ```typescript\n * export const authenticationInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *    const userToken = 'MY_TOKEN'; const modifiedReq = req.clone({\n *      headers: req.headers.set('Authorization', `Bearer ${userToken}`),\n *    });\n *\n *    return next(modifiedReq);\n * };\n * ```\n */\nexport type HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) =>\n    Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (req: HttpRequest<RequestT>, finalHandlerFn: HttpHandlerFn) =>\n    Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n    req: HttpRequest<any>, finalHandlerFn: HttpHandlerFn): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n    chainTailFn: ChainedInterceptorFn<any>,\n    interceptor: HttpInterceptor): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n  });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n    chainTailFn: ChainedInterceptorFn<unknown>, interceptorFn: HttpInterceptorFn,\n    injector: EnvironmentInjector): ChainedInterceptorFn<unknown> {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() =>\n    interceptorFn(\n      initialRequest,\n      downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n    )\n  );\n  // clang-format on\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS =\n    new InjectionToken<readonly HttpInterceptor[]>(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS =\n    new InjectionToken<readonly HttpInterceptorFn[]>(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nexport const HTTP_ROOT_INTERCEPTOR_FNS =\n    new InjectionToken<readonly HttpInterceptorFn[]>(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n\n/**\n * A provider to set a global primary http backend. If set, it will override the default one\n */\nexport const PRIMARY_HTTP_BACKEND =\n    new InjectionToken<HttpBackend>(ngDevMode ? 'PRIMARY_HTTP_BACKEND' : '');\n\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any>|null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n          adaptLegacyInterceptorToChain, interceptorChainEndFn as ChainedInterceptorFn<any>);\n    }\n\n    const pendingTasks = inject(InitialRenderPendingTasks);\n    const taskId = pendingTasks.add();\n    return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n  };\n}\n\nlet fetchBackendWarningDisplayed = false;\n\n/** Internal function to reset the flag in tests */\nexport function resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown>|null = null;\n  private readonly pendingTasks = inject(InitialRenderPendingTasks);\n\n  constructor(private backend: HttpBackend, private injector: EnvironmentInjector) {\n    super();\n\n    // Check if there is a preferred HTTP backend configured and use it if that's the case.\n    // This is needed to enable `FetchBackend` globally for all HttpClient's when `withFetch`\n    // is used.\n    const primaryHttpBackend = inject(PRIMARY_HTTP_BACKEND, {optional: true});\n    this.backend = primaryHttpBackend ?? backend;\n\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      const isServer = isPlatformServer(injector.get(PLATFORM_ID));\n      if (isServer && !(this.backend instanceof FetchBackend)) {\n        fetchBackendWarningDisplayed = true;\n        injector.get(Console).warn(formatRuntimeError(\n            RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR,\n            'Angular detected that `HttpClient` is not configured ' +\n                'to use `fetch` APIs. It\\'s strongly recommended to ' +\n                'enable `fetch` for applications that use Server-Side Rendering ' +\n                'for better performance and compatibility. ' +\n                'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                'call at the root of the application.'));\n      }\n    }\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([\n        ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n        ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n      ]));\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n          (nextSequencedFn, interceptorFn) =>\n              chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n          interceptorChainEndFn as ChainedInterceptorFn<unknown>);\n    }\n\n    const taskId = this.pendingTasks.add();\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n        .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse, HttpStatusCode} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document|undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK),\n            }));\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HttpStatusCode.Ok,\n            statusText: 'OK',\n            url,\n          }));\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = (this.document.implementation as DOMImplementation).createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () => jsonpInterceptorFn(\n            initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {from, Observable, Observer, of} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport {HttpBackend} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpStatusCode, HttpUploadProgressEvent} from './response';\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new RuntimeError(\n          RuntimeErrorCode.MISSING_JSONP_MODULE,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n    }\n\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory: XhrFactory&{ɵloadImpl?: () => Promise<void>} = this.xhrFactory;\n    const source: Observable<void|null> =\n        xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n\n    return source.pipe(\n        switchMap(() => {\n          // Everything happens on Observable subscription.\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials\n            // flag.\n            const xhr = xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (req.withCredentials) {\n              xhr.withCredentials = true;\n            }\n\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n              xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n              const detectedType = req.detectContentTypeHeader();\n              // Sometimes Content-Type detection fails.\n              if (detectedType !== null) {\n                xhr.setRequestHeader('Content-Type', detectedType);\n              }\n            }\n\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n              const responseType = req.responseType.toLowerCase();\n\n              // JSON responses need to be processed as text. This is because if the server\n              // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n              // xhr.response will be null, and xhr.responseText cannot be accessed to\n              // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n              // is parsed by first requesting text and then applying JSON.parse.\n              xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n            }\n\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse: HttpHeaderResponse|null = null;\n\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = (): HttpHeaderResponse => {\n              if (headerResponse !== null) {\n                return headerResponse;\n              }\n\n              const statusText = xhr.statusText || 'OK';\n\n              // Parse headers from XMLHttpRequest - this step is lazy.\n              const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n              // Read the response URL from the XMLHttpResponse instance and fall back on the\n              // request URL.\n              const url = getResponseUrl(xhr) || req.url;\n\n              // Construct the HttpHeaderResponse and memoize it.\n              headerResponse =\n                  new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n              return headerResponse;\n            };\n\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n              // Read response state from the memoized partial data.\n              let {headers, status, statusText, url} = partialFromXhr();\n\n              // The body will be read out if present.\n              let body: any|null = null;\n\n              if (status !== HttpStatusCode.NoContent) {\n                // Use XMLHttpRequest.response if set, responseText otherwise.\n                body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n              }\n\n              // Normalize another potential bug (this one comes from CORS).\n              if (status === 0) {\n                status = !!body ? HttpStatusCode.Ok : 0;\n              }\n\n              // ok determines whether the response will be transmitted on the event or\n              // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n              // but a successful status code can still result in an error if the user\n              // asked for JSON data and the body cannot be parsed as such.\n              let ok = status >= 200 && status < 300;\n\n              // Check whether the body needs to be parsed as JSON (in many cases the browser\n              // will have done that already).\n              if (req.responseType === 'json' && typeof body === 'string') {\n                // Save the original body, before attempting XSSI prefix stripping.\n                const originalBody = body;\n                body = body.replace(XSSI_PREFIX, '');\n                try {\n                  // Attempt the parse. If it fails, a parse error should be delivered to the\n                  // user.\n                  body = body !== '' ? JSON.parse(body) : null;\n                } catch (error) {\n                  // Since the JSON.parse failed, it's reasonable to assume this might not have\n                  // been a JSON response. Restore the original body (including any XSSI prefix)\n                  // to deliver a better error response.\n                  body = originalBody;\n\n                  // If this was an error request to begin with, leave it as a string, it\n                  // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                  if (ok) {\n                    // Even though the response status was 2xx, this is still an error.\n                    ok = false;\n                    // The parse error contains the text of the body that failed to parse.\n                    body = {error, text: body} as HttpJsonParseError;\n                  }\n                }\n              }\n\n              if (ok) {\n                // A successful response is delivered on the event stream.\n                observer.next(new HttpResponse({\n                  body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }));\n                // The full body has been received and delivered, no further events\n                // are possible. This request is complete.\n                observer.complete();\n              } else {\n                // An unsuccessful request is delivered on the error channel.\n                observer.error(new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }));\n              }\n            };\n\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error: ProgressEvent) => {\n              const {url} = partialFromXhr();\n              const res = new HttpErrorResponse({\n                error,\n                status: xhr.status || 0,\n                statusText: xhr.statusText || 'Unknown Error',\n                url: url || undefined,\n              });\n              observer.error(res);\n            };\n\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event: ProgressEvent) => {\n              // Send the HttpResponseHeaders event if it hasn't been sent already.\n              if (!sentHeaders) {\n                observer.next(partialFromXhr());\n                sentHeaders = true;\n              }\n\n              // Start building the download progress event to deliver on the response\n              // event stream.\n              let progressEvent: HttpDownloadProgressEvent = {\n                type: HttpEventType.DownloadProgress,\n                loaded: event.loaded,\n              };\n\n              // Set the total number of bytes in the event if it's available.\n              if (event.lengthComputable) {\n                progressEvent.total = event.total;\n              }\n\n              // If the request was for text content and a partial response is\n              // available on XMLHttpRequest, include it in the progress event\n              // to allow for streaming reads.\n              if (req.responseType === 'text' && !!xhr.responseText) {\n                progressEvent.partialText = xhr.responseText;\n              }\n\n              // Finally, fire the event.\n              observer.next(progressEvent);\n            };\n\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event: ProgressEvent) => {\n              // Upload progress events are simpler. Begin building the progress\n              // event.\n              let progress: HttpUploadProgressEvent = {\n                type: HttpEventType.UploadProgress,\n                loaded: event.loaded,\n              };\n\n              // If the total number of bytes being uploaded is available, include\n              // it.\n              if (event.lengthComputable) {\n                progress.total = event.total;\n              }\n\n              // Send the event.\n              observer.next(progress);\n            };\n\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n              // Download progress is always enabled if requested.\n              xhr.addEventListener('progress', onDownProgress);\n\n              // Upload progress depends on whether there is a body to upload.\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.addEventListener('progress', onUpProgress);\n              }\n            }\n\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody!);\n            observer.next({type: HttpEventType.Sent});\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n              // On a cancellation, remove all registered event listeners.\n              xhr.removeEventListener('error', onError);\n              xhr.removeEventListener('abort', onError);\n              xhr.removeEventListener('load', onLoad);\n              xhr.removeEventListener('timeout', onError);\n\n              if (req.reportProgress) {\n                xhr.removeEventListener('progress', onDownProgress);\n                if (reqBody !== null && xhr.upload) {\n                  xhr.upload.removeEventListener('progress', onUpProgress);\n                }\n              }\n\n              // Finally, abort the in-flight request.\n              if (xhr.readyState !== xhr.DONE) {\n                xhr.abort();\n              }\n            };\n          });\n        }),\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>('XSRF_ENABLED');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n      lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () =>\n            xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentProviders, inject, InjectionToken, makeEnvironmentProviders, Provider} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {FetchBackend} from './fetch';\nimport {HTTP_INTERCEPTOR_FNS, HttpInterceptorFn, HttpInterceptorHandler, legacyInterceptorFnFactory, PRIMARY_HTTP_BACKEND} from './interceptor';\nimport {jsonpCallbackContext, JsonpCallbackContext, JsonpClientBackend, jsonpInterceptorFn} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_ENABLED, XSRF_HEADER_NAME, xsrfInterceptorFn} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n  Fetch,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n    kind: KindT, providers: Provider[]): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"alert is-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nexport function provideHttpClient(...features: HttpFeature<HttpFeatureKind>[]):\n    EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n        featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(\n          ngDevMode ?\n              `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n              '');\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(interceptorFns: HttpInterceptorFn[]):\n    HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true,\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>('LEGACY_INTERCEPTOR_FN');\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    }\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration(\n    {cookieName, headerName}: {cookieName?: string, headerName?: string}):\n    HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n              'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n\n\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport function withFetch(): HttpFeature<HttpFeatureKind.Fetch> {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n    // TODO: Create a runtime error\n    // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n    throw new Error(\n        'The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' +\n        'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n  }\n\n  return makeHttpFeature(HttpFeatureKind.Fetch, [\n    FetchBackend,\n    {provide: HttpBackend, useExisting: FetchBackend},\n    {provide: PRIMARY_HTTP_BACKEND, useExisting: FetchBackend},\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {provideHttpClient, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withXsrfConfiguration} from './provider';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_DEFAULT_COOKIE_NAME, XSRF_DEFAULT_HEADER_NAME, XSRF_ENABLED} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        withNoXsrfProtection().ɵproviders,\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    provideHttpClient(withInterceptorsFromDi()),\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    withJsonpSupport().ɵproviders,\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BOOTSTRAP_LISTENER, ApplicationRef, inject, InjectionToken, makeStateKey, Provider, StateKey, TransferState, ɵformatRuntimeError as formatRuntimeError, ɵperformanceMarkFeature as performanceMarkFeature, ɵtruncateMiddle as truncateMiddle, ɵwhenStable as whenStable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HTTP_ROOT_INTERCEPTOR_FNS, HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n/**\n * Options to configure how TransferCache should be used to cache requests made via HttpClient.\n *\n * @param includeHeaders Specifies which headers should be included into cached responses. No\n *     headers are included by default.\n * @param filter A function that receives a request as an argument and returns a boolean to indicate\n *     whether a request should be included into the cache.\n * @param includePostRequests Enables caching for POST requests. By default, only GET and HEAD\n *     requests are cached. This option can be enabled if POST requests are used to retrieve data\n *     (for example using GraphQL).\n *\n * @publicApi\n */\nexport type HttpTransferCacheOptions = {\n  includeHeaders?: string[],\n  filter?: (req: HttpRequest<unknown>) => boolean,\n  includePostRequests?: boolean\n};\n\n/**\n * Keys within cached response data structure.\n */\n\nexport const BODY = 'b';\nexport const HEADERS = 'h';\nexport const STATUS = 's';\nexport const STATUS_TEXT = 'st';\nexport const URL = 'u';\nexport const RESPONSE_TYPE = 'rt';\n\n\ninterface TransferHttpResponse {\n  /** body */\n  [BODY]: any;\n  /** headers */\n  [HEADERS]: Record<string, string[]>;\n  /** status */\n  [STATUS]?: number;\n  /** statusText */\n  [STATUS_TEXT]?: string;\n  /** url */\n  [URL]?: string;\n  /** responseType */\n  [RESPONSE_TYPE]?: HttpRequest<unknown>['responseType'];\n}\n\ninterface CacheOptions extends HttpTransferCacheOptions {\n  isCacheActive: boolean;\n}\n\nconst CACHE_OPTIONS =\n    new InjectionToken<CacheOptions>(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '');\n\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nexport function transferCacheInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const {isCacheActive, ...globalOptions} = inject(CACHE_OPTIONS);\n  const {transferCache: requestOptions, method: requestMethod} = req;\n\n  // In the following situations we do not want to cache the request\n  if (!isCacheActive ||\n      // POST requests are allowed either globally or at request level\n      (requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions) ||\n      (requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod)) ||\n      requestOptions === false ||  //\n      (globalOptions.filter?.(req)) === false) {\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n  const storeKey = makeCacheKey(req);\n  const response = transferState.get(storeKey, null);\n\n  let headersToInclude = globalOptions.includeHeaders;\n  if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n    // Request-specific config takes precedence over the global config.\n    headersToInclude = requestOptions.includeHeaders;\n  }\n\n  if (response) {\n    const {\n      [BODY]: undecodedBody,\n      [RESPONSE_TYPE]: responseType,\n      [HEADERS]: httpHeaders,\n      [STATUS]: status,\n      [STATUS_TEXT]: statusText,\n      [URL]: url\n    } = response;\n    // Request found in cache. Respond using it.\n    let body: ArrayBuffer|Blob|string|undefined = undecodedBody;\n\n    switch (responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(undecodedBody).buffer;\n        break;\n      case 'blob':\n        body = new Blob([undecodedBody]);\n        break;\n    }\n\n    // We want to warn users accessing a header provided from the cache\n    // That HttpTransferCache alters the headers\n    // The warning will be logged a single time by HttpHeaders instance\n    let headers = new HttpHeaders(httpHeaders);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Append extra logic in dev mode to produce a warning when a header\n      // that was not transferred to the client is accessed in the code via `get`\n      // and `has` calls.\n      headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n    }\n\n\n    return of(\n        new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url,\n        }),\n    );\n  }\n\n\n  // Request not found in cache. Make the request and cache it.\n  return next(req).pipe(\n      tap((event: HttpEvent<unknown>) => {\n        if (event instanceof HttpResponse) {\n          transferState.set<TransferHttpResponse>(storeKey, {\n            [BODY]: event.body,\n            [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n            [STATUS]: event.status,\n            [STATUS_TEXT]: event.statusText,\n            [URL]: event.url || '',\n            [RESPONSE_TYPE]: req.responseType,\n          });\n        }\n      }),\n  );\n}\n\nfunction getFilteredHeaders(\n    headers: HttpHeaders,\n    includeHeaders: string[]|undefined,\n    ): Record<string, string[]> {\n  if (!includeHeaders) {\n    return {};\n  }\n\n  const headersMap: Record<string, string[]> = {};\n  for (const key of includeHeaders) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction makeCacheKey(request: HttpRequest<any>): StateKey<TransferHttpResponse> {\n  // make the params encoded same as a url so it's easy to identify\n  const {params, method, responseType, url} = request;\n  const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n  const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n\n  const hash = generateHash(key);\n\n  return makeStateKey(hash);\n}\n\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value: string): string {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  return hash.toString();\n}\n\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nexport function withHttpTransferCache(cacheOptions: HttpTransferCacheOptions): Provider[] {\n  return [\n    {\n      provide: CACHE_OPTIONS,\n      useFactory: (): CacheOptions => {\n        performanceMarkFeature('NgHttpTransferCache');\n        return {isCacheActive: true, ...cacheOptions};\n      }\n    },\n    {\n      provide: HTTP_ROOT_INTERCEPTOR_FNS,\n      useValue: transferCacheInterceptorFn,\n      multi: true,\n      deps: [TransferState, CACHE_OPTIONS]\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const cacheState = inject(CACHE_OPTIONS);\n\n        return () => {\n          whenStable(appRef).then(() => {\n            cacheState.isCacheActive = false;\n          });\n        };\n      }\n    }\n  ];\n}\n\n\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(\n    url: string, headers: HttpHeaders, headersToInclude: string[]): HttpHeaders {\n  const warningProduced = new Set();\n  return new Proxy<HttpHeaders>(headers, {\n    get(target: HttpHeaders, prop: keyof HttpHeaders): unknown {\n      const value = Reflect.get(target, prop);\n      const methods: Set<keyof HttpHeaders> = new Set(['get', 'has', 'getAll']);\n\n      if (typeof value !== 'function' || !methods.has(prop)) {\n        return value;\n      }\n\n      return (headerName: string) => {\n        // We log when the key has been removed and a warning hasn't been produced for the header\n        const key = (prop + ':' + headerName).toLowerCase();  // e.g. `get:cache-control`\n        if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n          warningProduced.add(key);\n          const truncatedUrl = truncateMiddle(url);\n\n          // TODO: create Error guide for this warning\n          console.warn(formatRuntimeError(\n              RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE,\n              `Angular detected that the \\`${\n                  headerName}\\` header is accessed, but the value of the header ` +\n                  `was not transferred from the server to the client by the HttpTransferCache. ` +\n                  `To include the value of the \\`${headerName}\\` header for the \\`${\n                      truncatedUrl}\\` request, ` +\n                  `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` +\n                  `on a request level by adding the \\`transferCache\\` parameter, or on an application ` +\n                  `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` +\n                  `\\`provideClientHydration()\\` call. `));\n        }\n\n        // invoking the original method\n        return (value as Function).apply(target, [headerName]);\n      };\n    }\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, Testability, TestabilityRegistry, ɵglobal as global, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new RuntimeError(\n            RuntimeErrorCode.TESTABILITY_NOT_FOUND,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: (didWork: boolean) => void) => {\n      const testabilities = global['getAllAngularTestabilities']() as Testability[];\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: boolean) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach((testability) => {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n          RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `No event manager plugin found for event ${eventName}`);\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nexport abstract class EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  /**\n   * Should return `true` for every event name that should be supported by this plugin\n   */\n  abstract supports(eventName: string): boolean;\n\n  /**\n   * Implement the behaviour for the supported events\n   */\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, OnDestroy, Optional, PLATFORM_ID} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private readonly styleRef = new Map < string /** Style string */, {\n    elements: HTMLStyleElement[];\n    usage: number\n  }\n  > ();\n  private readonly hostNodes = new Set<Node>();\n  private readonly styleNodesInDOM: Map<string, HTMLStyleElement>|null;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(CSP_NONCE) @Optional() private nonce?: string|null,\n      @Inject(PLATFORM_ID) readonly platformId: object = {}) {\n    this.styleNodesInDOM = this.collectServerRenderedStyles();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.resetHostNodes();\n  }\n\n  addStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n\n  removeStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n\n      if (usageCount <= 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    if (styleNodesInDOM) {\n      styleNodesInDOM.forEach((node) => node.remove());\n      styleNodesInDOM.clear();\n    }\n\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n\n    this.resetHostNodes();\n  }\n\n  addHost(hostNode: Node): void {\n    this.hostNodes.add(hostNode);\n\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hostNodes.delete(hostNode);\n  }\n\n  private getAllStyles(): IterableIterator<string> {\n    return this.styleRef.keys();\n  }\n\n  private onStyleAdded(style: string): void {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n\n  private onStyleRemoved(style: string): void {\n    const styleRef = this.styleRef;\n    styleRef.get(style)?.elements?.forEach((node) => node.remove());\n    styleRef.delete(style);\n  }\n\n  private collectServerRenderedStyles(): Map<string, HTMLStyleElement>|null {\n    const styles = this.doc.head?.querySelectorAll<HTMLStyleElement>(\n        `style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n\n    if (styles?.length) {\n      const styleMap = new Map<string, HTMLStyleElement>();\n\n      styles.forEach((style) => {\n        if (style.textContent != null) {\n          styleMap.set(style.textContent, style);\n        }\n      });\n\n      return styleMap;\n    }\n\n    return null;\n  }\n\n  private changeUsageCount(style: string, delta: number): number {\n    const map = this.styleRef;\n    if (map.has(style)) {\n      const styleRefValue = map.get(style)!;\n      styleRefValue.usage += delta;\n\n      return styleRefValue.usage;\n    }\n\n    map.set(style, {usage: delta, elements: []});\n    return delta;\n  }\n\n  private getStyleElement(host: Node, style: string): HTMLStyleElement {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    const styleEl = styleNodesInDOM?.get(style);\n    if (styleEl?.parentNode === host) {\n      // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n      styleNodesInDOM!.delete(style);\n\n      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This attribute is solely used for debugging purposes.\n        styleEl.setAttribute('ng-style-reused', '');\n      }\n\n      return styleEl;\n    } else {\n      const styleEl = this.doc.createElement('style');\n\n      if (this.nonce) {\n        styleEl.setAttribute('nonce', this.nonce);\n      }\n\n      styleEl.textContent = style;\n\n      if (this.platformIsServer) {\n        styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n\n      host.appendChild(styleEl);\n\n      return styleEl;\n    }\n  }\n\n  private addStyleToHost(host: Node, style: string): void {\n    const styleEl = this.getStyleElement(host, style);\n    const styleRef = this.styleRef;\n    const styleElRef = styleRef.get(style)?.elements;\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      styleRef.set(style, {elements: [styleEl], usage: 1});\n    }\n  }\n\n  private resetHostNodes(): void {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear();\n    // Re-add the head element back since this is the default host.\n    hostNodes.add(this.doc.head);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, OnDestroy, PLATFORM_ID, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {EventManager} from './events/event_manager';\nimport {SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY =\n    new InjectionToken<boolean>('RemoveStylesOnCompDestroy', {\n      providedIn: 'root',\n      factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n    });\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId =\n      new Map<string, EmulatedEncapsulationDomRenderer2|NoneEncapsulationDomRenderer>();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      private readonly eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestroy: boolean,\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(PLATFORM_ID) readonly platformId: Object,\n      readonly ngZone: NgZone,\n      @Inject(CSP_NONCE) private readonly nonce: string|null = null,\n  ) {\n    this.platformIsServer = isPlatformServer(platformId);\n    this.defaultRenderer =\n        new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc,\n              ngZone, platformIsServer);\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n              eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce,\n              platformIsServer);\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n              eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone,\n              platformIsServer);\n          break;\n      }\n\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  /**\n   * By default this renderer throws when encountering synthetic properties\n   * This can be disabled for example by the AsyncAnimationRendererFactory\n   */\n  throwOnSyntheticProps = true;\n\n  constructor(\n      private readonly eventManager: EventManager, private readonly doc: Document,\n      private readonly ngZone: NgZone, private readonly platformIsServer: boolean) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new RuntimeError(\n          RuntimeErrorCode.ROOT_NODE_NOT_FOUND,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (el == null) {\n      return;\n    }\n\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps &&\n        checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps &&\n        checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n\n    return this.eventManager.addEventListener(\n               target, event, this.decoratePreventDefault(callback)) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ?\n          this.ngZone.runGuarded(() => eventHandler(event)) :\n          eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY,\n        `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n            name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager,\n      private sharedStylesHost: SharedStylesHost,\n      private hostEl: any,\n      component: RendererType2,\n      doc: Document,\n      ngZone: NgZone,\n      nonce: string|null,\n      platformIsServer: boolean,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n\n  constructor(\n      eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      component: RendererType2,\n      private removeStylesOnCompDestroy: boolean,\n      doc: Document,\n      ngZone: NgZone,\n      platformIsServer: boolean,\n      compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles);\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: SharedStylesHost, component: RendererType2,\n      appId: string, removeStylesOnCompDestroy: boolean, doc: Document, ngZone: NgZone,\n      platformIsServer: boolean) {\n    const compId = appId + '-' + component.id;\n    super(\n        eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone,\n        platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space';  // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    return keyName === 'esc' ? 'escape' : keyName;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationConfig as ApplicationConfigFromCore, ApplicationModule, ApplicationRef, createPlatformFactory, ErrorHandler, Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, Provider, RendererFactory2, SkipSelf, StaticProvider, Testability, TestabilityRegistry, Type, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵinternalCreateApplication as internalCreateApplication, ɵRuntimeError as RuntimeError, ɵsetDocument, ɵTESTABILITY as TESTABILITY, ɵTESTABILITY_GETTER as TESTABILITY_GETTER} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n    rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [\n      ...BROWSER_MODULE_PROVIDERS,\n      ...(options?.providers ?? []),\n    ],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? 'BrowserModule Providers Marker' : '');\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  },\n  {\n    provide: Testability,  // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  }\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []}, {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2, SharedStylesHost, EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  (typeof ngDevMode === 'undefined' || ngDevMode) ?\n      {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true} :\n      []\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BROWSER_MODULE_PROVIDERS_MARKER)\n              providersAlreadyPresent: boolean|null) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n      throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n              `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @deprecated Use {@link APP_ID} instead to set the application ID.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n      ],\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see {@link Meta}\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction performanceNow() {\n  return window.performance && window.performance.now ? window.performance.now() :\n                                                        new Date().getTime();\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\nimport {exportNgVar} from '../../dom/util';\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(\n          () => this._loaderPromise!\n                    .then(() => {\n                      // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                      if (!(window as any).Hammer) {\n                        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                          this.console.warn(\n                              `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                        }\n                        deregister = () => {};\n                        return;\n                      }\n\n                      if (!cancelRegistration) {\n                        // Now that Hammer is loaded and the listener is being loaded for real,\n                        // the deregistration function changes from canceling registration to\n                        // removal.\n                        deregister = this.addEventListener(element, eventName, handler);\n                      }\n                    })\n                    .catch(() => {\n                      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(\n                            `The \"${eventName}\" event cannot be bound because the custom ` +\n                            `Hammer.JS loader failed.`);\n                      }\n                      deregister = () => {};\n                    }));\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  ]\n})\nexport class HammerModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵRuntimeError as RuntimeError, ɵunwrapSafeValue as unwrapSafeValue, ɵXSS_SECURITY_URL as XSS_SECURITY_URL} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n      default:\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpTransferCacheOptions, ɵwithHttpTransferCache} from '@angular/common/http';\nimport {ENVIRONMENT_INITIALIZER, EnvironmentProviders, inject, makeEnvironmentProviders, NgZone, Provider, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵwithDomHydration as withDomHydration,} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nexport const enum HydrationFeatureKind {\n  NoHttpTransferCache,\n  HttpTransferCacheOptions,\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n    ɵkind: FeatureKind, ɵproviders: Provider[] = [],\n    ɵoptions: unknown = {}): HydrationFeature<FeatureKind> {\n  return {ɵkind, ɵproviders};\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nexport function withNoHttpTransferCache():\n    HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * The function accepts a an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * wether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nexport function withHttpTransferCacheOptions(\n    options: HttpTransferCacheOptions,\n    ): HydrationFeature<HydrationFeatureKind.HttpTransferCacheOptions> {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(\n      HydrationFeatureKind.HttpTransferCacheOptions, ɵwithHttpTransferCache(options));\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(Console);\n        const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n                'that uses a custom or a noop Zone.js implementation. ' +\n                'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true,\n  }];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](/guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or configure features\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n */\nexport function provideClientHydration(...features: HydrationFeature<HydrationFeatureKind>[]):\n    EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n  const hasHttpTransferCacheOptions =\n      featuresKind.has(HydrationFeatureKind.HttpTransferCacheOptions);\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  if (typeof ngDevMode !== 'undefined' && ngDevMode &&\n      featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) && hasHttpTransferCacheOptions) {\n    // TODO: Make this a runtime error\n    throw new Error(\n        'Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.');\n  }\n\n  return makeEnvironmentProviders([\n    (typeof ngDevMode !== 'undefined' && ngDevMode) ? provideZoneJsCompatibilityDetector() : [],\n    withDomHydration(),\n    ((featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions) ?\n         [] :\n         ɵwithHttpTransferCache({})),\n    providers,\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('17.0.3');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\nimport {makeStateKey as makeStateKeyFromCore, StateKey as StateKeyFromCore, TransferState as TransferStateFromCore} from '@angular/core';\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport const makeStateKey = makeStateKeyFromCore;\n\n/**\n *\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n *\n * @deprecated `TransferState` has moved, please import `TransferState` from `@angular/core`\n *     instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type TransferState = TransferStateFromCore;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nexport const TransferState: {new (): TransferStateFromCore} = TransferStateFromCore;\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n * @publicApi\n *\n * @deprecated `StateKey` has moved, please import `StateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type StateKey<T> = StateKeyFromCore<T>;\n\nexport {ApplicationConfig, bootstrapApplication, BrowserModule, createApplication, platformBrowser, provideProtractorTestingSupport} from './browser';\nexport {Meta, MetaDefinition} from './browser/meta';\nexport {Title} from './browser/title';\nexport {disableDebugTools, enableDebugTools} from './browser/tools/tools';\nexport {By} from './dom/debug/by';\nexport {REMOVE_STYLES_ON_COMPONENT_DESTROY} from './dom/dom_renderer';\nexport {EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin} from './dom/events/event_manager';\nexport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader, HammerModule} from './dom/events/hammer_gestures';\nexport {DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue} from './security/dom_sanitization_service';\nexport {HydrationFeature, provideClientHydration, HydrationFeatureKind, withHttpTransferCacheOptions, withNoHttpTransferCache} from './hydration';\n\nexport * from './private_export';\nexport {VERSION} from './version';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_DOM", "getDOM", "setRootDomAdapter", "adapter", "DomAdapter", "DOCUMENT", "InjectionToken", "PlatformLocation", "historyGo", "relativePosition", "Error", "factory", "inject", "BrowserPlatformLocation", "providedIn", "Injectable", "args", "useFactory", "LOCATION_INITIALIZED", "constructor", "_doc", "_location", "window", "location", "_history", "history", "getBaseHrefFromDOM", "getBaseHref", "onPopState", "fn", "getGlobalEventTarget", "addEventListener", "removeEventListener", "onHashChange", "href", "protocol", "hostname", "port", "pathname", "search", "hash", "newPath", "pushState", "state", "title", "url", "replaceState", "forward", "back", "go", "getState", "joinWithSlash", "start", "end", "length", "slashes", "endsWith", "startsWith", "substring", "stripTrailingSlash", "match", "pathEndIdx", "index", "droppedSlashIdx", "slice", "normalizeQueryParams", "params", "LocationStrategy", "PathLocationStrategy", "APP_BASE_HREF", "_platformLocation", "_removeListenerFns", "_baseHref", "origin", "ngOnDestroy", "pop", "push", "prepareExternalUrl", "internal", "path", "includeHash", "queryParams", "externalUrl", "ɵfac", "PathLocationStrategy_Factory", "t", "ɵprov", "Optional", "Inject", "HashLocationStrategy", "HashLocationStrategy_Factory", "Location", "locationStrategy", "_subject", "EventEmitter", "_urlChangeListeners", "_urlChangeSubscription", "_locationStrategy", "baseHref", "_basePath", "_stripOrigin", "_stripIndexHtml", "ev", "emit", "type", "unsubscribe", "normalize", "isCurrentPathEqualTo", "query", "_stripBasePath", "_notifyUrlChangeListeners", "onUrlChange", "subscribe", "v", "fnIndex", "indexOf", "splice", "forEach", "onNext", "onThrow", "onReturn", "next", "error", "complete", "createLocation", "ɵɵinject", "basePath", "strippedUrl", "includes", "replace", "isAbsoluteUrl", "RegExp", "test", "split", "CURRENCIES_EN", "undefined", "NumberFormatStyle", "Plural", "FormStyle", "TranslationWidth", "FormatWidth", "NumberSymbol", "WeekDay", "getLocaleId", "locale", "ɵfindLocaleData", "ɵLocaleDataIndex", "LocaleId", "getLocaleDayPeriods", "formStyle", "width", "data", "amPmData", "DayPeriodsFormat", "DayPeriodsStandalone", "amPm", "getLastDefinedValue", "getLocaleDayNames", "daysData", "DaysFormat", "DaysStandalone", "days", "getLocaleMonthNames", "monthsData", "MonthsFormat", "MonthsStandalone", "months", "getLocaleEraNames", "erasData", "Eras", "getLocaleDateFormat", "locale", "width", "data", "ɵfindLocaleData", "getLastDefinedValue", "ɵLocaleDataIndex", "DateFormat", "getLocaleTimeFormat", "TimeFormat", "getLocaleDateTimeFormat", "dateTimeFormatData", "DateTimeFormat", "getLocaleNumberSymbol", "symbol", "res", "NumberSymbols", "NumberSymbol", "CurrencyDecimal", "Decimal", "CurrencyGroup", "Group", "getLocaleNumberFormat", "type", "NumberFormats", "getLocaleCurrencies", "locale", "data", "ɵfindLocaleData", "ɵLocaleDataIndex", "Currencies", "getLocalePluralCase", "ɵgetLocalePluralCase", "checkFullData", "ExtraData", "Error", "LocaleId", "getLocaleExtraDayPeriodRules", "rules", "map", "rule", "extractTime", "getLocaleExtraDayPeriods", "formStyle", "width", "dayPeriodsData", "dayPeriods", "getLastDefinedValue", "getLastDefinedValue", "data", "index", "i", "Error", "extractTime", "time", "h", "m", "split", "hours", "minutes", "getCurrencySymbol", "code", "format", "locale", "currency", "getLocaleCurrencies", "CURRENCIES_EN", "symbolNarrow", "DEFAULT_NB_OF_CURRENCY_DIGITS", "getNumberOfCurrencyDigits", "digits", "ISO8601_DATE_REGEX", "NAMED_FORMATS", "DATE_FORMATS_SPLIT", "ZoneWidth", "DateType", "TranslationType", "formatDate", "value", "timezone", "date", "toDate", "namedFormat", "getNamedFormat", "parts", "match", "exec", "concat", "slice", "part", "pop", "push", "dateTimezoneOffset", "getTimezoneOffset", "timezoneToOffset", "convertTimezoneToLocal", "text", "forEach", "dateFormatter", "getDateFormatter", "replace", "createDate", "year", "month", "newDate", "Date", "setFullYear", "setHours", "localeId", "getLocaleId", "formatValue", "getLocaleDateFormat", "FormatWidth", "Short", "Medium", "Long", "Full", "getLocaleTimeFormat", "shortTime", "shortDate", "formatDateTime", "getLocaleDateTimeFormat", "mediumTime", "mediumDate", "longTime", "longDate", "fullTime", "fullDate", "str", "opt_values", "key", "padNumber", "num", "minusSign", "trim", "negWrap", "neg", "strNum", "String", "length", "formatFractionalSeconds", "milliseconds", "strMs", "substring", "dateGetter", "name", "size", "offset", "getDatePart", "Hours", "FractionalSeconds", "localeMinus", "getLocaleNumberSymbol", "NumberSymbol", "MinusSign", "FullYear", "getFullYear", "Month", "getMonth", "getDate", "getHours", "Minutes", "getMinutes", "Seconds", "getSeconds", "getMilliseconds", "Day", "getDay", "dateStrGetter", "width", "form", "FormStyle", "Format", "extended", "getDateTranslation", "Months", "getLocaleMonthNames", "Days", "getLocaleDayNames", "DayPeriods", "currentHours", "currentMinutes", "rules", "getLocaleExtraDayPeriodRules", "dayPeriods", "getLocaleExtraDayPeriods", "findIndex", "rule", "Array", "isArray", "from", "to", "afterFrom", "beforeTo", "getLocaleDayPeriods", "Eras", "getLocaleEraNames", "unexpected", "timeZoneGetter", "zone", "Math", "floor", "ceil", "abs", "ShortGMT", "Extended", "JANUARY", "THURSDAY", "getFirstThursdayOfYear", "firstDayOfYear", "getThursdayThisWeek", "datetime", "weekGetter", "monthBased", "result", "nbDaysBefore1stDayOfMonth", "today", "thisThurs", "firstThurs", "diff", "getTime", "round", "weekNumberingYearGetter", "weekNumberingYear", "DATE_FORMATS", "formatter", "TranslationWidth", "Abbreviated", "Wide", "Narrow", "Standalone", "fallback", "requestedTimezoneOffset", "parse", "isNaN", "addDateMinutes", "setMinutes", "reverse", "reverseValue", "timezoneOffset", "isDate", "test", "y", "d", "map", "val", "parsedNb", "parseFloat", "isoStringToDate", "tzHour", "tzMin", "dateSetter", "setUTCFullYear", "timeSetter", "setUTCHours", "Number", "call", "s", "ms", "valueOf", "NUMBER_FORMAT_REGEXP", "MAX_DIGITS", "DECIMAL_SEP", "ZERO_CHAR", "PATTERN_SEP", "GROUP_SEP", "DIGIT_CHAR", "CURRENCY_CHAR", "PERCENT_CHAR", "formatNumberToLocaleString", "pattern", "groupSymbol", "decimalSymbol", "digitsInfo", "isPercent", "formattedText", "isZero", "isFinite", "Infinity", "parsedNumber", "parseNumber", "toPercent", "minInt", "minFraction", "minFrac", "maxFraction", "maxFrac", "minIntPart", "minFractionPart", "maxFractionPart", "parseIntAutoRadix", "roundNumber", "integerLen", "exponent", "decimals", "every", "unshift", "splice", "groups", "lgSize", "join", "gSize", "Exponential", "negPre", "negSuf", "posPre", "posSuf", "formatCurrency", "currencyCode", "getLocaleNumberFormat", "NumberFormatStyle", "Currency", "parseNumberFormat", "res", "CurrencyGroup", "CurrencyDecimal", "formatPercent", "Percent", "Group", "Decimal", "RegExp", "PercentSign", "formatNumber", "p", "patternParts", "positive", "negative", "positiveParts", "indexOf", "lastIndexOf", "integer", "fraction", "ch", "charAt", "trunkLen", "pos", "fractionLen", "numStr", "j", "zeros", "search", "fractionSize", "min", "max", "roundAt", "digit", "k", "dropTrailingZeros", "minLen", "carry", "reduceRight", "parseInt", "NgLocalization", "ɵprov", "factory", "NgLocalization_Factory", "t", "r", "NgLocaleLocalization", "LOCALE_ID", "providedIn", "Injectable", "args", "useFactory", "deps", "getPluralCategory", "cases", "ngLocalization", "constructor", "plural", "getLocalePluralCase", "Plural", "Zero", "One", "Two", "Few", "Many", "ɵfac", "NgLocaleLocalization_Factory", "Inject", "parseCookieValue", "cookieStr", "name", "encodeURIComponent", "cookie", "split", "eqIndex", "indexOf", "cookieName", "cookieValue", "slice", "trim", "decodeURIComponent", "WS_REGEXP", "EMPTY_ARRAY", "NgClass", "constructor", "_iterableDiffers", "_keyValueDiffers", "_ngEl", "_renderer", "initialClasses", "stateMap", "Map", "klass", "value", "ngClass", "rawClass", "ngDoCheck", "_updateState", "Array", "isArray", "Set", "Object", "keys", "Boolean", "_applyStateDiff", "nextEnabled", "state", "get", "undefined", "enabled", "changed", "touched", "set", "stateEntry", "_toggleClass", "delete", "ngDevMode", "Error", "ɵstringify", "length", "forEach", "addClass", "nativeElement", "removeClass", "IterableDiffers", "KeyValueDiffers", "ElementRef", "Renderer2", "Directive", "args", "selector", "standalone", "Input", "NgComponentOutlet", "_viewContainerRef", "ngComponentOutlet", "_inputsUsed", "_needToReCreateNgModuleInstance", "changes", "_needToReCreateComponentInstance", "ngOnChanges", "clear", "_componentRef", "injector", "ngComponentOutletInjector", "parentInjector", "_moduleRef", "destroy", "ngComponentOutletNgModule", "createNgModule", "getParentInjector", "ngComponentOutletNgModuleFactory", "create", "createComponent", "ngModuleRef", "projectableNodes", "ngComponentOutletContent", "ngComponentOutletInputs", "inputName", "_applyInputStateDiff", "ngOnDestroy", "componentRef", "setInput", "ViewContainerRef", "selectors", "inputs", "features", "parentNgModule", "NgModuleRef", "NgForOfContext", "$implicit", "ngForOf", "index", "count", "first", "last", "even", "odd", "NgForOf", "_ngForOf", "_ngForOfDirty", "ngForTrackBy", "fn", "console", "warn", "JSON", "stringify", "_trackByFn", "_viewContainer", "_template", "_differs", "_differ", "ngForTemplate", "find", "errorMessage", "getTypeName", "ɵRuntimeError", "diff", "_applyChanges", "viewContainer", "forEachOperation", "item", "adjustedPreviousIndex", "currentIndex", "previousIndex", "createEmbeddedView", "remove", "view", "move", "applyViewChange", "i", "ilen", "viewRef", "context", "forEachIdentityChange", "record", "ngTemplateContextGuard", "dir", "ctx", "TemplateRef", "type", "NgIf", "templateRef", "_context", "NgIfContext", "_thenTemplateRef", "_elseTemplateRef", "_thenViewRef", "_elseViewRef", "ngIf", "condition", "_updateView", "ngIfThen", "assertTemplate", "ngIfElse", "property", "isTemplateRefOrNull", "NG_SWITCH_USE_STRICT_EQUALS", "SwitchView", "_templateRef", "_created", "enforceState", "created", "NgSwitch", "_defaultViews", "_defaultUsed", "_caseCount", "_lastCaseCheckIndex", "_lastCasesMatched", "ngSwitch", "newValue", "_ngSwitch", "_updateDefaultCases", "_addCase", "_addDefault", "push", "_matchCase", "matched", "ɵformatRuntimeError", "stringifyValue", "useDefault", "defaultView", "NgSwitchCase", "throwNgSwitchProviderNotFoundError", "_view", "ngSwitchCase", "Optional", "Host", "NgSwitchDefault", "attrName", "directiveName", "String", "NgPlural", "_localization", "_caseViews", "ngPlural", "addCase", "switchView", "switchValue", "_clearViews", "cases", "key", "getPluralCategory", "_activateView", "_activeView", "NgLocalization", "NgPluralCase", "template", "isANumber", "isNaN", "Number", "ɵfac", "NgPluralCase_Factory", "t", "Attribute", "NgStyle", "_ngStyle", "ngStyle", "values", "_setStyle", "nameAndUnit", "unit", "flags", "RendererStyleFlags2", "DashCase", "setStyle", "removeStyle", "forEachRemovedItem", "forEachAddedItem", "currentValue", "forEachChangedItem", "NgTemplateOutlet", "_viewRef", "ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector", "_shouldRecreateView", "viewContainerRef", "viewContext", "_createContextForwardProxy", "Proxy", "_target", "prop", "Reflect", "receiver", "COMMON_DIRECTIVES", "invalidPipeArgumentError", "SubscribableStrategy", "createSubscription", "async", "updateLatestValue", "untracked", "subscribe", "next", "error", "e", "dispose", "subscription", "unsubscribe", "PromiseStrategy", "then", "_promiseStrategy", "_subscribableStrategy", "AsyncPipe", "ref", "_latestValue", "_subscription", "_obj", "_strategy", "_ref", "_dispose", "transform", "obj", "_subscribe", "_selectStrategy", "_updateLatestValue", "ɵisPromise", "ɵisSubscribable", "markForCheck", "ChangeDetectorRef", "Pipe", "pure", "LowerCasePipe", "toLowerCase", "unicodeWordMatch", "TitleCasePipe", "replace", "txt", "toUpperCase", "UpperCasePipe", "DEFAULT_DATE_FORMAT", "DATE_PIPE_DEFAULT_TIMEZONE", "InjectionToken", "DATE_PIPE_DEFAULT_OPTIONS", "DatePipe", "locale", "defaultTimezone", "defaultOptions", "format", "timezone", "_format", "dateFormat", "_timezone", "formatDate", "message", "DatePipe_Factory", "LOCALE_ID", "Inject", "_INTERPOLATION_REGEXP", "I18nPluralPipe", "pluralMap", "toString", "I18nSelectPipe", "mapping", "hasOwnProperty", "JsonPipe", "makeKeyValuePair", "KeyValuePipe", "differs", "keyValues", "compareFn", "defaultComparator", "input", "differ", "differChanges", "compareFnChanged", "forEachItem", "r", "sort", "keyValueA", "keyValueB", "a", "b", "aString", "bString", "DecimalPipe", "_locale", "digitsInfo", "isValue", "num", "strToNumber", "formatNumber", "DecimalPipe_Factory", "PercentPipe", "formatPercent", "PercentPipe_Factory", "CurrencyPipe", "_defaultCurrencyCode", "currencyCode", "display", "currency", "getCurrencySymbol", "formatCurrency", "DEFAULT_CURRENCY_CODE", "parseFloat", "SlicePipe", "start", "end", "supports", "COMMON_PIPES", "CommonModule", "imports", "exports", "NgModule", "PLATFORM_BROWSER_ID", "PLATFORM_SERVER_ID", "isPlatformServer", "platformId", "PLATFORM_SERVER_ID", "VERSION", "Version", "ViewportScroller", "ɵprov", "ɵɵdefineInjectable", "token", "providedIn", "factory", "BrowserViewportScroller", "ɵɵinject", "DOCUMENT", "window", "constructor", "document", "offset", "setOffset", "Array", "isArray", "getScrollPosition", "supportsScrolling", "pageXOffset", "pageYOffset", "scrollToPosition", "position", "scrollTo", "scrollToAnchor", "target", "elSelected", "findAnchorFromDocument", "scrollToElement", "focus", "setHistoryScrollRestoration", "scrollRestoration", "history", "el", "rect", "getBoundingClientRect", "left", "top", "documentResult", "getElementById", "getElementsByName", "createTreeWalker", "body", "attachShadow", "treeWalker", "NodeFilter", "SHOW_ELEMENT", "currentNode", "shadowRoot", "result", "querySelector", "nextNode", "XhrFactory", "getUrl", "src", "win", "isAbsoluteUrl", "URL", "location", "href", "test", "extractHostname", "url", "hostname", "isValidPath", "path", "isString", "trim", "normalizePath", "endsWith", "slice", "normalizeSrc", "startsWith", "noopImageLoader", "config", "IMAGE_LOADER", "InjectionToken", "providedIn", "factory", "createImageLoader", "buildUrlFn", "exampleUrls", "provideImageLoader", "throwInvalidPathError", "loaderFn", "throwUnexpectedAbsoluteUrlError", "providers", "provide", "useValue", "ɵRuntimeError", "ngDevMode", "join", "provideCloudflareLoader", "createCloudflareUrl", "undefined", "params", "width", "cloudinaryLoaderInfo", "name", "testUrl", "isCloudinaryUrl", "CLOUDINARY_LOADER_REGEX", "provideCloudinaryLoader", "createCloudinaryUrl", "imageKitLoaderInfo", "isImageKitUrl", "IMAGE_KIT_LOADER_REGEX", "provideImageKitLoader", "createImagekitUrl", "urlSegments", "imgixLoaderInfo", "isImgixUrl", "IMGIX_LOADER_REGEX", "provideImgixLoader", "createImgixUrl", "searchParams", "set", "toString", "imgDirectiveDetails", "ngSrc", "includeNgSrc", "ngSrcInfo", "assertDevMode", "checkName", "LCPImageObserver", "constructor", "images", "Map", "window", "observer", "inject", "DOCUMENT", "defaultView", "PerformanceObserver", "initPerformanceObserver", "entryList", "entries", "getEntries", "length", "lcpElement", "imgSrc", "element", "img", "get", "priority", "alreadyWarnedPriority", "logMissingPriorityError", "modified", "alreadyWarnedModified", "logModifiedWarning", "observe", "type", "buffered", "registerImage", "rewrittenSrc", "originalNgSrc", "isPriority", "newObservedImageState", "unregisterImage", "delete", "updateImage", "originalSrc", "newSrc", "originalUrl", "ngOnDestroy", "disconnect", "clear", "ɵprov", "ɵfac", "Injectable", "directiveDetails", "console", "error", "ɵformatRuntimeError", "warn", "INTERNAL_PRECONNECT_CHECK_BLOCKLIST", "Set", "PRECONNECT_CHECK_BLOCKLIST", "PreconnectLinkChecker", "document", "preconnectLinks", "alreadySeen", "blocklist", "optional", "populateBlocklist", "origins", "Array", "isArray", "deepForEach", "origin", "add", "assertPreconnect", "imgUrl", "has", "queryPreconnectLinks", "preconnectUrls", "selector", "links", "from", "querySelectorAll", "link", "input", "fn", "value", "DEFAULT_PRELOADED_IMAGES_LIMIT", "PRELOADED_IMAGES", "PreloadLinkCreator", "preloadedImages", "createPreloadLinkTag", "renderer", "srcset", "sizes", "size", "preload", "createElement", "setAttribute", "appendChild", "head", "BASE64_IMG_MAX_LENGTH_IN_ERROR", "VALID_WIDTH_DESCRIPTOR_SRCSET", "VALID_DENSITY_DESCRIPTOR_SRCSET", "ABSOLUTE_SRCSET_DENSITY_CAP", "RECOMMENDED_SRCSET_DENSITY_CAP", "DENSITY_SRCSET_MULTIPLIERS", "VIEWPORT_BREAKPOINT_CUTOFF", "ASPECT_RATIO_TOLERANCE", "OVERSIZED_IMAGE_TOLERANCE", "FIXED_SRCSET_WIDTH_LIMIT", "FIXED_SRCSET_HEIGHT_LIMIT", "BUILT_IN_LOADERS", "NgOptimizedImage", "imageLoader", "processConfig", "ɵIMAGE_CONFIG", "Renderer2", "imgElement", "ElementRef", "nativeElement", "injector", "Injector", "isServer", "isPlatformServer", "PLATFORM_ID", "preloadLinkCreator", "lcpObserver", "_renderedSrc", "disableOptimizedSrcset", "fill", "ngOnInit", "ɵperformanceMarkFeature", "ngZone", "NgZone", "assertNonEmptyInput", "assertValidNgSrcset", "ngSrcset", "assertNoConflictingSrc", "assertNoConflictingSrcset", "assertNotBase64Image", "assertNotBlobUrl", "assertEmptyWidthAndHeight", "runOutsideAngular", "assertNonZeroRenderedHeight", "assertNonEmptyWidthAndHeight", "height", "assertGreaterThanZero", "assertNoImageDistortion", "assertValidLoadingInput", "assertNoComplexSizes", "assertNotMissingBuiltInLoader", "assertNoNgSrcsetWithoutLoader", "assertNoLoaderParamsWithoutLoader", "getRewrittenSrc", "checker", "setHostAttributes", "setHostAttribute", "getLoadingBehavior", "getFetchPriority", "rewrittenSrcset", "updateSrcAndSrcset", "ngOnChanges", "changes", "assertNoPostInitInputChange", "isFirstChange", "oldSrc", "callImageLoader", "configWithoutCustomParams", "augmentedConfig", "loaderParams", "loading", "imgConfig", "getRewrittenSrcset", "widthSrcSet", "finalSrcs", "split", "filter", "map", "srcStr", "parseFloat", "getAutomaticSrcset", "getResponsiveSrcset", "getFixedSrcset", "breakpoints", "filteredBreakpoints", "bp", "forceSrcRecalc", "shouldGenerateAutomaticSrcset", "multiplier", "oversizedImage", "selectors", "hostVars", "hostBindings", "NgOptimizedImage_HostBindings", "rf", "ctx", "unwrapSafeUrl", "numberAttribute", "booleanAttribute", "standalone", "features", "Directive", "args", "host", "Input", "required", "transform", "sortedBreakpoints", "sort", "a", "b", "Object", "assign", "ɵIMAGE_CONFIG_DEFAULTS", "dir", "substring", "match", "isEmptyString", "stringVal", "isValidWidthDescriptor", "isValidDensityDescriptor", "assertUnderDensityCap", "isValidSrcset", "underDensityCap", "every", "num", "postInitInputChangeError", "inputName", "reason", "inputs", "forEach", "isUpdated", "hasOwnProperty", "previousValue", "inputValue", "validNumber", "validString", "parseInt", "removeListenerFn", "listen", "computedStyle", "getComputedStyle", "renderedWidth", "getPropertyValue", "renderedHeight", "boxSizing", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "renderedAspectRatio", "nonZeroRenderedDimensions", "intrinsicWidth", "naturalWidth", "intrinsicHeight", "naturalHeight", "intrinsicAspectRatio", "suppliedWidth", "suppliedHeight", "suppliedAspectRatio", "inaccurateDimensions", "Math", "abs", "stylingDistortion", "round", "recommendedWidth", "recommendedHeight", "oversizedWidth", "oversizedHeight", "missingAttributes", "push", "attr", "clientHeight", "validInputs", "includes", "builtInLoaderName", "loader", "Number", "isInteger", "toFixed", "ɵunwrapSafeValue", "HttpHandler", "HttpBackend", "HttpHeaders", "constructor", "headers", "normalizedNames", "Map", "lazyUpdate", "lazyInit", "split", "forEach", "line", "index", "indexOf", "name", "slice", "key", "toLowerCase", "value", "trim", "maybeSetNormalizedName", "has", "get", "push", "set", "Headers", "values", "setHeaderEntries", "ngDevMode", "assertValidHeaders", "Object", "entries", "init", "length", "keys", "Array", "from", "getAll", "append", "clone", "op", "delete", "lcName", "copyFrom", "update", "applyUpdate", "other", "concat", "base", "undefined", "toDelete", "existing", "filter", "headerValues", "isArray", "map", "toString", "fn", "Error", "HttpUrlEncodingCodec", "encodeKey", "standardEncoding", "encodeValue", "decodeKey", "decodeURIComponent", "decodeValue", "paramParser", "rawParams", "codec", "params", "replace", "param", "eqIdx", "val", "list", "STANDARD_ENCODING_REGEX", "STANDARD_ENCODING_REPLACEMENTS", "v", "encodeURIComponent", "s", "t", "valueToString", "HttpParams", "options", "updates", "cloneFrom", "encoder", "fromString", "fromObject", "res", "appendAll", "_value", "eKey", "join", "idx", "splice", "HttpContext", "constructor", "map", "Map", "set", "token", "value", "get", "has", "defaultValue", "delete", "keys", "mightHaveBody", "method", "isArrayBuffer", "ArrayBuffer", "isBlob", "Blob", "isFormData", "FormData", "isUrlSearchParams", "URLSearchParams", "HttpRequest", "url", "third", "fourth", "body", "reportProgress", "withCredentials", "responseType", "toUpperCase", "options", "undefined", "headers", "context", "params", "transferCache", "HttpHeaders", "HttpParams", "urlWithParams", "toString", "length", "qIdx", "indexOf", "sep", "serializeBody", "Array", "isArray", "JSON", "stringify", "detectContentTypeHeader", "type", "clone", "update", "setHeaders", "Object", "reduce", "name", "setParams", "param", "HttpEventType", "HttpResponseBase", "init", "defaultStatus", "defaultStatusText", "status", "statusText", "ok", "HttpHeaderResponse", "ResponseHeader", "HttpResponse", "Response", "HttpErrorResponse", "message", "error", "addBody", "observe", "HttpClient", "handler", "request", "first", "req", "fromObject", "events$", "of", "pipe", "concatMap", "handle", "res$", "filter", "event", "res", "Error", "head", "jsonp", "callbackParam", "append", "patch", "post", "put", "HttpHandler", "Injectable", "XSSI_PREFIX$1", "REQUEST_URL_HEADER", "getResponseUrl$1", "response", "xRequestUrl", "toLocaleLowerCase", "FetchBackend", "fetchImpl", "inject", "FetchFactory", "optional", "fetch", "bind", "globalThis", "ngZone", "NgZone", "Observable", "observer", "aborter", "AbortController", "doRequest", "signal", "then", "noop", "abort", "createRequestInit", "fetchPromise", "silenceSuperfluousUnhandledPromiseRejection", "next", "Sent", "contentLength", "chunks", "reader", "getReader", "receivedLength", "decoder", "partialText", "reqZone", "Zone", "current", "runOutsideAngular", "done", "read", "push", "TextDecoder", "decode", "stream", "DownloadProgress", "total", "loaded", "run", "chunksAll", "concatChunks", "contentType", "parseBody", "complete", "binContent", "text", "replace", "parse", "buffer", "credentials", "forEach", "values", "join", "detectedType", "totalLength", "Uint8Array", "position", "chunk", "factory", "ɵfac", "promise", "interceptorChainEndFn", "finalHandlerFn", "adaptLegacyInterceptorToChain", "chainTailFn", "interceptor", "initialRequest", "intercept", "downstreamRequest", "chainedInterceptorFn", "interceptorFn", "injector", "runInContext", "HTTP_INTERCEPTORS", "InjectionToken", "ngDevMode", "HTTP_INTERCEPTOR_FNS", "HTTP_ROOT_INTERCEPTOR_FNS", "PRIMARY_HTTP_BACKEND", "legacyInterceptorFnFactory", "chain", "interceptors", "reduceRight", "pendingTasks", "ɵInitialRenderPendingTasks", "taskId", "add", "finalize", "remove", "fetchBackendWarningDisplayed", "HttpInterceptorHandler", "HttpHandler", "constructor", "backend", "injector", "chain", "pendingTasks", "inject", "ɵInitialRenderPendingTasks", "primaryHttpBackend", "PRIMARY_HTTP_BACKEND", "optional", "ngDevMode", "fetchBackendWarningDisplayed", "isServer", "isPlatformServer", "get", "PLATFORM_ID", "FetchBackend", "ɵConsole", "warn", "ɵformatRuntimeError", "handle", "initialRequest", "dedupedInterceptorFns", "Array", "from", "Set", "HTTP_INTERCEPTOR_FNS", "HTTP_ROOT_INTERCEPTOR_FNS", "reduceRight", "nextSequencedFn", "interceptorFn", "chainedInterceptorFn", "interceptorChainEndFn", "taskId", "add", "downstreamRequest", "pipe", "finalize", "remove", "HttpBackend", "EnvironmentInjector", "factory", "ɵfac", "Injectable", "nextRequestId", "foreignDocument", "JSONP_ERR_NO_CALLBACK", "JSONP_ERR_WRONG_METHOD", "JSONP_ERR_WRONG_RESPONSE_TYPE", "JSONP_ERR_HEADERS_NOT_SUPPORTED", "JsonpCallbackContext", "jsonpCallbackContext", "window", "JsonpClientBackend", "callbackMap", "document", "resolvedPromise", "Promise", "resolve", "nextCallback", "req", "method", "Error", "responseType", "headers", "keys", "length", "Observable", "observer", "callback", "url", "urlWithParams", "replace", "node", "createElement", "src", "body", "finished", "data", "cleanup", "parentNode", "removeChild", "onLoad", "event", "then", "error", "HttpErrorResponse", "status", "statusText", "next", "HttpResponse", "complete", "onError", "addEventListener", "appendChild", "type", "HttpEventType", "Sent", "removeListeners", "script", "implementation", "createHTMLDocument", "adoptNode", "JsonpClientBackend_Factory", "t", "DOCUMENT", "Inject", "jsonpInterceptorFn", "JsonpInterceptor", "intercept", "runInContext", "XSSI_PREFIX", "getResponseUrl", "xhr", "responseURL", "test", "getAllResponseHeaders", "getResponseHeader", "HttpXhrBackend", "xhrFactory", "ɵRuntimeError", "source", "ɵloadImpl", "of", "switchMap", "build", "open", "withCredentials", "forEach", "name", "values", "setRequestHeader", "join", "has", "detectedType", "detectContentTypeHeader", "toLowerCase", "reqBody", "serializeBody", "headerResponse", "partialFromXhr", "HttpHeaders", "HttpHeaderResponse", "response", "responseText", "ok", "originalBody", "JSON", "parse", "text", "undefined", "res", "sentHeaders", "onDownProgress", "progressEvent", "DownloadProgress", "loaded", "lengthComputable", "total", "partialText", "onUpProgress", "progress", "UploadProgress", "reportProgress", "upload", "send", "removeEventListener", "readyState", "DONE", "abort", "XhrFactory", "XSRF_ENABLED", "InjectionToken", "XSRF_DEFAULT_COOKIE_NAME", "XSRF_COOKIE_NAME", "providedIn", "XSRF_DEFAULT_HEADER_NAME", "XSRF_HEADER_NAME", "HttpXsrfTokenExtractor", "HttpXsrfCookieExtractor", "doc", "platform", "cookieName", "lastCookieString", "lastToken", "parseCount", "getToken", "cookieString", "cookie", "ɵparseCookieValue", "HttpXsrfCookieExtractor_Factory", "xsrfInterceptorFn", "lcUrl", "startsWith", "token", "headerName", "clone", "set", "HttpXsrfInterceptor", "HttpFeatureKind", "makeHttpFeature", "kind", "providers", "ɵkind", "ɵproviders", "provideHttpClient", "features", "featureKinds", "map", "f", "NoXsrfProtection", "CustomXsrfConfiguration", "HttpClient", "provide", "useExisting", "useValue", "multi", "useClass", "feature", "push", "makeEnvironmentProviders", "LEGACY_INTERCEPTOR_FN", "InjectionToken", "withInterceptorsFromDi", "makeHttpFeature", "HttpFeatureKind", "LegacyInterceptors", "provide", "useFactory", "legacyInterceptorFnFactory", "HTTP_INTERCEPTOR_FNS", "useExisting", "multi", "withXsrfConfiguration", "cookieName", "headerName", "providers", "undefined", "push", "XSRF_COOKIE_NAME", "useValue", "XSRF_HEADER_NAME", "CustomXsrfConfiguration", "withNoXsrfProtection", "NoXsrfProtection", "XSRF_ENABLED", "withJsonpSupport", "JsonpSupport", "JsonpClientBackend", "JsonpCallbackContext", "jsonpCallbackContext", "jsonpInterceptorFn", "HttpClientXsrfModule", "disable", "ngModule", "providers", "withNoXsrfProtection", "ɵproviders", "withOptions", "options", "withXsrfConfiguration", "ɵinj", "HttpXsrfInterceptor", "provide", "HTTP_INTERCEPTORS", "useExisting", "multi", "HttpXsrfTokenExtractor", "useClass", "HttpXsrfCookieExtractor", "cookieName", "XSRF_DEFAULT_COOKIE_NAME", "headerName", "XSRF_DEFAULT_HEADER_NAME", "XSRF_ENABLED", "useValue", "NgModule", "args", "HttpClientModule", "provideHttpClient", "withInterceptorsFromDi", "HttpClientJsonpModule", "withJsonpSupport", "BODY", "HEADERS", "STATUS", "STATUS_TEXT", "URL", "RESPONSE_TYPE", "CACHE_OPTIONS", "InjectionToken", "ngDevMode", "ALLOWED_METHODS", "transferCacheInterceptorFn", "req", "next", "inject", "isCacheActive", "globalOptions", "transferCache", "requestOptions", "method", "requestMethod", "includePostRequests", "includes", "filter", "transferState", "TransferState", "storeKey", "makeCacheKey", "response", "get", "headersToInclude", "includeHeaders", "undecodedBody", "responseType", "httpHeaders", "status", "statusText", "url", "body", "TextEncoder", "encode", "buffer", "Blob", "headers", "HttpHeaders", "appendMissingHeadersDetection", "of", "HttpResponse", "pipe", "tap", "event", "set", "getFilteredHeaders", "headersMap", "key", "values", "getAll", "request", "params", "encodedParams", "keys", "sort", "map", "k", "join", "hash", "generateHash", "makeStateKey", "value", "char", "Math", "imul", "charCodeAt", "toString", "withHttpTransferCache", "cacheOptions", "useFactory", "ɵperformanceMarkFeature", "HTTP_ROOT_INTERCEPTOR_FNS", "deps", "APP_BOOTSTRAP_LISTENER", "appRef", "ApplicationRef", "cacheState", "ɵwhenStable", "then", "warningProduced", "Set", "Proxy", "target", "prop", "Reflect", "methods", "has", "toLowerCase", "add", "truncatedUrl", "ɵtruncateMiddle", "console", "warn", "ɵformatRuntimeError", "apply", "GenericBrowserDomAdapter", "ɵDomAdapter", "constructor", "supportsDOMEvents", "BrowserDomAdapter", "makeCurrent", "ɵsetRootDomAdapter", "onAndCancel", "el", "evt", "listener", "addEventListener", "removeEventListener", "dispatchEvent", "remove", "node", "parentNode", "removeChild", "createElement", "tagName", "doc", "getDefaultDocument", "createHtmlDocument", "document", "implementation", "createHTMLDocument", "isElementNode", "nodeType", "Node", "ELEMENT_NODE", "isShadowRoot", "DocumentFragment", "getGlobalEventTarget", "target", "window", "body", "getBaseHref", "href", "getBaseElementHref", "relativePath", "resetBaseElement", "baseElement", "getUserAgent", "navigator", "userAgent", "getCookie", "name", "ɵparseCookieValue", "cookie", "querySelector", "getAttribute", "urlParsingNode", "url", "setAttribute", "pathName", "pathname", "charAt", "BrowserGetTestability", "addToWindow", "registry", "ɵglobal", "elem", "findInAncestors", "testability", "findTestabilityInTree", "ɵRuntimeError", "ngDevMode", "getAllTestabilities", "getAllRootElements", "whenAllStable", "callback", "testabilities", "count", "length", "didWork", "decrement", "didWork_", "forEach", "whenStable", "push", "t", "getTestability", "ɵgetDOM", "host", "parentElement", "BrowserXhr", "build", "XMLHttpRequest", "Injectable", "EVENT_MANAGER_PLUGINS", "InjectionToken", "EventManager", "plugins", "_zone", "_eventNameToPlugin", "Map", "plugin", "manager", "_plugins", "slice", "reverse", "element", "eventName", "handler", "_findPluginFor", "getZone", "get", "find", "supports", "set", "ɵfac", "EventManager_Factory", "NgZone", "factory", "Inject", "EventManagerPlugin", "_doc", "APP_ID_ATTRIBUTE_NAME", "SharedStylesHost", "appId", "nonce", "platformId", "styleRef", "hostNodes", "Set", "styleNodesInDOM", "collectServerRenderedStyles", "platformIsServer", "isPlatformServer", "resetHostNodes", "addStyles", "styles", "style", "usageCount", "changeUsageCount", "onStyleAdded", "removeStyles", "onStyleRemoved", "ngOnDestroy", "clear", "getAllStyles", "addHost", "hostNode", "add", "addStyleToHost", "removeHost", "delete", "keys", "elements", "head", "querySelectorAll", "styleMap", "textContent", "delta", "map", "has", "styleRefValue", "usage", "getStyleElement", "styleEl", "removeAttribute", "appendChild", "styleElRef", "SharedStylesHost_Factory", "DOCUMENT", "APP_ID", "CSP_NONCE", "PLATFORM_ID", "Optional", "NAMESPACE_URIS", "COMPONENT_REGEX", "COMPONENT_VARIABLE", "HOST_ATTR", "CONTENT_ATTR", "REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT", "REMOVE_STYLES_ON_COMPONENT_DESTROY", "providedIn", "shimContentAttribute", "componentShortId", "replace", "shimHostAttribute", "shimStylesContent", "compId", "s", "DomRendererFactory2", "eventManager", "sharedStylesHost", "removeStylesOnCompDestroy", "ngZone", "rendererByCompId", "defaultRenderer", "DefaultDomRenderer2", "createRenderer", "type", "encapsulation", "ViewEncapsulation", "ShadowDom", "Emulated", "renderer", "getOrCreateRenderer", "EmulatedEncapsulationDomRenderer2", "applyToHost", "NoneEncapsulationDomRenderer", "applyStyles", "id", "ShadowDomRenderer", "data", "Object", "create", "throwOnSyntheticProps", "destroyNode", "destroy", "namespace", "createElementNS", "createComment", "value", "createText", "createTextNode", "parent", "newChild", "targetParent", "isTemplateNode", "content", "insertBefore", "refChild", "oldChild", "selectRootElement", "selectorOrNode", "preserveContent", "nextSibling", "namespaceUri", "setAttributeNS", "removeAttributeNS", "addClass", "classList", "removeClass", "setStyle", "flags", "RendererStyleFlags2", "DashCase", "Important", "setProperty", "removeStyle", "removeProperty", "checkNoSyntheticProp", "setValue", "nodeValue", "listen", "event", "Error", "decoratePreventDefault", "eventHandler", "allowDefaultBehavior", "runGuarded", "preventDefault", "undefined", "AT_CHARCODE", "charCodeAt", "nameKind", "hostEl", "component", "shadowRoot", "attachShadow", "mode", "nodeOrShadowRoot", "contentAttr", "hostAttr", "DomEventsPlugin", "DomEventsPlugin_Factory", "MODIFIER_KEYS", "_keyMap", "MODIFIER_KEY_GETTERS", "altKey", "ctrlKey", "metaKey", "shiftKey", "KeyEventsPlugin", "parseEventName", "parsedEvent", "outsideHandler", "eventCallback", "runOutsideAngular", "parts", "toLowerCase", "split", "domEventName", "shift", "key", "_normalizeKey", "pop", "fullKey", "codeIX", "indexOf", "splice", "modifierName", "index", "result", "matchEventFullKeyCode", "fullKeyCode", "keycode", "code", "modifierGetter", "zone", "keyName", "KeyEventsPlugin_Factory", "bootstrapApplication", "rootComponent", "options", "ɵinternalCreateApplication", "createProvidersConfig", "createApplication", "appProviders", "BROWSER_MODULE_PROVIDERS", "providers", "platformProviders", "INTERNAL_BROWSER_PLATFORM_PROVIDERS", "provideProtractorTestingSupport", "TESTABILITY_PROVIDERS", "initDomAdapter", "errorHandler", "ErrorHandler", "_document", "ɵsetDocument", "provide", "useValue", "ɵPLATFORM_BROWSER_ID", "PLATFORM_INITIALIZER", "multi", "useFactory", "deps", "platformBrowser", "createPlatformFactory", "platformCore", "BROWSER_MODULE_PROVIDERS_MARKER", "ɵTESTABILITY_GETTER", "useClass", "ɵTESTABILITY", "Testability", "TestabilityRegistry", "ɵINJECTOR_SCOPE", "RendererFactory2", "useExisting", "XhrFactory", "BrowserModule", "providersAlreadyPresent", "withServerTransition", "params", "ngModule", "BrowserModule_Factory", "exports", "CommonModule", "ApplicationModule", "imports", "NgModule", "args", "SkipSelf", "createMeta", "Meta", "ɵɵinject", "_dom", "addTag", "tag", "forceCreation", "_getOrCreateElement", "addTags", "tags", "reduce", "getTag", "attrSelector", "getTags", "list", "call", "updateTag", "selector", "_parseSelector", "meta", "_setMetaElementAttributes", "removeTag", "removeTagElement", "filter", "_containsAttributes", "getElementsByTagName", "prop", "_getMetaKeyMap", "attr", "every", "META_KEYS_MAP", "Meta_Factory", "r", "httpEquiv", "createTitle", "Title", "getTitle", "title", "setTitle", "newTitle", "Title_Factory", "exportNgVar", "COMPILED", "ng", "win", "ChangeDetectionPerfRecord", "msPerTick", "numTicks", "AngularProfiler", "ref", "appRef", "injector", "ApplicationRef", "timeChangeDetection", "config", "record", "profileName", "isProfilerAvailable", "console", "profile", "start", "performanceNow", "tick", "end", "profileEnd", "log", "toFixed", "performance", "now", "Date", "getTime", "PROFILER_GLOBAL_NAME", "enableDebugTools", "disableDebugTools", "By", "all", "css", "debugElement", "nativeElement", "elementMatches", "directive", "debugNode", "providerTokens", "n", "matches", "msMatchesSelector", "webkitMatchesSelector", "EVENT_NAMES", "HAMMER_GESTURE_CONFIG", "HAMMER_LOADER", "HammerGestureConfig", "events", "overrides", "buildHammer", "mc", "Hammer", "enable", "HammerGesturesPlugin", "_config", "loader", "_loaderPromise", "hasOwnProperty", "isCustomEvent", "warn", "cancelRegistration", "deregister", "then", "catch", "eventObj", "on", "off", "HammerGesturesPlugin_Factory", "ɵConsole", "HammerModule", "ɵinj", "DomSanitizer", "DomSanitizer_Factory", "DomSanitizerImpl", "forwardRef", "domSanitizerImplFactory", "sanitize", "ctx", "SecurityContext", "NONE", "HTML", "ɵallowSanitizationBypassAndThrow", "ɵunwrapSafeValue", "ɵ_sanitizeHtml", "String", "toString", "STYLE", "SCRIPT", "URL", "ɵ_sanitizeUrl", "RESOURCE_URL", "ɵXSS_SECURITY_URL", "bypassSecurityTrustHtml", "ɵbypassSanitizationTrustHtml", "bypassSecurityTrustStyle", "ɵbypassSanitizationTrustStyle", "bypassSecurityTrustScript", "ɵbypassSanitizationTrustScript", "bypassSecurityTrustUrl", "ɵbypassSanitizationTrustUrl", "bypassSecurityTrustResourceUrl", "ɵbypassSanitizationTrustResourceUrl", "DomSanitizerImpl_Factory", "ɵprov", "Injector", "hydrationFeature", "ɵkind", "ɵproviders", "ɵoptions", "withNoHttpTransferCache", "withHttpTransferCacheOptions", "ɵwithHttpTransferCache", "provideZoneJsCompatibilityDetector", "ENVIRONMENT_INITIALIZER", "inject", "message", "ɵformatRuntimeError", "provideClientHydration", "features", "featuresKind", "hasHttpTransferCacheOptions", "makeEnvironmentProviders", "ɵwithDomHydration", "VERSION", "Version", "makeStateKey", "makeStateKey$1", "TransferState", "TransferState$1"]
}
